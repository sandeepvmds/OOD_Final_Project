<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="FactoryMethod()" element="com.opensymphony.xwork2.ActionProxyFactory::createActionProxy(com.opensymphony.xwork2.ActionInvocation, java.lang.String, java.lang.String, java.lang.String, boolean, boolean):com.opensymphony.xwork2.ActionProxy" />
		</instance>
		<instance>
			<role name="Creator" element="com.opensymphony.xwork2.config.RuntimeConfiguration" />
			<role name="FactoryMethod()" element="com.opensymphony.xwork2.config.RuntimeConfiguration::getActionConfig(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
		</instance>
		<instance>
			<role name="Creator" element="com.opensymphony.xwork2.inject.Scope" />
			<role name="FactoryMethod()" element="com.opensymphony.xwork2.inject.Scope::scopeFactory(, java.lang.String, com.opensymphony.xwork2.inject.InternalFactory):com.opensymphony.xwork2.inject.InternalFactory" />
		</instance>
		<instance>
			<role name="Creator" element="com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="FactoryMethod()" element="com.opensymphony.xwork2.util.finder.ClassLoaderInterface::getParent():com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
		</instance>
		<instance>
			<role name="Creator" element="com.opensymphony.xwork2.util.logging.LoggerFactory" />
			<role name="FactoryMethod()" element="com.opensymphony.xwork2.util.logging.LoggerFactory::getLoggerImpl(java.lang.Class):com.opensymphony.xwork2.util.logging.Logger" />
			<role name="FactoryMethod()" element="com.opensymphony.xwork2.util.logging.LoggerFactory::getLoggerImpl(java.lang.String):com.opensymphony.xwork2.util.logging.Logger" />
		</instance>
		<instance>
			<role name="Creator" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="FactoryMethod()" element="com.opensymphony.xwork2.util.ValueStackFactory::createValueStack():com.opensymphony.xwork2.util.ValueStack" />
			<role name="FactoryMethod()" element="com.opensymphony.xwork2.util.ValueStackFactory::createValueStack(com.opensymphony.xwork2.util.ValueStack):com.opensymphony.xwork2.util.ValueStack" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.struts2.views.freemarker.tags.TagModel" />
			<role name="FactoryMethod()" element="org.apache.struts2.views.freemarker.tags.TagModel::getBean():org.apache.struts2.components.Component" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.struts2.views.jsp.ComponentTagSupport" />
			<role name="FactoryMethod()" element="org.apache.struts2.views.jsp.ComponentTagSupport::getBean(com.opensymphony.xwork2.util.ValueStack, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):org.apache.struts2.components.Component" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.struts2.views.velocity.components.AbstractDirective" />
			<role name="FactoryMethod()" element="org.apache.struts2.views.velocity.components.AbstractDirective::getBean(com.opensymphony.xwork2.util.ValueStack, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):org.apache.struts2.components.Component" />
		</instance>
	</pattern>
	<pattern name="Prototype" />
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="com.opensymphony.xwork2.util.location.Location" />
			<role name="uniqueInstance" element="com.opensymphony.xwork2.util.location.Location::UNKNOWN:com.opensymphony.xwork2.util.location.Location" />
		</instance>
		<instance>
			<role name="Singleton" element="com.opensymphony.xwork2.util.location.LocationImpl" />
			<role name="uniqueInstance" element="com.opensymphony.xwork2.util.location.LocationImpl::UNKNOWN:com.opensymphony.xwork2.util.location.LocationImpl" />
		</instance>
		<instance>
			<role name="Singleton" element="com.opensymphony.xwork2.util.logging.LoggerFactory" />
			<role name="uniqueInstance" element="com.opensymphony.xwork2.util.logging.LoggerFactory::factory:com.opensymphony.xwork2.util.logging.LoggerFactory" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.struts2.config.ServletContextSingleton" />
			<role name="uniqueInstance" element="org.apache.struts2.config.ServletContextSingleton::singleton:org.apache.struts2.config.ServletContextSingleton" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.struts2.osgi.DefaultBundleAccessor" />
			<role name="uniqueInstance" element="org.apache.struts2.osgi.DefaultBundleAccessor::self:org.apache.struts2.osgi.DefaultBundleAccessor" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.struts2.views.jsp.ui.MockTag" />
			<role name="uniqueInstance" element="org.apache.struts2.views.jsp.ui.MockTag::instance:org.apache.struts2.views.jsp.ui.MockTag" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.struts2.views.JspSupportServlet" />
			<role name="uniqueInstance" element="org.apache.struts2.views.JspSupportServlet::jspSupportServlet:org.apache.struts2.views.JspSupportServlet" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adaptee" element="org.apache.struts2.rest.example.Order" />
			<role name="Adapter" element="org.apache.struts2.rest.example.OrdersController" />
			<role name="adaptee" element="org.apache.struts2.rest.example.OrdersController::model:org.apache.struts2.rest.example.Order" />
			<role name="Request()" element="org.apache.struts2.rest.example.OrdersController::validate():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.json.JSONCleaner" />
			<role name="Adapter" element="org.apache.struts2.json.JSONInterceptor" />
			<role name="adaptee" element="org.apache.struts2.json.JSONInterceptor::dataCleaner:org.apache.struts2.json.JSONCleaner" />
			<role name="Request()" element="org.apache.struts2.json.JSONInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.json.JSONPopulator" />
			<role name="Adapter" element="org.apache.struts2.json.JSONInterceptor" />
			<role name="adaptee" element="org.apache.struts2.json.JSONInterceptor::populator:org.apache.struts2.json.JSONPopulator" />
			<role name="Request()" element="org.apache.struts2.json.JSONInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.CompoundRoot" />
			<role name="Adapter" element="com.opensymphony.xwork2.ognl.OgnlValueStack" />
			<role name="adaptee" element="com.opensymphony.xwork2.ognl.OgnlValueStack::root:com.opensymphony.xwork2.util.CompoundRoot" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::peek():java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::pop():java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::push(java.lang.Object):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.CompoundRoot" />
			<role name="Adapter" element="com.opensymphony.xwork2.StubValueStack" />
			<role name="adaptee" element="com.opensymphony.xwork2.StubValueStack::root:com.opensymphony.xwork2.util.CompoundRoot" />
			<role name="Request()" element="com.opensymphony.xwork2.StubValueStack::peek():java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.StubValueStack::pop():java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.StubValueStack::push(java.lang.Object):void" />
			<role name="Request()" element="com.opensymphony.xwork2.StubValueStack::size():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ognl.SecurityMemberAccess" />
			<role name="Adapter" element="com.opensymphony.xwork2.ognl.OgnlValueStack" />
			<role name="adaptee" element="com.opensymphony.xwork2.ognl.OgnlValueStack::securityMemberAccess:com.opensymphony.xwork2.ognl.SecurityMemberAccess" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::setAcceptProperties(java.util.Set):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::setExcludeProperties(java.util.Set):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.views.velocity.VelocityManager" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.VelocityResult" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.VelocityResult::velocityManager:org.apache.struts2.views.velocity.VelocityManager" />
			<role name="Request()" element="org.apache.struts2.dispatcher.VelocityResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.components.template.TemplateRenderingContext" />
			<role name="Adapter" element="org.apache.struts2.views.java.simple.AbstractTagHandler" />
			<role name="adaptee" element="org.apache.struts2.views.java.simple.AbstractTagHandler::context:org.apache.struts2.components.template.TemplateRenderingContext" />
			<role name="Request()" element="org.apache.struts2.views.java.simple.AbstractTagHandler::setup(org.apache.struts2.components.template.TemplateRenderingContext):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.AliasInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.AliasInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.AliasInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.I18nInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.I18nInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.I18nInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.ParameterFilterInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.ParameterFilterInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ParameterFilterInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.ParameterRemoverInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.ParameterRemoverInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ParameterRemoverInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.PrepareInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.PrepareInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.PrepareInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.interceptor.CheckboxInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.CheckboxInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.CheckboxInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.interceptor.ClearSessionInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.ClearSessionInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.ClearSessionInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.interceptor.CookieInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.CookieInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.CookieInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.interceptor.CreateSessionInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.CreateSessionInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.CreateSessionInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.interceptor.FileUploadInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.FileUploadInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.FileUploadInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.interceptor.MessageStoreInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.MessageStoreInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.MessageStoreInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.interceptor.ScopeInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.ScopeInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.ScopeInterceptor::beforeResult(com.opensymphony.xwork2.ActionInvocation, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.json.JSONInterceptor" />
			<role name="adaptee" element="org.apache.struts2.json.JSONInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.json.JSONInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.osgi.interceptor.OsgiInterceptor" />
			<role name="adaptee" element="org.apache.struts2.osgi.interceptor.OsgiInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.interceptor.OsgiInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor" />
			<role name="adaptee" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.portlet.interceptor.PortletAwareInterceptor" />
			<role name="adaptee" element="org.apache.struts2.portlet.interceptor.PortletAwareInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.interceptor.PortletAwareInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.rest.RestWorkflowInterceptor" />
			<role name="adaptee" element="org.apache.struts2.rest.RestWorkflowInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.rest.RestWorkflowInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.showcase.chat.ChatAuthenticationInterceptor" />
			<role name="adaptee" element="org.apache.struts2.showcase.chat.ChatAuthenticationInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.ChatAuthenticationInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.showcase.chat.ChatInterceptor" />
			<role name="adaptee" element="org.apache.struts2.showcase.chat.ChatInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.ChatInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.components.Component" />
			<role name="Adapter" element="org.apache.struts2.components.ComponentUrlProvider" />
			<role name="adaptee" element="org.apache.struts2.components.ComponentUrlProvider::component:org.apache.struts2.components.Component" />
			<role name="Request()" element="org.apache.struts2.components.ComponentUrlProvider::determineActionURL(java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.util.Map, java.lang.String, boolean, boolean, boolean, boolean):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.components.ComponentUrlProvider::determineNamespace(java.lang.String, com.opensymphony.xwork2.util.ValueStack, javax.servlet.http.HttpServletRequest):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.components.ComponentUrlProvider::findString(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.components.ComponentUrlProvider::getStack():com.opensymphony.xwork2.util.ValueStack" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ActionInvocation" />
			<role name="Adapter" element="org.apache.struts2.views.freemarker.FreemarkerResult" />
			<role name="adaptee" element="org.apache.struts2.views.freemarker.FreemarkerResult::invocation:com.opensymphony.xwork2.ActionInvocation" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreemarkerResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.ActionChainResult" />
			<role name="adaptee" element="com.opensymphony.xwork2.ActionChainResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionChainResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.TestResult" />
			<role name="adaptee" element="org.apache.struts2.TestResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.TestResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.PlainTextResult" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.PlainTextResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.PlainTextResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.ServletDispatcherResult" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.ServletDispatcherResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ServletDispatcherResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.ServletRedirectResult" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.ServletRedirectResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ServletRedirectResult::handle(com.opensymphony.xwork2.util.reflection.ReflectionException):void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ServletRedirectResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.StreamResult" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.StreamResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.StreamResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.VelocityResult" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.VelocityResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.VelocityResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.json.JSONResult" />
			<role name="adaptee" element="org.apache.struts2.json.JSONResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.json.JSONResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.portlet.result.PortletActionRedirectResult" />
			<role name="adaptee" element="org.apache.struts2.portlet.result.PortletActionRedirectResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.result.PortletActionRedirectResult::handle(com.opensymphony.xwork2.util.reflection.ReflectionException):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.views.jasperreports.JasperReportsResult" />
			<role name="adaptee" element="org.apache.struts2.views.jasperreports.JasperReportsResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.JasperReportsResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.views.xslt.XSLTResult" />
			<role name="adaptee" element="org.apache.struts2.views.xslt.XSLTResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.XSLTResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.opensymphony.xwork2.inject.ContainerBuilder$5" />
			<role name="Adaptee" element="com.opensymphony.xwork2.inject.ContainerImpl$ConstructorInjector" />
			<role name="adaptee" element="com.opensymphony.xwork2.inject.ContainerBuilder$5::constructor:com.opensymphony.xwork2.inject.ContainerImpl$ConstructorInjector" />
			<role name="Request()" element="com.opensymphony.xwork2.inject.ContainerBuilder$5::create(com.opensymphony.xwork2.inject.InternalContext):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.config.entities.PackageConfig" />
			<role name="Adapter" element="org.apache.struts2.convention.ConventionUnknownHandler" />
			<role name="adaptee" element="org.apache.struts2.convention.ConventionUnknownHandler::parentPackage:com.opensymphony.xwork2.config.entities.PackageConfig" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.struts2.views.xslt.AbstractAdapterNode" />
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="adaptee" element="org.apache.struts2.views.xslt.AbstractAdapterNode::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::getChildAfter(org.w3c.dom.Node):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::getChildBefore(org.w3c.dom.Node):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ActionInvocation" />
			<role name="Adapter" element="com.opensymphony.xwork2.DefaultActionProxy" />
			<role name="adaptee" element="com.opensymphony.xwork2.DefaultActionProxy::invocation:com.opensymphony.xwork2.ActionInvocation" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxy::getAction():java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxy::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ActionProxy" />
			<role name="Adapter" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="adaptee" element="com.opensymphony.xwork2.DefaultActionInvocation::proxy:com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invoke():java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invokeActionOnly():java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::init(com.opensymphony.xwork2.ActionProxy):void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.opensymphony.xwork2.ActionSupport" />
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="adaptee" element="com.opensymphony.xwork2.ActionSupport::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::getLocale():java.util.Locale" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.struts2.util.IteratorGenerator" />
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="adaptee" element="org.apache.struts2.util.IteratorGenerator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.util.IteratorGenerator::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.jasper.compiler.Node$CustomTag" />
			<role name="Adapter" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl" />
			<role name="adaptee" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::node:org.apache.struts2.jasper.compiler.Node$CustomTag" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::getParentContext():org.apache.struts2.jasper.compiler.tagplugin.TagPluginContext" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::isScriptless():boolean" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::getTemporaryVariableName():java.lang.String" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateDeclaration(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateJavaSource(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateAttribute(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::dontUseTagPlugin():void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateBody():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ognl.OgnlUtil" />
			<role name="Adapter" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider" />
			<role name="adaptee" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::ognlUtil:com.opensymphony.xwork2.ognl.OgnlUtil" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::setProperties(java.util.Map, java.lang.Object, java.util.Map):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::setProperties(java.util.Map, java.lang.Object, java.util.Map, boolean):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::setProperties(java.util.Map, java.lang.Object):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::copy(java.lang.Object, java.lang.Object, java.util.Map, java.util.Collection, java.util.Collection):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::getRealTarget(java.lang.String, java.util.Map, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::setProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::setProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map, boolean):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::getValue(java.lang.String, java.util.Map, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlReflectionProvider::getPropertyDescriptors(java.lang.Object):java.beans.PropertyDescriptor[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.inject.Container" />
			<role name="Adapter" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration" />
			<role name="adaptee" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration::reloadContainer(java.util.List):java.util.List" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ActionProxy" />
			<role name="Adapter" element="com.opensymphony.xwork2.ActionChainResult" />
			<role name="adaptee" element="com.opensymphony.xwork2.ActionChainResult::proxy:com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionChainResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware::addActionError(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware::addActionMessage(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware::addFieldError(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.osgi.FelixOsgiHost" />
			<role name="adaptee" element="org.apache.struts2.osgi.FelixOsgiHost::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::destroy():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::getMessage(java.lang.Object):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.views.velocity.VelocityManager" />
			<role name="Adapter" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator" />
			<role name="adaptee" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator::velocityManager:org.apache.struts2.views.velocity.VelocityManager" />
			<role name="Request()" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator::render(com.opensymphony.sitemesh.Content, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, com.opensymphony.xwork2.ActionContext):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.validator.ValidatorContext" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::validatorContext:com.opensymphony.xwork2.validator.ValidatorContext" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::getMessage(java.lang.Object):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.jasper.compiler.PageInfo" />
			<role name="Adapter" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl" />
			<role name="adaptee" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::pageInfo:org.apache.struts2.jasper.compiler.PageInfo" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateImport(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateDeclaration(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.jasper.compiler.Node$Nodes" />
			<role name="Adapter" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl" />
			<role name="adaptee" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::curNodes:org.apache.struts2.jasper.compiler.Node$Nodes" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateDeclaration(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateJavaSource(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TagPluginManager$TagPluginContextImpl::generateAttribute(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.spring.SpringObjectFactory" />
			<role name="Adapter" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor::factory:com.opensymphony.xwork2.spring.SpringObjectFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="adaptee" element="org.apache.struts2.osgi.OsgiConfigurationProvider::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.util.classloader.FileResourceStore" />
			<role name="adaptee" element="com.opensymphony.xwork2.util.classloader.FileResourceStore::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.FileResourceStore::read(java.lang.String):byte[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.util.classloader.JarResourceStore" />
			<role name="adaptee" element="com.opensymphony.xwork2.util.classloader.JarResourceStore::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.JarResourceStore::read(java.lang.String):byte[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder" />
			<role name="adaptee" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::buildActionConfigs():void" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::needsReload():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.codebehind.CodebehindUnknownHandler" />
			<role name="adaptee" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.convention.ConventionUnknownHandler" />
			<role name="adaptee" element="org.apache.struts2.convention.ConventionUnknownHandler::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.inject.Key" />
			<role name="Adapter" element="com.opensymphony.xwork2.inject.ExternalContext" />
			<role name="adaptee" element="com.opensymphony.xwork2.inject.ExternalContext::key:com.opensymphony.xwork2.inject.Key" />
			<role name="Request()" element="com.opensymphony.xwork2.inject.ExternalContext::getName():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::getMessage(java.lang.Object):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::validate(java.lang.Object, java.lang.String, com.opensymphony.xwork2.validator.ValidatorContext, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::validate(java.lang.Object, java.lang.String, com.opensymphony.xwork2.validator.ValidatorContext, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.ServletRedirectResult" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.ServletRedirectResult::actionMapper:org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ServletRedirectResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ActionContext" />
			<role name="Adapter" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="adaptee" element="com.opensymphony.xwork2.DefaultActionInvocation::invocationContext:com.opensymphony.xwork2.ActionContext" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::init(com.opensymphony.xwork2.ActionProxy):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.showcase.chat.DateConverter" />
			<role name="adaptee" element="org.apache.struts2.showcase.chat.DateConverter::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.DateConverter::convertFromString(java.util.Map, java.lang.String[], java.lang.Class):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::registerValidator(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest::parse(javax.servlet.http.HttpServletRequest, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.osgi.BundleAccessor" />
			<role name="Adapter" element="org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="adaptee" element="org.apache.struts2.osgi.OsgiConfigurationProvider::bundleAccessor:org.apache.struts2.osgi.BundleAccessor" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::init(com.opensymphony.xwork2.config.Configuration):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.config.impl.NamespaceMatcher" />
			<role name="Adapter" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration$RuntimeConfigurationImpl" />
			<role name="adaptee" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration$RuntimeConfigurationImpl::namespaceMatcher:com.opensymphony.xwork2.config.impl.NamespaceMatcher" />
			<role name="Request()" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration$RuntimeConfigurationImpl::getActionConfig(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.convention.DefaultResultMapBuilder" />
			<role name="adaptee" element="org.apache.struts2.convention.DefaultResultMapBuilder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.DefaultResultMapBuilder::build(java.lang.Class, org.apache.struts2.convention.annotation.Action, java.lang.String, com.opensymphony.xwork2.config.entities.PackageConfig):java.util.Map" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.osgi.DefaultBundleAccessor" />
			<role name="adaptee" element="org.apache.struts2.osgi.DefaultBundleAccessor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.DefaultBundleAccessor::getAllServiceReferences(java.lang.String):org.osgi.framework.ServiceReference[]" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper::getMapping(javax.servlet.http.HttpServletRequest, com.opensymphony.xwork2.config.ConfigurationManager):org.apache.struts2.dispatcher.mapper.ActionMapping" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper::getMappingFromActionName(java.lang.String):org.apache.struts2.dispatcher.mapper.ActionMapping" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper::getUriFromActionMapping(org.apache.struts2.dispatcher.mapper.ActionMapping):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.dispatcher.mapper.RestfulActionMapper" />
			<role name="adaptee" element="org.apache.struts2.dispatcher.mapper.RestfulActionMapper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.RestfulActionMapper::getMapping(javax.servlet.http.HttpServletRequest, com.opensymphony.xwork2.config.ConfigurationManager):org.apache.struts2.dispatcher.mapper.ActionMapping" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.inject.Container" />
			<role name="Adapter" element="com.opensymphony.xwork2.DefaultActionProxyFactory" />
			<role name="adaptee" element="com.opensymphony.xwork2.DefaultActionProxyFactory::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxyFactory::createActionProxy(java.lang.String, java.lang.String, java.lang.String, java.util.Map, boolean, boolean):com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxyFactory::createActionProxy(com.opensymphony.xwork2.ActionInvocation, java.lang.String, java.lang.String, java.lang.String, boolean, boolean):com.opensymphony.xwork2.ActionProxy" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="Adapter" element="org.apache.struts2.codebehind.CodebehindUnknownHandler" />
			<role name="adaptee" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="Adapter" element="org.apache.struts2.convention.ConventionUnknownHandler" />
			<role name="adaptee" element="org.apache.struts2.convention.ConventionUnknownHandler::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.osgi.OsgiHost" />
			<role name="Adapter" element="org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="adaptee" element="org.apache.struts2.osgi.OsgiConfigurationProvider::osgiHost:org.apache.struts2.osgi.OsgiHost" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::init(com.opensymphony.xwork2.config.Configuration):void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler" />
			<role name="adaptee" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::nullMethodResult(java.util.Map, java.lang.Object, java.lang.String, java.lang.Object[]):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::nullPropertyValue(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer" />
			<role name="adaptee" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getElementClass(java.lang.Class, java.lang.String, java.lang.Object):java.lang.Class" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.AliasInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.AliasInterceptor::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.AliasInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.inject.Container" />
			<role name="Adapter" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory" />
			<role name="adaptee" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory::createValueStack():com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory::createValueStack(com.opensymphony.xwork2.util.ValueStack):com.opensymphony.xwork2.util.ValueStack" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Adapter" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler" />
			<role name="adaptee" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::nullPropertyValue(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.util.IteratorGenerator$Converter" />
			<role name="Adapter" element="org.apache.struts2.util.IteratorGenerator" />
			<role name="adaptee" element="org.apache.struts2.util.IteratorGenerator::converter:org.apache.struts2.util.IteratorGenerator$Converter" />
			<role name="Request()" element="org.apache.struts2.util.IteratorGenerator::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Adapter" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="adaptee" element="com.opensymphony.xwork2.DefaultActionInvocation::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::init(com.opensymphony.xwork2.ActionProxy):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.convention.ConventionsService" />
			<role name="Adapter" element="org.apache.struts2.convention.ConventionUnknownHandler" />
			<role name="adaptee" element="org.apache.struts2.convention.ConventionUnknownHandler::conventionsService:org.apache.struts2.convention.ConventionsService" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration" />
			<role name="adaptee" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration::addPackageConfig(java.lang.String, com.opensymphony.xwork2.config.entities.PackageConfig):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.convention.ActionConfigBuilder" />
			<role name="Adapter" element="org.apache.struts2.convention.ClasspathPackageProvider" />
			<role name="adaptee" element="org.apache.struts2.convention.ClasspathPackageProvider::actionConfigBuilder:org.apache.struts2.convention.ActionConfigBuilder" />
			<role name="Request()" element="org.apache.struts2.convention.ClasspathPackageProvider::needsReload():boolean" />
			<role name="Request()" element="org.apache.struts2.convention.ClasspathPackageProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter" />
			<role name="Adapter" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer" />
			<role name="adaptee" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::xworkConverter:com.opensymphony.xwork2.conversion.impl.XWorkConverter" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getKeyClass(java.lang.Class, java.lang.String):java.lang.Class" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getElementClass(java.lang.Class, java.lang.String, java.lang.Object):java.lang.Class" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getKeyProperty(java.lang.Class, java.lang.String):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::shouldCreateIfNew(java.lang.Class, java.lang.String, java.lang.Object, java.lang.String, boolean):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="Adapter" element="org.apache.struts2.rest.ContentTypeInterceptor" />
			<role name="adaptee" element="org.apache.struts2.rest.ContentTypeInterceptor::selector:org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="Request()" element="org.apache.struts2.rest.ContentTypeInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="Adapter" element="org.apache.struts2.rest.RestWorkflowInterceptor" />
			<role name="adaptee" element="org.apache.struts2.rest.RestWorkflowInterceptor::manager:org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="Request()" element="org.apache.struts2.rest.RestWorkflowInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.components.ServletUrlRenderer" />
			<role name="adaptee" element="org.apache.struts2.components.ServletUrlRenderer::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.ServletUrlRenderer::renderFormUrl(org.apache.struts2.components.Form):void" />
			<role name="Request()" element="org.apache.struts2.components.ServletUrlRenderer::beforeRenderUrl(org.apache.struts2.components.UrlProvider):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.convention.SEOActionNameBuilder" />
			<role name="adaptee" element="org.apache.struts2.convention.SEOActionNameBuilder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.SEOActionNameBuilder::build(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.views.java.DefaultTagHandlerFactory" />
			<role name="adaptee" element="org.apache.struts2.views.java.DefaultTagHandlerFactory::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.java.DefaultTagHandlerFactory::create(org.apache.struts2.views.java.TagHandler):org.apache.struts2.views.java.TagHandler" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::validatorFactory:com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::getValidators(java.lang.Class, java.lang.String, java.lang.String):java.util.List" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::validatorFactory:com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::getValidators(java.lang.Class, java.lang.String, java.lang.String):java.util.List" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.convention.ConventionsService" />
			<role name="Adapter" element="org.apache.struts2.convention.DefaultResultMapBuilder" />
			<role name="adaptee" element="org.apache.struts2.convention.DefaultResultMapBuilder::conventionsService:org.apache.struts2.convention.ConventionsService" />
			<role name="Request()" element="org.apache.struts2.convention.DefaultResultMapBuilder::build(java.lang.Class, org.apache.struts2.convention.annotation.Action, java.lang.String, com.opensymphony.xwork2.config.entities.PackageConfig):java.util.Map" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Adapter" element="org.apache.struts2.components.ServletUrlRenderer" />
			<role name="adaptee" element="org.apache.struts2.components.ServletUrlRenderer::actionMapper:org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Request()" element="org.apache.struts2.components.ServletUrlRenderer::renderFormUrl(org.apache.struts2.components.Form):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator" />
			<role name="adaptee" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator::render(com.opensymphony.sitemesh.Content, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, com.opensymphony.xwork2.ActionContext):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator" />
			<role name="adaptee" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator::render(com.opensymphony.sitemesh.Content, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, com.opensymphony.xwork2.ActionContext):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.views.freemarker.FreemarkerManager" />
			<role name="Adapter" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator" />
			<role name="adaptee" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator::freemarkerManager:org.apache.struts2.views.freemarker.FreemarkerManager" />
			<role name="Request()" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator::render(com.opensymphony.sitemesh.Content, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, com.opensymphony.xwork2.ActionContext):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Adapter" element="org.apache.struts2.views.java.DefaultTheme" />
			<role name="adaptee" element="org.apache.struts2.views.java.DefaultTheme::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.java.DefaultTheme::renderTag(java.lang.String, org.apache.struts2.components.template.TemplateRenderingContext):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ModelDriven" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor$RefreshModelBeforeResult" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor$RefreshModelBeforeResult::action:com.opensymphony.xwork2.ModelDriven" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor$RefreshModelBeforeResult::beforeResult(com.opensymphony.xwork2.ActionInvocation, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.struts2.osgi.DelegatingObjectFactory" />
			<role name="Adaptee" element="org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="adaptee" element="org.apache.struts2.osgi.DelegatingObjectFactory::osgiConfigurationProvider:org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="Request()" element="org.apache.struts2.osgi.DelegatingObjectFactory::destroy():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ObjectFactory" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::objectFactory:com.opensymphony.xwork2.ObjectFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::getValidator(com.opensymphony.xwork2.validator.ValidatorConfig):com.opensymphony.xwork2.validator.Validator" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ObjectFactory" />
			<role name="Adapter" element="com.opensymphony.xwork2.validator.DefaultValidatorFileParser" />
			<role name="adaptee" element="com.opensymphony.xwork2.validator.DefaultValidatorFileParser::objectFactory:com.opensymphony.xwork2.ObjectFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultValidatorFileParser::parseValidatorDefinitions(java.util.Map, java.io.InputStream, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="Adapter" element="com.opensymphony.xwork2.ActionChainResult" />
			<role name="adaptee" element="com.opensymphony.xwork2.ActionChainResult::actionProxyFactory:com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionChainResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Adapter" element="com.opensymphony.xwork2.inject.ContainerImpl$FieldInjector" />
			<role name="Adaptee" element="com.opensymphony.xwork2.inject.InternalFactory" />
			<role name="adaptee" element="com.opensymphony.xwork2.inject.ContainerImpl$FieldInjector::factory:com.opensymphony.xwork2.inject.InternalFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.inject.ContainerImpl$FieldInjector::inject(com.opensymphony.xwork2.inject.InternalContext, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.inject.Container" />
			<role name="Adapter" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor" />
			<role name="adaptee" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Adapter" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor" />
			<role name="adaptee" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.struts2.osgi.OsgiHost" />
			<role name="Adapter" element="org.apache.struts2.osgi.DefaultBundleAccessor" />
			<role name="adaptee" element="org.apache.struts2.osgi.DefaultBundleAccessor::osgiHost:org.apache.struts2.osgi.OsgiHost" />
			<role name="Request()" element="org.apache.struts2.osgi.DefaultBundleAccessor::loadResourceFromAllBundles(java.lang.String):java.net.URL" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite">
		<instance>
			<role name="Component" element="org.apache.struts2.el.parser.Node" />
			<role name="Composite" element="org.apache.struts2.el.parser.SimpleNode" />
			<role name="Operation()" element="org.apache.struts2.el.parser.SimpleNode::accept(org.apache.struts2.el.parser.NodeVisitor):void" />
		</instance>
	</pattern>
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="com.opensymphony.xwork2.conversion.TypeConverter" />
			<role name="Decorator" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter" />
			<role name="component" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter::defaultTypeConverter:com.opensymphony.xwork2.conversion.TypeConverter" />
			<role name="Operation()" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter::convertValue(java.util.Map, java.lang.Object, java.lang.reflect.Member, java.lang.String, java.lang.Object, java.lang.Class):java.lang.Object" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.struts2.el.parser.Node" />
			<role name="Decorator" element="org.apache.struts2.el.parser.SimpleNode" />
			<role name="component" element="org.apache.struts2.el.parser.SimpleNode::children:org.apache.struts2.el.parser.Node[]" />
			<role name="component" element="org.apache.struts2.el.parser.SimpleNode::parent:org.apache.struts2.el.parser.Node" />
			<role name="Operation()" element="org.apache.struts2.el.parser.SimpleNode::accept(org.apache.struts2.el.parser.NodeVisitor):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.struts2.views.java.TagHandler" />
			<role name="Decorator" element="org.apache.struts2.views.java.simple.AbstractTagHandler" />
			<role name="component" element="org.apache.struts2.views.java.simple.AbstractTagHandler::nextTagHandler:org.apache.struts2.views.java.TagHandler" />
			<role name="Operation()" element="org.apache.struts2.views.java.simple.AbstractTagHandler::characters(java.lang.String, boolean):void" />
			<role name="Operation()" element="org.apache.struts2.views.java.simple.AbstractTagHandler::end(java.lang.String):void" />
			<role name="Operation()" element="org.apache.struts2.views.java.simple.AbstractTagHandler::start(java.lang.String, org.apache.struts2.views.java.Attributes):void" />
		</instance>
		<instance>
			<role name="Component" element="com.opensymphony.xwork2.inject.Container" />
			<role name="Decorator" element="org.apache.struts2.views.util.UrlHelperTest$StubContainer" />
			<role name="component" element="org.apache.struts2.views.util.UrlHelperTest$StubContainer::parent:com.opensymphony.xwork2.inject.Container" />
			<role name="Operation()" element="org.apache.struts2.views.util.UrlHelperTest$StubContainer::getInstanceNames(java.lang.Class):java.util.Set" />
			<role name="Operation()" element="org.apache.struts2.views.util.UrlHelperTest$StubContainer::inject(java.lang.Object):void" />
			<role name="Operation()" element="org.apache.struts2.views.util.UrlHelperTest$StubContainer::removeScopeStrategy():void" />
			<role name="Operation()" element="org.apache.struts2.views.util.UrlHelperTest$StubContainer::setScopeStrategy(com.opensymphony.xwork2.inject.Scope$Strategy):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.struts2.components.UrlRenderer" />
			<role name="Decorator" element="org.apache.struts2.components.PortletUrlRenderer" />
			<role name="component" element="org.apache.struts2.components.PortletUrlRenderer::servletRenderer:org.apache.struts2.components.UrlRenderer" />
			<role name="Operation()" element="org.apache.struts2.components.PortletUrlRenderer::setActionMapper(org.apache.struts2.dispatcher.mapper.ActionMapper):void" />
			<role name="Operation()" element="org.apache.struts2.components.PortletUrlRenderer::renderUrl(java.io.Writer, org.apache.struts2.components.UrlProvider):void" />
			<role name="Operation()" element="org.apache.struts2.components.PortletUrlRenderer::renderFormUrl(org.apache.struts2.components.Form):void" />
			<role name="Operation()" element="org.apache.struts2.components.PortletUrlRenderer::beforeRenderUrl(org.apache.struts2.components.UrlProvider):void" />
		</instance>
	</pattern>
	<pattern name="Observer">
		<instance>
			<role name="Observer" element="org.apache.struts2.jasper.compiler.Node" />
			<role name="Subject" element="org.apache.struts2.jasper.compiler.Node$Nodes" />
			<role name="Notify()" element="org.apache.struts2.jasper.compiler.Node$Nodes::visit(org.apache.struts2.jasper.compiler.Node$Visitor):void" />
		</instance>
		<instance>
			<role name="Observer" element="org.apache.struts2.el.parser.Node" />
			<role name="Subject" element="org.apache.struts2.el.parser.JJTELParserState" />
			<role name="Notify()" element="org.apache.struts2.el.parser.JJTELParserState::closeNodeScope(org.apache.struts2.el.parser.Node, int):void" />
			<role name="Notify()" element="org.apache.struts2.el.parser.JJTELParserState::closeNodeScope(org.apache.struts2.el.parser.Node, boolean):void" />
		</instance>
		<instance>
			<role name="Observer" element="org.apache.struts2.dispatcher.DispatcherListener" />
			<role name="Subject" element="org.apache.struts2.dispatcher.Dispatcher" />
			<role name="Notify()" element="org.apache.struts2.dispatcher.Dispatcher::cleanup():void" />
			<role name="Notify()" element="org.apache.struts2.dispatcher.Dispatcher::init():void" />
		</instance>
		<instance>
			<role name="Observer" element="com.opensymphony.xwork2.config.ContainerProvider" />
			<role name="Subject" element="com.opensymphony.xwork2.config.ConfigurationManager" />
			<role name="Notify()" element="com.opensymphony.xwork2.config.ConfigurationManager::conditionalReload():void" />
		</instance>
	</pattern>
	<pattern name="State">
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.TextProviderSupport" />
			<role name="State" element="com.opensymphony.xwork2.LocaleProvider" />
			<role name="state" element="com.opensymphony.xwork2.TextProviderSupport::localeProvider:com.opensymphony.xwork2.LocaleProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.TextProviderSupport::getLocale():java.util.Locale" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.s1.WrapperMessageResources" />
			<role name="State" element="com.opensymphony.xwork2.TextProvider" />
			<role name="state" element="org.apache.struts2.s1.WrapperMessageResources::textProvider:com.opensymphony.xwork2.TextProvider" />
			<role name="Request()" element="org.apache.struts2.s1.WrapperMessageResources::getMessage(java.util.Locale, java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.ConversionErrorFieldValidatorTest" />
			<role name="State" element="com.opensymphony.xwork2.ValidationAware" />
			<role name="state" element="com.opensymphony.xwork2.validator.ConversionErrorFieldValidatorTest::validationAware:com.opensymphony.xwork2.ValidationAware" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.ConversionErrorFieldValidatorTest::setUp():void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.ConversionErrorFieldValidatorTest::testConversionErrorMessageUsesProvidedMessage():void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.ConversionErrorFieldValidatorTest::testConversionErrorsAreAddedToFieldErrors():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ChainingInterceptorTest" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ChainingInterceptorTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptorTest::testActionErrorsCanBeAddedAfterChain():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptorTest::testPropertiesChained():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptorTest::testExcludesPropertiesChained():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptorTest::testTwoExcludesPropertiesChained():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptorTest::testNullCompoundRootElementAllowsProcessToContinue():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ConversionErrorInterceptorTest" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ConversionErrorInterceptorTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ConversionErrorInterceptorTest::testFieldErrorAdded():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ConversionErrorInterceptorTest::testFieldErrorWithMapKeyAdded():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ConversionErrorInterceptorTest::testWithPreResultListener():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ConversionErrorInterceptorTest::setUp():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptorTest" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptorTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptorTest::testThrownExceptionMatching():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptorTest::testThrownExceptionMatching2():void" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ExceptionMappingInterceptorTest::testNoThrownException():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Context" element="org.apache.struts2.views.freemarker.ScopesHashModel" />
			<role name="state" element="org.apache.struts2.views.freemarker.ScopesHashModel::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.ScopesHashModel::get(java.lang.String):freemarker.template.TemplateModel" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Context" element="org.apache.struts2.views.jasperreports.ValueStackDataSource" />
			<role name="state" element="org.apache.struts2.views.jasperreports.ValueStackDataSource::valueStack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.ValueStackDataSource::getFieldValue(net.sf.jasperreports.engine.JRField):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.ValueStackDataSource::next():boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Context" element="org.apache.struts2.views.jasperreports.ValueStackShadowMap" />
			<role name="state" element="org.apache.struts2.views.jasperreports.ValueStackShadowMap::valueStack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.ValueStackShadowMap::containsKey(java.lang.Object):boolean" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.ValueStackShadowMap::get(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Context" element="org.apache.struts2.views.velocity.StrutsVelocityContext" />
			<role name="state" element="org.apache.struts2.views.velocity.StrutsVelocityContext::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.velocity.StrutsVelocityContext::internalContainsKey(java.lang.Object):boolean" />
			<role name="Request()" element="org.apache.struts2.views.velocity.StrutsVelocityContext::internalGet(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.spring.ClassReloadingXMLWebApplicationContext" />
			<role name="state" element="org.apache.struts2.spring.ClassReloadingXMLWebApplicationContext::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.spring.ClassReloadingXMLWebApplicationContext::setupReloading(java.lang.String[], java.lang.String, javax.servlet.ServletContext, boolean):void" />
			<role name="Request()" element="org.apache.struts2.spring.ClassReloadingXMLWebApplicationContext::reload(java.io.File):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.JSPLoader" />
			<role name="state" element="org.apache.struts2.JSPLoader::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.JSPLoader::load(java.lang.String):javax.servlet.Servlet" />
			<role name="Request()" element="org.apache.struts2.JSPLoader::compileJava(java.lang.String, java.lang.String, java.util.Set):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.config.providers.InterceptorBuilder" />
			<role name="state" element="com.opensymphony.xwork2.config.providers.InterceptorBuilder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.InterceptorBuilder::constructInterceptorReference(com.opensymphony.xwork2.config.entities.InterceptorLocator, java.lang.String, java.util.Map, com.opensymphony.xwork2.util.location.Location, com.opensymphony.xwork2.ObjectFactory):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.InterceptorBuilder::constructParameterizedInterceptorReferences(com.opensymphony.xwork2.config.entities.InterceptorLocator, com.opensymphony.xwork2.config.entities.InterceptorStackConfig, java.util.Map, com.opensymphony.xwork2.ObjectFactory):java.util.List" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.PrefixMethodInvocationUtil" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.PrefixMethodInvocationUtil::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.PrefixMethodInvocationUtil::getPrefixedMethod(java.lang.String[], java.lang.String, java.lang.Object):java.lang.reflect.Method" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.ognl.OgnlUtil" />
			<role name="state" element="com.opensymphony.xwork2.ognl.OgnlUtil::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlUtil::copy(java.lang.Object, java.lang.Object, java.util.Map, java.util.Collection, java.util.Collection):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlUtil::internalSetProperty(java.lang.String, java.lang.Object, java.lang.Object, java.util.Map, boolean):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.ognl.accessor.CompoundRootAccessor" />
			<role name="state" element="com.opensymphony.xwork2.ognl.accessor.CompoundRootAccessor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.CompoundRootAccessor::setProperty(java.util.Map, java.lang.Object, java.lang.Object, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.ognl.accessor.XWorkCollectionPropertyAccessor" />
			<role name="state" element="com.opensymphony.xwork2.ognl.accessor.XWorkCollectionPropertyAccessor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkCollectionPropertyAccessor::getProperty(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkCollectionPropertyAccessor::getSetMap(java.util.Map, java.util.Collection, java.lang.String, java.lang.Class):java.util.Map" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor" />
			<role name="state" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor::getProperty(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor::setProperty(java.util.Map, java.lang.Object, java.lang.Object, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor" />
			<role name="state" element="com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor::callMethod(java.util.Map, java.lang.Object, java.lang.String, java.lang.Object[]):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor::callMethodWithDebugInfo(java.util.Map, java.lang.Object, java.lang.String, java.lang.Object[]):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkMethodAccessor::callStaticMethodWithDebugInfo(java.util.Map, java.lang.Class, java.lang.String, java.lang.Object[]):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.DomHelper" />
			<role name="state" element="com.opensymphony.xwork2.util.DomHelper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.DomHelper::parse(org.xml.sax.InputSource, java.util.Map):org.w3c.dom.Document" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.FileManager" />
			<role name="state" element="com.opensymphony.xwork2.util.FileManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.FileManager::loadFile(java.net.URL, boolean):java.io.InputStream" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.LocalizedTextUtil" />
			<role name="state" element="com.opensymphony.xwork2.util.LocalizedTextUtil::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.LocalizedTextUtil::addDefaultResourceBundle(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.util.LocalizedTextUtil::findText(java.lang.Class, java.lang.String, java.util.Locale, java.lang.String, java.lang.Object[], com.opensymphony.xwork2.util.ValueStack):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.util.LocalizedTextUtil::findText(java.util.ResourceBundle, java.lang.String, java.util.Locale, java.lang.String, java.lang.Object[], com.opensymphony.xwork2.util.ValueStack):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.util.LocalizedTextUtil::reloadBundles():void" />
			<role name="Request()" element="com.opensymphony.xwork2.util.LocalizedTextUtil::clearTomcatCache():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.ResolverUtil" />
			<role name="state" element="com.opensymphony.xwork2.util.ResolverUtil::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.ResolverUtil::findInPackage(com.opensymphony.xwork2.util.ResolverUtil$Test, java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.util.ResolverUtil::loadImplementationsInJar(com.opensymphony.xwork2.util.ResolverUtil$Test, java.lang.String, java.io.File):void" />
			<role name="Request()" element="com.opensymphony.xwork2.util.ResolverUtil::addIfMatching(com.opensymphony.xwork2.util.ResolverUtil$Test, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.XWorkList" />
			<role name="state" element="com.opensymphony.xwork2.util.XWorkList::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.XWorkList::convert(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.classloader.ReloadingClassLoader" />
			<role name="state" element="com.opensymphony.xwork2.util.classloader.ReloadingClassLoader::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.ReloadingClassLoader::addResourceStore(com.opensymphony.xwork2.util.classloader.ResourceStore):boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.ReloadingClassLoader::reload():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.finder.ClassFinder" />
			<role name="state" element="com.opensymphony.xwork2.util.finder.ClassFinder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::findAnnotatedClasses(java.lang.Class):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::findAnnotatedMethods(java.lang.Class):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::findAnnotatedConstructors(java.lang.Class):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::findAnnotatedFields(java.lang.Class):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::findClassesInPackage(java.lang.String, boolean):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::findClasses(com.opensymphony.xwork2.util.finder.Test):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::findClasses():java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::getURLs(com.opensymphony.xwork2.util.finder.ClassLoaderInterface, java.lang.String[]):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::jar(java.net.URL):java.util.List" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.finder.UrlSet" />
			<role name="state" element="com.opensymphony.xwork2.util.finder.UrlSet::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.UrlSet::getUrls(com.opensymphony.xwork2.util.finder.ClassLoaderInterface):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.UrlSet::getUrls(com.opensymphony.xwork2.util.finder.ClassLoaderInterface, java.util.Set):java.util.List" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.util.profiling.UtilTimerStack" />
			<role name="state" element="com.opensymphony.xwork2.util.profiling.UtilTimerStack::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.profiling.UtilTimerStack::pop(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.util.profiling.UtilTimerStack::printTimes(com.opensymphony.xwork2.util.profiling.ProfilingTimerBean):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="mailreader2.ApplicationListener" />
			<role name="state" element="mailreader2.ApplicationListener::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="mailreader2.ApplicationListener::contextDestroyed(javax.servlet.ServletContextEvent):void" />
			<role name="Request()" element="mailreader2.ApplicationListener::contextInitialized(javax.servlet.ServletContextEvent):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.dispatcher.ActionContextCleanUp" />
			<role name="state" element="org.apache.struts2.dispatcher.ActionContextCleanUp::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ActionContextCleanUp::cleanUp(javax.servlet.ServletRequest):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.dispatcher.ng.PrepareOperations" />
			<role name="state" element="org.apache.struts2.dispatcher.ng.PrepareOperations::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ng.PrepareOperations::cleanupRequest(javax.servlet.http.HttpServletRequest):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.json.JSONPopulator" />
			<role name="state" element="org.apache.struts2.json.JSONPopulator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.json.JSONPopulator::convertPrimitive(java.lang.Class, java.lang.Object, java.lang.reflect.Method):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.json.JSONUtil" />
			<role name="state" element="org.apache.struts2.json.JSONUtil::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.json.JSONUtil::writeJSONToResponse(org.apache.struts2.json.SerializationParams):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.json.JSONWriter" />
			<role name="state" element="org.apache.struts2.json.JSONWriter::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.json.JSONWriter::value(java.lang.Object, java.lang.reflect.Method):void" />
			<role name="Request()" element="org.apache.struts2.json.JSONWriter::bean(java.lang.Object):void" />
			<role name="Request()" element="org.apache.struts2.json.JSONWriter::shouldExcludeProperty(java.lang.String):boolean" />
			<role name="Request()" element="org.apache.struts2.json.JSONWriter::map(java.util.Map, java.lang.reflect.Method):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.osgi.OsgiUtil" />
			<role name="state" element="org.apache.struts2.osgi.OsgiUtil::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiUtil::getBean(java.lang.Object, java.lang.String):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiUtil::containsBean(java.lang.Object, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.plexus.PlexusFilter" />
			<role name="state" element="org.apache.struts2.plexus.PlexusFilter::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.plexus.PlexusFilter::doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.plexus.PlexusLifecycleListener" />
			<role name="state" element="org.apache.struts2.plexus.PlexusLifecycleListener::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.plexus.PlexusLifecycleListener::contextInitialized(javax.servlet.ServletContextEvent):void" />
			<role name="Request()" element="org.apache.struts2.plexus.PlexusLifecycleListener::contextDestroyed(javax.servlet.ServletContextEvent):void" />
			<role name="Request()" element="org.apache.struts2.plexus.PlexusLifecycleListener::sessionCreated(javax.servlet.http.HttpSessionEvent):void" />
			<role name="Request()" element="org.apache.struts2.plexus.PlexusLifecycleListener::sessionDestroyed(javax.servlet.http.HttpSessionEvent):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.plexus.PlexusUtils" />
			<role name="state" element="org.apache.struts2.plexus.PlexusUtils::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.plexus.PlexusUtils::configure(org.codehaus.plexus.PlexusContainer, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.portlet.context.ServletContextHolderListener" />
			<role name="state" element="org.apache.struts2.portlet.context.ServletContextHolderListener::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.context.ServletContextHolderListener::contextInitialized(javax.servlet.ServletContextEvent):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.portlet.util.PortletUrlHelper" />
			<role name="state" element="org.apache.struts2.portlet.util.PortletUrlHelper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.util.PortletUrlHelper::buildUrl(java.lang.String, java.lang.String, java.lang.String, java.util.Map, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, boolean):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.portlet.util.PortletUrlHelper::prependNamespace(java.lang.String, java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.showcase.chat.ChatSessionListener" />
			<role name="state" element="org.apache.struts2.showcase.chat.ChatSessionListener::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.ChatSessionListener::sessionDestroyed(javax.servlet.http.HttpSessionEvent):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.sitegraph.SiteGraph" />
			<role name="state" element="org.apache.struts2.sitegraph.SiteGraph::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.sitegraph.SiteGraph::main(java.lang.String[]):void" />
			<role name="Request()" element="org.apache.struts2.sitegraph.SiteGraph::render():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.sitegraph.StrutsConfigRetriever" />
			<role name="state" element="org.apache.struts2.sitegraph.StrutsConfigRetriever::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.sitegraph.StrutsConfigRetriever::initXWork():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.sitemesh.FreemarkerDecoratorServlet" />
			<role name="state" element="org.apache.struts2.sitemesh.FreemarkerDecoratorServlet::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.sitemesh.FreemarkerDecoratorServlet::init():void" />
			<role name="Request()" element="org.apache.struts2.sitemesh.FreemarkerDecoratorServlet::process(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.tiles.StrutsTilesListener" />
			<role name="state" element="org.apache.struts2.tiles.StrutsTilesListener::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.tiles.StrutsTilesListener::createContainer(javax.servlet.ServletContext):org.apache.tiles.TilesContainer" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.tiles.StrutsTilesRequestContext" />
			<role name="state" element="org.apache.struts2.tiles.StrutsTilesRequestContext::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.tiles.StrutsTilesRequestContext::include(java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.util.TextProviderHelper" />
			<role name="state" element="org.apache.struts2.util.TextProviderHelper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.util.TextProviderHelper::getText(java.lang.String, java.lang.String, java.util.List, com.opensymphony.xwork2.util.ValueStack, boolean):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.util.TokenHelper" />
			<role name="state" element="org.apache.struts2.util.TokenHelper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.util.TokenHelper::setToken(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.util.TokenHelper::getToken(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.util.TokenHelper::getTokenName():java.lang.String" />
			<role name="Request()" element="org.apache.struts2.util.TokenHelper::validToken():boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.validators.DWRValidator" />
			<role name="state" element="org.apache.struts2.validators.DWRValidator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.validators.DWRValidator::doPost(java.lang.String, java.lang.String, java.util.Map):com.opensymphony.xwork2.ValidationAwareSupport" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.jasperreports.ValueStackDataSource" />
			<role name="state" element="org.apache.struts2.views.jasperreports.ValueStackDataSource::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.ValueStackDataSource::getFieldValue(net.sf.jasperreports.engine.JRField):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.ValueStackDataSource::next():boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.util.UrlHelper" />
			<role name="state" element="org.apache.struts2.views.util.UrlHelper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.util.UrlHelper::translateAndEncode(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.views.util.UrlHelper::translateAndDecode(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.velocity.VelocityManager" />
			<role name="state" element="org.apache.struts2.views.velocity.VelocityManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.velocity.VelocityManager::createContext(com.opensymphony.xwork2.util.ValueStack, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):org.apache.velocity.context.Context" />
			<role name="Request()" element="org.apache.struts2.views.velocity.VelocityManager::prepareChainedContexts(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.util.Map):org.apache.velocity.VelocityContext[]" />
			<role name="Request()" element="org.apache.struts2.views.velocity.VelocityManager::loadConfiguration(javax.servlet.ServletContext):java.util.Properties" />
			<role name="Request()" element="org.apache.struts2.views.velocity.VelocityManager::newVelocityEngine(javax.servlet.ServletContext):org.apache.velocity.app.VelocityEngine" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.xslt.ServletURIResolver" />
			<role name="state" element="org.apache.struts2.views.xslt.ServletURIResolver::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.ServletURIResolver::resolve(java.lang.String, java.lang.String):javax.xml.transform.Source" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.xslt.SimpleNodeList" />
			<role name="state" element="org.apache.struts2.views.xslt.SimpleNodeList::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.SimpleNodeList::getLength():int" />
			<role name="Request()" element="org.apache.struts2.views.xslt.SimpleNodeList::item(int):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.AliasInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.AliasInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.AliasInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.I18nInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.I18nInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.I18nInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.I18nInterceptor::findLocaleParameter(java.util.Map, java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.LoggingInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.LoggingInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.LoggingInterceptor::logMessage(com.opensymphony.xwork2.ActionInvocation, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ParameterFilterInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ParameterFilterInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ParameterFilterInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ParameterRemoverInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ParameterRemoverInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ParameterRemoverInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor::setParameters(java.lang.Object, com.opensymphony.xwork2.util.ValueStack, java.util.Map):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.PrepareInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.PrepareInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.PrepareInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.TimerInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.TimerInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.TimerInterceptor::shouldLog():boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.spring.interceptor.ActionAutowiringInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.validator.ValidationInterceptor" />
			<role name="state" element="com.opensymphony.xwork2.validator.ValidationInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.ValidationInterceptor::doBeforeInvocation(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.CheckboxInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.CheckboxInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.CheckboxInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.ClearSessionInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.ClearSessionInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.ClearSessionInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.CookieInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.CookieInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.CookieInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.interceptor.CookieInterceptor::populateCookieValueIntoStack(java.lang.String, java.lang.String, java.util.Map, com.opensymphony.xwork2.util.ValueStack):void" />
			<role name="Request()" element="org.apache.struts2.interceptor.CookieInterceptor::injectIntoCookiesAwareAction(java.lang.Object, java.util.Map):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.CreateSessionInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.CreateSessionInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.CreateSessionInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::performInitialDelay(org.apache.struts2.interceptor.BackgroundProcess):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.FileUploadInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.FileUploadInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.FileUploadInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.interceptor.FileUploadInterceptor::acceptFile(java.lang.Object, java.io.File, java.lang.String, java.lang.String, java.lang.String, com.opensymphony.xwork2.ValidationAware, java.util.Locale):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.MessageStoreInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.MessageStoreInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.MessageStoreInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.interceptor.MessageStoreInterceptor::before(com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.interceptor.MessageStoreInterceptor::after(com.opensymphony.xwork2.ActionInvocation, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.ScopeInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.ScopeInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.ScopeInterceptor::before(com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.interceptor.ScopeInterceptor::beforeResult(com.opensymphony.xwork2.ActionInvocation, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.debugging.DebuggingInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.debugging.DebuggingInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.debugging.DebuggingInterceptor::serializeIt(java.lang.Object, java.lang.String, org.apache.struts2.interceptor.debugging.PrettyPrintWriter, java.util.List):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.interceptor.validation.JSONValidationInterceptor" />
			<role name="state" element="org.apache.struts2.interceptor.validation.JSONValidationInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.interceptor.validation.JSONValidationInterceptor::setupEncoding(javax.servlet.http.HttpServletResponse, javax.servlet.http.HttpServletRequest):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.json.JSONInterceptor" />
			<role name="state" element="org.apache.struts2.json.JSONInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.json.JSONInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.osgi.interceptor.OsgiInterceptor" />
			<role name="state" element="org.apache.struts2.osgi.interceptor.OsgiInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.interceptor.OsgiInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor" />
			<role name="state" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::performProgrammaticValidation(com.opensymphony.xwork2.ActionInvocation, java.lang.Object):void" />
			<role name="Request()" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::performOValValidation(java.lang.Object, com.opensymphony.xwork2.util.ValueStack, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::addValidationErrors(net.sf.oval.ConstraintViolation[], java.lang.Object, com.opensymphony.xwork2.util.ValueStack, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.portlet.interceptor.PortletAwareInterceptor" />
			<role name="state" element="org.apache.struts2.portlet.interceptor.PortletAwareInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.interceptor.PortletAwareInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.portlet.interceptor.PortletStateInterceptor" />
			<role name="state" element="org.apache.struts2.portlet.interceptor.PortletStateInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.interceptor.PortletStateInterceptor::restoreStack(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.rest.RestWorkflowInterceptor" />
			<role name="state" element="org.apache.struts2.rest.RestWorkflowInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.rest.RestWorkflowInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.s1.ActionFormValidationInterceptor" />
			<role name="state" element="org.apache.struts2.s1.ActionFormValidationInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.s1.ActionFormValidationInterceptor::loadResources(javax.servlet.ServletContext):org.apache.commons.validator.ValidatorResources" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.showcase.chat.ChatAuthenticationInterceptor" />
			<role name="state" element="org.apache.struts2.showcase.chat.ChatAuthenticationInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.ChatAuthenticationInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.showcase.chat.ChatInterceptor" />
			<role name="state" element="org.apache.struts2.showcase.chat.ChatInterceptor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.ChatInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.ChartResultTest" />
			<role name="State" element="com.opensymphony.xwork2.ActionInvocation" />
			<role name="state" element="org.apache.struts2.dispatcher.ChartResultTest::actionInvocation:com.opensymphony.xwork2.ActionInvocation" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ChartResultTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptorTest" />
			<role name="State" element="com.opensymphony.xwork2.ActionProxy" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptorTest::proxy:com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptorTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ValidationInterceptorPrefixMethodInvocationTest" />
			<role name="State" element="com.opensymphony.xwork2.ActionProxy" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ValidationInterceptorPrefixMethodInvocationTest::proxy:com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ValidationInterceptorPrefixMethodInvocationTest::setUp():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.ActionInvocation" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptorTest" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptorTest::invocation:com.opensymphony.xwork2.ActionInvocation" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.DefaultWorkflowInterceptorTest::setUp():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.ActionInvocation" />
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ValidationInterceptorPrefixMethodInvocationTest" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ValidationInterceptorPrefixMethodInvocationTest::invocation:com.opensymphony.xwork2.ActionInvocation" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ValidationInterceptorPrefixMethodInvocationTest::setUp():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.ActionEventListener" />
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionInvocation::actionEventListener:com.opensymphony.xwork2.ActionEventListener" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::createAction(java.util.Map):void" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invokeAction(java.lang.Object, com.opensymphony.xwork2.config.entities.ActionConfig):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.PortletUrlRendererTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.components.PortletUrlRendererTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.components.PortletUrlRendererTest::testShouldEvaluateActionAsOGNLExpression():void" />
			<role name="Request()" element="org.apache.struts2.components.PortletUrlRendererTest::testShouldEvaluateAnchorAsOGNLExpression():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.PlainTextResultTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.dispatcher.PlainTextResultTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.dispatcher.PlainTextResultTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.StreamResultTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.dispatcher.StreamResultTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.dispatcher.StreamResultTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.interceptor.StrutsConversionErrorInterceptorTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.interceptor.StrutsConversionErrorInterceptorTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.interceptor.StrutsConversionErrorInterceptorTest::testEmptyValuesDoNotSetFieldErrors():void" />
			<role name="Request()" element="org.apache.struts2.interceptor.StrutsConversionErrorInterceptorTest::testFieldErrorAdded():void" />
			<role name="Request()" element="org.apache.struts2.interceptor.StrutsConversionErrorInterceptorTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.json.JSONResultTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.json.JSONResultTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.json.JSONResultTest::executeTest2Action(org.apache.struts2.json.JSONResult):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.util.InvocationSessionStoreTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.util.InvocationSessionStoreTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.util.InvocationSessionStoreTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.util.StrutsUtilTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.util.StrutsUtilTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtilTest::testIsTrueMethod():void" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtilTest::testFindStringMethod():void" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtilTest::testFindValueMethod():void" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtilTest::testMakeSelectListMethod():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.freemarker.FreeMarkerResultTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.views.freemarker.FreeMarkerResultTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreeMarkerResultTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.jsp.ElseIfTagTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.views.jsp.ElseIfTagTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.jsp.ElseIfTagTest::testIfIsFalseElseIfIsTrue():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.ElseIfTagTest::testIfIsFalseElseIfIsFalse():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.ElseIfTagTest::testIfIsTrueElseIfIsTrue():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.ElseIfTagTest::testIfIsTrueElseIfIsFalse():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.jsp.ElseTagTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.views.jsp.ElseTagTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.jsp.ElseTagTest::testTestFalse():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.ElseTagTest::testTestTrue():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.jsp.I18nTagTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.views.jsp.I18nTagTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.jsp.I18nTagTest::testUnexpectedPop():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.jsp.IfTagTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.views.jsp.IfTagTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.jsp.IfTagTest::testNonBooleanTest():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.IfTagTest::testTestError():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.IfTagTest::testTestFalse():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.IfTagTest::testTestTrue():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.jsp.PropertyTagTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.views.jsp.PropertyTagTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testDefaultValue():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testNull():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testSimple():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testTopOfStack():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testWithAltSyntax1():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testEscapeJavaScript():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testEscapeXml():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testEscapeCsv():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testWithAltSyntax2():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testWithoutAltSyntax1():void" />
			<role name="Request()" element="org.apache.struts2.views.jsp.PropertyTagTest::testWithoutAltSyntax2():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.xslt.XSLTResultTest" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.views.xslt.XSLTResultTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.views.xslt.XSLTResultTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.template.TemplateEngineManager" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="org.apache.struts2.components.template.TemplateEngineManager::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="org.apache.struts2.components.template.TemplateEngineManager::setContainer(com.opensymphony.xwork2.inject.Container):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.jasper.Options" />
			<role name="Context" element="org.apache.struts2.jasper.JspCompilationContext" />
			<role name="state" element="org.apache.struts2.jasper.JspCompilationContext::options:org.apache.struts2.jasper.Options" />
			<role name="Request()" element="org.apache.struts2.jasper.JspCompilationContext::createOutputDir():void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.jasper.Options" />
			<role name="Context" element="org.apache.struts2.jasper.servlet.JspServletWrapper" />
			<role name="state" element="org.apache.struts2.jasper.servlet.JspServletWrapper::options:org.apache.struts2.jasper.Options" />
			<role name="Request()" element="org.apache.struts2.jasper.servlet.JspServletWrapper::loadTagFile():java.lang.Class" />
			<role name="Request()" element="org.apache.struts2.jasper.servlet.JspServletWrapper::service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, boolean):void" />
			<role name="Request()" element="org.apache.struts2.jasper.servlet.JspServletWrapper::handleJspException(java.lang.Exception):org.apache.struts2.jasper.JasperException" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.jasper.Options" />
			<role name="Context" element="org.apache.struts2.jasper.servlet.JspServlet" />
			<role name="state" element="org.apache.struts2.jasper.servlet.JspServlet::options:org.apache.struts2.jasper.Options" />
			<role name="Request()" element="org.apache.struts2.jasper.servlet.JspServlet::init(javax.servlet.ServletConfig):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.jasper.Options" />
			<role name="Context" element="org.apache.struts2.jasper.compiler.JspRuntimeContext" />
			<role name="state" element="org.apache.struts2.jasper.compiler.JspRuntimeContext::options:org.apache.struts2.jasper.Options" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.JspRuntimeContext::checkCompile():void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.JspRuntimeContext::initClassPath():void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.JspRuntimeContext::initSecurity():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ognl.OgnlTypeConverterWrapper" />
			<role name="State" element="com.opensymphony.xwork2.conversion.TypeConverter" />
			<role name="state" element="com.opensymphony.xwork2.ognl.OgnlTypeConverterWrapper::typeConverter:com.opensymphony.xwork2.conversion.TypeConverter" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlTypeConverterWrapper::convertValue(java.util.Map, java.lang.Object, java.lang.reflect.Member, java.lang.String, java.lang.Object, java.lang.Class):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.Anchor" />
			<role name="State" element="org.apache.struts2.components.UrlProvider" />
			<role name="state" element="org.apache.struts2.components.Anchor::urlProvider:org.apache.struts2.components.UrlProvider" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setUrlIncludeParams(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setUrlRenderer(org.apache.struts2.components.UrlRenderer):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setExtraParameterProvider(org.apache.struts2.components.ExtraParameterProvider):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setIncludeParams(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setScheme(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setValue(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setAction(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setNamespace(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setMethod(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setEncode(boolean):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setIncludeContext(boolean):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setPortletMode(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setWindowState(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setPortletUrlType(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setAnchor(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setEscapeAmp(boolean):void" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::setForceAddSchemeHostAndPort(boolean):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.URL" />
			<role name="State" element="org.apache.struts2.components.UrlProvider" />
			<role name="state" element="org.apache.struts2.components.URL::urlProvider:org.apache.struts2.components.UrlProvider" />
			<role name="Request()" element="org.apache.struts2.components.URL::setUrlIncludeParams(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setUrlRenderer(org.apache.struts2.components.UrlRenderer):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setExtraParameterProvider(org.apache.struts2.components.ExtraParameterProvider):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setIncludeParams(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setScheme(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setValue(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setAction(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setNamespace(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setMethod(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setEncode(boolean):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setIncludeContext(boolean):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setPortletMode(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setWindowState(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setPortletUrlType(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setAnchor(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setEscapeAmp(boolean):void" />
			<role name="Request()" element="org.apache.struts2.components.URL::setForceAddSchemeHostAndPort(boolean):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="Context" element="org.apache.struts2.components.Component" />
			<role name="state" element="org.apache.struts2.components.Component::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.components.Component::getComponentStack():java.util.Stack" />
			<role name="Request()" element="org.apache.struts2.components.Component::findValue(java.lang.String, java.lang.Class):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.components.Component::copyParams(java.util.Map):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager$InternalValidatorContextWrapper" />
			<role name="State" element="com.opensymphony.xwork2.validator.ValidatorContext" />
			<role name="state" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager$InternalValidatorContextWrapper::validatorContext:com.opensymphony.xwork2.validator.ValidatorContext" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager$InternalValidatorContextWrapper::getFullFieldName(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager$InternalValidatorContextWrapper" />
			<role name="State" element="com.opensymphony.xwork2.validator.ValidatorContext" />
			<role name="state" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager$InternalValidatorContextWrapper::validatorContext:com.opensymphony.xwork2.validator.ValidatorContext" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager$InternalValidatorContextWrapper::getFullFieldName(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.ActionInvocation" />
			<role name="Context" element="org.apache.struts2.views.freemarker.FreemarkerResult" />
			<role name="state" element="org.apache.struts2.views.freemarker.FreemarkerResult::invocation:com.opensymphony.xwork2.ActionInvocation" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreemarkerResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreemarkerResult::createModel():freemarker.template.TemplateModel" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreemarkerResult::deduceLocale():java.util.Locale" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.ActionInvocation" />
			<role name="Context" element="org.apache.struts2.views.freemarker.PortletFreemarkerResult" />
			<role name="state" element="org.apache.struts2.views.freemarker.PortletFreemarkerResult::invocation:com.opensymphony.xwork2.ActionInvocation" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.PortletFreemarkerResult::createModel():freemarker.template.TemplateModel" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="State" element="com.opensymphony.xwork2.Result" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionInvocation::result:com.opensymphony.xwork2.Result" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::executeResult():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ActionChainResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.ActionChainResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionChainResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.TestResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.TestResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.TestResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.ChartResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.ChartResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ChartResult::getIntValueFromString(java.lang.String):java.lang.Integer" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.PlainTextResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.PlainTextResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.PlainTextResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.ServletDispatcherResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.ServletDispatcherResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ServletDispatcherResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.ServletRedirectResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.ServletRedirectResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ServletRedirectResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ServletRedirectResult::handle(com.opensymphony.xwork2.util.reflection.ReflectionException):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.StreamResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.StreamResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.StreamResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.VelocityResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.VelocityResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.VelocityResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.json.JSONResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.json.JSONResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.json.JSONResult::setIncludeProperties(java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.json.JSONResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.json.JSONResult::writeSMD(com.opensymphony.xwork2.ActionInvocation):org.apache.struts2.json.smd.SMD" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.portlet.result.PortletActionRedirectResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.portlet.result.PortletActionRedirectResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.result.PortletActionRedirectResult::handle(com.opensymphony.xwork2.util.reflection.ReflectionException):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.portlet.result.PortletResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.portlet.result.PortletResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.result.PortletResult::executeRegularServletResult(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.portlet.result.PortletResult::executeActionResult(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.portlet.result.PortletResult::executeRenderResult(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.portlet.result.PortletVelocityResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.portlet.result.PortletVelocityResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.result.PortletVelocityResult::executeRenderResult(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.jasperreports.JasperReportsResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.views.jasperreports.JasperReportsResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.JasperReportsResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.JasperReportsResult::writeReport(javax.servlet.http.HttpServletResponse, byte[]):void" />
			<role name="Request()" element="org.apache.struts2.views.jasperreports.JasperReportsResult::initializeProperties(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.xslt.XSLTResult" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.views.xslt.XSLTResult::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.XSLTResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
			<role name="Request()" element="org.apache.struts2.views.xslt.XSLTResult::getTemplates(java.lang.String):javax.xml.transform.Templates" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.finder.ClassFinder$Info" />
			<role name="Context" element="com.opensymphony.xwork2.util.finder.ClassFinder$InfoBuildingVisitor" />
			<role name="state" element="com.opensymphony.xwork2.util.finder.ClassFinder$InfoBuildingVisitor::info:com.opensymphony.xwork2.util.finder.ClassFinder$Info" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder$InfoBuildingVisitor::visitAnnotation(java.lang.String, boolean):org.objectweb.asm.AnnotationVisitor" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.dispatcher.FilterDispatcher" />
			<role name="state" element="org.apache.struts2.dispatcher.FilterDispatcher::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.FilterDispatcher::destroy():void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.FilterDispatcher::prepareDispatcherAndWrapRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):javax.servlet.http.HttpServletRequest" />
			<role name="Request()" element="org.apache.struts2.dispatcher.FilterDispatcher::doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.dispatcher.FilterDispatcherCompatWeblogic61" />
			<role name="state" element="org.apache.struts2.dispatcher.FilterDispatcherCompatWeblogic61::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.FilterDispatcherCompatWeblogic61::setFilterConfig(javax.servlet.FilterConfig):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.portlet.context.PreparatorServlet" />
			<role name="state" element="org.apache.struts2.portlet.context.PreparatorServlet::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.context.PreparatorServlet::init(javax.servlet.ServletConfig):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher" />
			<role name="state" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::init(javax.portlet.PortletConfig):void" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::processAction(javax.portlet.ActionRequest, javax.portlet.ActionResponse):void" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::render(javax.portlet.RenderRequest, javax.portlet.RenderResponse):void" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::serviceAction(javax.portlet.PortletRequest, javax.portlet.PortletResponse, java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.lang.String, java.lang.Integer):void" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::destroy():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config_browser.ConfigurationHelper" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.config_browser.ConfigurationHelper::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.config_browser.ConfigurationHelper::getNamespaces():java.util.Set" />
			<role name="Request()" element="org.apache.struts2.config_browser.ConfigurationHelper::getActionNames(java.lang.String):java.util.Set" />
			<role name="Request()" element="org.apache.struts2.config_browser.ConfigurationHelper::getActionConfig(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.s1.Struts1Factory" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.s1.Struts1Factory::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.s1.Struts1Factory::createModuleConfig(java.lang.String):org.apache.struts.config.ModuleConfig" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.inject.InternalFactory" />
			<role name="Context" element="com.opensymphony.xwork2.inject.ContainerImpl$ParameterInjector" />
			<role name="state" element="com.opensymphony.xwork2.inject.ContainerImpl$ParameterInjector::factory:com.opensymphony.xwork2.inject.InternalFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.inject.ContainerImpl$ParameterInjector::inject(java.lang.reflect.Member, com.opensymphony.xwork2.inject.InternalContext):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.OptGroup" />
			<role name="state" element="org.apache.struts2.components.OptGroup::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.OptGroup::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.ActionComponent" />
			<role name="state" element="org.apache.struts2.components.ActionComponent::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.ActionComponent::end(java.io.Writer, java.lang.String):boolean" />
			<role name="Request()" element="org.apache.struts2.components.ActionComponent::executeAction():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.Anchor" />
			<role name="state" element="org.apache.struts2.components.Anchor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.AppendIterator" />
			<role name="state" element="org.apache.struts2.components.AppendIterator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.AppendIterator::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.Bean" />
			<role name="state" element="org.apache.struts2.components.Bean::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.Bean::start(java.io.Writer):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.Date" />
			<role name="state" element="org.apache.struts2.components.Date::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.Date::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.File" />
			<role name="state" element="org.apache.struts2.components.File::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.File::evaluateParams():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.I18n" />
			<role name="state" element="org.apache.struts2.components.I18n::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.I18n::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.Include" />
			<role name="state" element="org.apache.struts2.components.Include::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.Include::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.InputTransferSelect" />
			<role name="state" element="org.apache.struts2.components.InputTransferSelect::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.InputTransferSelect::evaluateExtraParams():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.IteratorComponent" />
			<role name="state" element="org.apache.struts2.components.IteratorComponent::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.IteratorComponent::start(java.io.Writer):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.MergeIterator" />
			<role name="state" element="org.apache.struts2.components.MergeIterator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.MergeIterator::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.OptionTransferSelect" />
			<role name="state" element="org.apache.struts2.components.OptionTransferSelect::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.OptionTransferSelect::evaluateExtraParams():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.Property" />
			<role name="state" element="org.apache.struts2.components.Property::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.Property::start(java.io.Writer):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.Submit" />
			<role name="state" element="org.apache.struts2.components.Submit::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.Submit::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.Text" />
			<role name="state" element="org.apache.struts2.components.Text::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.Text::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.components.UpDownSelect" />
			<role name="state" element="org.apache.struts2.components.UpDownSelect::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.UpDownSelect::evaluateParams():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.dojo.components.DateTimePicker" />
			<role name="state" element="org.apache.struts2.dojo.components.DateTimePicker::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dojo.components.DateTimePicker::format(java.lang.Object):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.dojo.components.Submit" />
			<role name="state" element="org.apache.struts2.dojo.components.Submit::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dojo.components.Submit::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.ChartResultTest" />
			<role name="State" element="com.opensymphony.xwork2.ActionProxy" />
			<role name="state" element="org.apache.struts2.dispatcher.ChartResultTest::mockActionProxy:com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ChartResultTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.jsf.FacesSupport" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.jsf.FacesSupport::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.jsf.FacesSupport::isResponseComplete(javax.faces.context.FacesContext, java.lang.String, boolean):boolean" />
			<role name="Request()" element="org.apache.struts2.jsf.FacesSupport::shouldRenderResponse(javax.faces.context.FacesContext, java.lang.String, boolean):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptorTest" />
			<role name="State" element="com.opensymphony.xwork2.interceptor.PreResultListener" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptorTest::preResultListener:com.opensymphony.xwork2.interceptor.PreResultListener" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptorTest::testModelDrivenUpdatedAndGetsPushedOntoStack():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.Anchor" />
			<role name="State" element="org.apache.struts2.components.UrlRenderer" />
			<role name="state" element="org.apache.struts2.components.Anchor::urlRenderer:org.apache.struts2.components.UrlRenderer" />
			<role name="Request()" element="org.apache.struts2.components.Anchor::evaluateExtraParams():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.Form" />
			<role name="State" element="org.apache.struts2.components.UrlRenderer" />
			<role name="state" element="org.apache.struts2.components.Form::urlRenderer:org.apache.struts2.components.UrlRenderer" />
			<role name="Request()" element="org.apache.struts2.components.Form::populateComponentHtmlId(org.apache.struts2.components.Form):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.URL" />
			<role name="State" element="org.apache.struts2.components.UrlRenderer" />
			<role name="state" element="org.apache.struts2.components.URL::urlRenderer:org.apache.struts2.components.UrlRenderer" />
			<role name="Request()" element="org.apache.struts2.components.URL::start(java.io.Writer):boolean" />
			<role name="Request()" element="org.apache.struts2.components.URL::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.xslt.ArrayAdapter" />
			<role name="state" element="org.apache.struts2.views.xslt.ArrayAdapter::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.ArrayAdapter::buildChildAdapters():java.util.List" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.xslt.BeanAdapter" />
			<role name="state" element="org.apache.struts2.views.xslt.BeanAdapter::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.BeanAdapter::getChildNodes():org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.struts2.views.xslt.BeanAdapter::buildChildAdapters():java.util.List" />
			<role name="Request()" element="org.apache.struts2.views.xslt.BeanAdapter::getPropertyDescriptors(java.lang.Object):java.beans.PropertyDescriptor[]" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.xslt.CollectionAdapter" />
			<role name="state" element="org.apache.struts2.views.xslt.CollectionAdapter::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.CollectionAdapter::buildChildAdapters():java.util.List" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.xslt.ProxyElementAdapter" />
			<role name="state" element="org.apache.struts2.views.xslt.ProxyElementAdapter::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.ProxyElementAdapter::buildChildAdapters():java.util.List" />
			<role name="Request()" element="org.apache.struts2.views.xslt.ProxyElementAdapter::getAttributeNode(java.lang.String):org.w3c.dom.Attr" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.views.xslt.StringAdapter" />
			<role name="state" element="org.apache.struts2.views.xslt.StringAdapter::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.xslt.StringAdapter::buildChildAdapters():java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="State" element="com.opensymphony.xwork2.ActionProxy" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionInvocation::proxy:com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::createResult():com.opensymphony.xwork2.Result" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invoke():java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invokeActionOnly():java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::createAction(java.util.Map):void" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::executeResult():void" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::init(com.opensymphony.xwork2.ActionProxy):void" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invokeAction(java.lang.Object, com.opensymphony.xwork2.config.entities.ActionConfig):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionProxy" />
			<role name="State" element="com.opensymphony.xwork2.ActionInvocation" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionProxy::invocation:com.opensymphony.xwork2.ActionInvocation" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxy::getAction():java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxy::execute():java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxy::prepare():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::register(com.opensymphony.xwork2.inject.ContainerBuilder, com.opensymphony.xwork2.util.location.LocatableProperties):void" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::reloadRequiredPackages(java.util.List):void" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::addAction(org.w3c.dom.Element, com.opensymphony.xwork2.config.entities.PackageConfig$Builder):void" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::verifyAction(java.lang.String, java.lang.String, com.opensymphony.xwork2.util.location.Location):boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::addPackage(org.w3c.dom.Element):com.opensymphony.xwork2.config.entities.PackageConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::verifyResultType(java.lang.String, com.opensymphony.xwork2.util.location.Location):java.lang.Class" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::buildResults(org.w3c.dom.Element, com.opensymphony.xwork2.config.entities.PackageConfig$Builder):java.util.Map" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::loadConfigurationFiles(java.lang.String, org.w3c.dom.Element):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config.BeanSelectionProvider" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.config.BeanSelectionProvider::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.config.BeanSelectionProvider::register(com.opensymphony.xwork2.inject.ContainerBuilder, com.opensymphony.xwork2.util.location.LocatableProperties):void" />
			<role name="Request()" element="org.apache.struts2.config.BeanSelectionProvider::alias(java.lang.Class, java.lang.String, com.opensymphony.xwork2.inject.ContainerBuilder, java.util.Properties, com.opensymphony.xwork2.inject.Scope):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config.StrutsXmlConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.config.StrutsXmlConfigurationProvider::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.config.StrutsXmlConfigurationProvider::findInFileSystem(java.lang.String):java.net.URL" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext" />
			<role name="State" element="com.opensymphony.xwork2.ValidationAware" />
			<role name="state" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::validationAware:com.opensymphony.xwork2.ValidationAware" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::setActionErrors(java.util.Collection):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getActionErrors():java.util.Collection" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::setActionMessages(java.util.Collection):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getActionMessages():java.util.Collection" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::setFieldErrors(java.util.Map):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getFieldErrors():java.util.Map" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::addActionError(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::addActionMessage(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::addFieldError(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::hasActionErrors():boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::hasActionMessages():boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::hasErrors():boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::hasFieldErrors():boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.util.ClassPathFinder" />
			<role name="State" element="com.opensymphony.xwork2.util.PatternMatcher" />
			<role name="state" element="com.opensymphony.xwork2.util.ClassPathFinder::patternMatcher:com.opensymphony.xwork2.util.PatternMatcher" />
			<role name="Request()" element="com.opensymphony.xwork2.util.ClassPathFinder::findMatches():java.util.Vector" />
			<role name="Request()" element="com.opensymphony.xwork2.util.ClassPathFinder::checkEntries(java.lang.String[], java.io.File, java.lang.String):java.util.Vector" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.mapper.DefaultActionMapperTest" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.dispatcher.mapper.DefaultActionMapperTest::config:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.DefaultActionMapperTest::setUp():void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.DefaultActionMapperTest::testGetMappingWithSlashedNameAtRoot():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.mapper.Restful2ActionMapperTest" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.dispatcher.mapper.Restful2ActionMapperTest::config:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.Restful2ActionMapperTest::setUp():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.template.FreemarkerTemplateEngine" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.components.template.FreemarkerTemplateEngine::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.template.FreemarkerTemplateEngine::renderTemplate(org.apache.struts2.components.template.TemplateRenderingContext):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.template.JspTemplateEngine" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.components.template.JspTemplateEngine::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.template.JspTemplateEngine::renderTemplate(org.apache.struts2.components.template.TemplateRenderingContext):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.template.VelocityTemplateEngine" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.components.template.VelocityTemplateEngine::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.template.VelocityTemplateEngine::renderTemplate(org.apache.struts2.components.template.TemplateRenderingContext):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.java.JavaTemplateEngine" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.views.java.JavaTemplateEngine::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.java.JavaTemplateEngine::setThemeClasses(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ActionSupport" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.ActionSupport::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::getLocale():java.util.Locale" />
		</instance>
		<instance>
			<role name="Context" element="mailreader2.MailreaderSupport" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="mailreader2.MailreaderSupport::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="mailreader2.MailreaderSupport::saveUser():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.ExecutionCountTestAction" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.ExecutionCountTestAction::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.ExecutionCountTestAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config_browser.ShowConfigAction" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.config_browser.ShowConfigAction::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.config_browser.ShowConfigAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config_browser.ShowValidatorAction" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.config_browser.ShowValidatorAction::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.config_browser.ShowValidatorAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.util.IteratorGenerator" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.util.IteratorGenerator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.util.IteratorGenerator::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.util.SubsetIteratorFilter" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.util.SubsetIteratorFilter::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.util.SubsetIteratorFilter::decide(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext" />
			<role name="State" element="com.opensymphony.xwork2.TextProvider" />
			<role name="state" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::textProvider:com.opensymphony.xwork2.TextProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::hasKey(java.lang.String):boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String, java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String, java.util.List):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String, java.lang.String[]):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String, java.lang.String, java.util.List):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String, java.lang.String, java.lang.String[]):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getTexts(java.lang.String):java.util.ResourceBundle" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String, java.lang.String, java.util.List, com.opensymphony.xwork2.util.ValueStack):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getText(java.lang.String, java.lang.String, java.lang.String[], com.opensymphony.xwork2.util.ValueStack):java.lang.String" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getTexts():java.util.ResourceBundle" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="Context" element="com.opensymphony.xwork2.ognl.accessor.XWorkListPropertyAccessor" />
			<role name="state" element="com.opensymphony.xwork2.ognl.accessor.XWorkListPropertyAccessor::objectTypeDeterminer:com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkListPropertyAccessor::getProperty(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkListPropertyAccessor::setProperty(java.util.Map, java.lang.Object, java.lang.Object, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="Context" element="com.opensymphony.xwork2.ognl.accessor.XWorkCollectionPropertyAccessor" />
			<role name="state" element="com.opensymphony.xwork2.ognl.accessor.XWorkCollectionPropertyAccessor::objectTypeDeterminer:com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkCollectionPropertyAccessor::getProperty(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="Context" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor" />
			<role name="state" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor::objectTypeDeterminer:com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor::getProperty(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor::getValue(java.util.Map, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.accessor.XWorkMapPropertyAccessor::getKey(java.util.Map, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.jasper.compiler.ErrorDispatcher" />
			<role name="State" element="org.apache.struts2.jasper.compiler.ErrorHandler" />
			<role name="state" element="org.apache.struts2.jasper.compiler.ErrorDispatcher::errHandler:org.apache.struts2.jasper.compiler.ErrorHandler" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.ErrorDispatcher::javacError(org.apache.struts2.jasper.compiler.JavacErrorDetail[]):void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.ErrorDispatcher::javacError(java.lang.String, java.lang.Exception):void" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.ErrorDispatcher::dispatch(org.apache.struts2.jasper.compiler.Mark, java.lang.String, java.lang.Object[], java.lang.Exception):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="Context" element="org.apache.struts2.jasper.JspCompilationContext" />
			<role name="state" element="org.apache.struts2.jasper.JspCompilationContext::classLoaderInterface:com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="Request()" element="org.apache.struts2.jasper.JspCompilationContext::getResourceAsStream(java.lang.String):java.io.InputStream" />
			<role name="Request()" element="org.apache.struts2.jasper.JspCompilationContext::getResource(java.lang.String):java.net.URL" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="Context" element="com.opensymphony.xwork2.util.finder.ClassFinder" />
			<role name="state" element="com.opensymphony.xwork2.util.finder.ClassFinder::classLoaderInterface:com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ClassFinder::readClassDef(java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="Context" element="com.opensymphony.xwork2.util.finder.ResourceFinder" />
			<role name="state" element="com.opensymphony.xwork2.util.finder.ResourceFinder::classLoaderInterface:com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::findClass(java.lang.String):java.lang.Class" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::findAllClasses(java.lang.String):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::findAvailableClasses(java.lang.String):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::mapAllClasses(java.lang.String):java.util.Map" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::mapAvailableClasses(java.lang.String):java.util.Map" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::findImplementation(java.lang.Class):java.lang.Class" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::findAllImplementations(java.lang.Class):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::findAvailableImplementations(java.lang.Class):java.util.List" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::mapAllImplementations(java.lang.Class):java.util.Map" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::mapAvailableImplementations(java.lang.Class):java.util.Map" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::getResource(java.lang.String):java.net.URL" />
			<role name="Request()" element="com.opensymphony.xwork2.util.finder.ResourceFinder::getResources(java.lang.String):java.util.Enumeration" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="Context" element="org.apache.struts2.jasper.servlet.JspCServletContext" />
			<role name="state" element="org.apache.struts2.jasper.servlet.JspCServletContext::classLoaderInterface:com.opensymphony.xwork2.util.finder.ClassLoaderInterface" />
			<role name="Request()" element="org.apache.struts2.jasper.servlet.JspCServletContext::getResource(java.lang.String):java.net.URL" />
			<role name="Request()" element="org.apache.struts2.jasper.servlet.JspCServletContext::getResourceAsStream(java.lang.String):java.io.InputStream" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="Context" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration" />
			<role name="state" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration::reloadContainer(java.util.List):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ActionChainResult" />
			<role name="State" element="com.opensymphony.xwork2.ActionProxy" />
			<role name="state" element="com.opensymphony.xwork2.ActionChainResult::proxy:com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionChainResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware" />
			<role name="state" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware::addActionError(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware::addActionMessage(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext$LoggingValidationAware::addFieldError(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config.ClasspathPackageProvider" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.config.ClasspathPackageProvider::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.config.ClasspathPackageProvider::loadPackages(java.lang.String[]):void" />
			<role name="Request()" element="org.apache.struts2.config.ClasspathPackageProvider::findAllParentPackages(java.lang.Class):java.util.List" />
			<role name="Request()" element="org.apache.struts2.config.ClasspathPackageProvider::loadPackageConfig(java.lang.String, java.lang.String, java.lang.Class):com.opensymphony.xwork2.config.entities.PackageConfig$Builder" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.osgi.OsgiConfigurationProvider::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::loadConfigFromBundle(org.osgi.framework.Bundle):void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::onBundleStopped(org.osgi.framework.Bundle):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ActionNestingTest$NestedTestConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.ActionNestingTest$NestedTestConfigurationProvider::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionNestingTest$NestedTestConfigurationProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.config.providers.MockConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.config.providers.MockConfigurationProvider::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.MockConfigurationProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::init(com.opensymphony.xwork2.config.Configuration):void" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::register(com.opensymphony.xwork2.inject.ContainerBuilder, com.opensymphony.xwork2.util.location.LocatableProperties):void" />
			<role name="Request()" element="com.opensymphony.xwork2.config.providers.XmlConfigurationProvider::addPackage(org.w3c.dom.Element):com.opensymphony.xwork2.config.entities.PackageConfig" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.PreResultListenerTest$1" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.PreResultListenerTest$1::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.PreResultListenerTest$1::loadPackages():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.annotations.AnnotationWorkflowInterceptorTest$MockConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.annotations.AnnotationWorkflowInterceptorTest$MockConfigurationProvider::config:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.annotations.AnnotationWorkflowInterceptorTest$MockConfigurationProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.TestConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.TestConfigurationProvider::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.TestConfigurationProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptorTest$WaitConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptorTest$WaitConfigurationProvider::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptorTest$WaitConfigurationProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.ChatLoginAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.ChatLoginAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.ChatLoginAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.ChatLogoutAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.ChatLogoutAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.ChatLogoutAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.CrudRoomAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.CrudRoomAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.CrudRoomAction::create():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.EnterRoomAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.EnterRoomAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.EnterRoomAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.ExitRoomAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.ExitRoomAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.ExitRoomAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.MessagesAvailableInRoomAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.MessagesAvailableInRoomAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.MessagesAvailableInRoomAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.RoomsAvailableAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.RoomsAvailableAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.RoomsAvailableAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.SendMessageToRoomAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.SendMessageToRoomAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.SendMessageToRoomAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.UsersAvailableAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.UsersAvailableAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.UsersAvailableAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.chat.UsersAvailableInRoomAction" />
			<role name="State" element="org.apache.struts2.showcase.chat.ChatService" />
			<role name="state" element="org.apache.struts2.showcase.chat.UsersAvailableInRoomAction::chatService:org.apache.struts2.showcase.chat.ChatService" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.UsersAvailableInRoomAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.spring.SpringObjectFactory" />
			<role name="state" element="com.opensymphony.xwork2.spring.SpringObjectFactory::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.spring.SpringObjectFactory::setAutowireStrategy(int):void" />
			<role name="Request()" element="com.opensymphony.xwork2.spring.SpringObjectFactory::buildBean(java.lang.Class, java.util.Map):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.spring.SpringProxyableObjectFactory" />
			<role name="state" element="com.opensymphony.xwork2.spring.SpringProxyableObjectFactory::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.spring.SpringProxyableObjectFactory::buildBean(java.lang.String, java.util.Map):java.lang.Object" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.plexus.PlexusObjectFactory" />
			<role name="state" element="org.apache.struts2.plexus.PlexusObjectFactory::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.plexus.PlexusObjectFactory::setServletConfig(javax.servlet.ServletContext):void" />
			<role name="Request()" element="org.apache.struts2.plexus.PlexusObjectFactory::lookup(java.lang.String, java.lang.String, java.util.Map):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.FelixOsgiHost" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.osgi.FelixOsgiHost::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::startFelix():void" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::getRunLevelDirs(java.lang.String):java.util.Map" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::getBundlesInDir(java.lang.String):java.util.List" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::addSpringOSGiSupport():void" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::addExportedPackages(java.util.Properties, java.util.Properties):void" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::getVersion(java.net.URL):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::getProperties(java.lang.String):java.util.Properties" />
			<role name="Request()" element="org.apache.struts2.osgi.FelixOsgiHost::destroy():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper" />
			<role name="State" element="org.apache.struts2.dispatcher.multipart.MultiPartRequest" />
			<role name="state" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::multi:org.apache.struts2.dispatcher.multipart.MultiPartRequest" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::getFileParameterNames():java.util.Enumeration" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::getContentTypes(java.lang.String):java.lang.String[]" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::getFiles(java.lang.String):java.io.File[]" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::getFileNames(java.lang.String):java.lang.String[]" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::getFileSystemNames(java.lang.String):java.lang.String[]" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::getParameter(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::getParameterNames():java.util.Enumeration" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.MultiPartRequestWrapper::getParameterValues(java.lang.String):java.lang.String[]" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.validators.VisitorFieldValidator" />
			<role name="State" element="com.opensymphony.xwork2.validator.ActionValidatorManager" />
			<role name="state" element="com.opensymphony.xwork2.validator.validators.VisitorFieldValidator::actionValidatorManager:com.opensymphony.xwork2.validator.ActionValidatorManager" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.validators.VisitorFieldValidator::validateObject(java.lang.String, java.lang.Object, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config.ClasspathPackageProvider" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.config.ClasspathPackageProvider::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.config.ClasspathPackageProvider::processActionClass(java.lang.Class, java.lang.String[]):void" />
			<role name="Request()" element="org.apache.struts2.config.ClasspathPackageProvider::loadPackageConfig(java.lang.String, java.lang.String, java.lang.Class):com.opensymphony.xwork2.config.entities.PackageConfig$Builder" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.osgi.OsgiConfigurationProvider::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::loadPackages():void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::loadConfigFromBundle(org.osgi.framework.Bundle):void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::destroy():void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::bundleChanged(org.osgi.framework.BundleEvent):void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::onBundleStopped(org.osgi.framework.Bundle):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.util.classloader.FileResourceStore" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.util.classloader.FileResourceStore::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.FileResourceStore::read(java.lang.String):byte[]" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.FileResourceStore::closeQuietly(java.io.InputStream):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.util.classloader.JarResourceStore" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.util.classloader.JarResourceStore::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.JarResourceStore::read(java.lang.String):byte[]" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.JarResourceStore::closeQuietly(java.io.InputStream):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::buildActionConfigs():void" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::findActions():java.util.Set" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::buildUrlSet():com.opensymphony.xwork2.util.finder.UrlSet" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::buildConfiguration(java.util.Set):void" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::determineActionNamespace(java.lang.Class):java.util.List" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::determineActionName(java.lang.Class):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::createActionConfig(com.opensymphony.xwork2.config.entities.PackageConfig$Builder, java.lang.Class, java.lang.String, java.lang.String, org.apache.struts2.convention.annotation.Action):void" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::buildExceptionMappings(org.apache.struts2.convention.annotation.ExceptionMapping[], java.lang.String):java.util.List" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::getPackageConfig(java.util.Map, java.lang.String, java.lang.String, java.lang.Class, org.apache.struts2.convention.annotation.Action):com.opensymphony.xwork2.config.entities.PackageConfig$Builder" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::buildIndexActions(java.util.Map):void" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::needsReload():boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.Dispatcher" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.Dispatcher::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.Dispatcher::cleanup():void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.Dispatcher::init_CheckWebLogicWorkaround(com.opensymphony.xwork2.inject.Container):void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.Dispatcher::init():void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.Dispatcher::serviceAction(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, org.apache.struts2.dispatcher.mapper.ActionMapping):void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.Dispatcher::getSaveDir(javax.servlet.ServletContext):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.dispatcher.Dispatcher::prepare(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.codebehind.CodebehindUnknownHandler" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
			<role name="Request()" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::locateTemplate(java.lang.String):java.net.URL" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.ConventionUnknownHandler" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.convention.ConventionUnknownHandler::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::findResource(java.util.Map, java.lang.String[]):org.apache.struts2.convention.ConventionUnknownHandler$Resource" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::scanResultsByExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.opensymphony.xwork2.ActionContext):com.opensymphony.xwork2.Result" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::findResult(java.lang.String, java.lang.String, java.lang.String, com.opensymphony.xwork2.ActionContext, java.util.Map):com.opensymphony.xwork2.Result" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::createContextMap(java.util.Map, java.util.Map, java.util.Map, java.util.Map, javax.portlet.PortletRequest, javax.portlet.PortletResponse, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, javax.portlet.PortletConfig, java.lang.Integer):java.util.HashMap" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::serviceAction(javax.portlet.PortletRequest, javax.portlet.PortletResponse, java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.lang.String, java.lang.Integer):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::validate(java.lang.Object, java.lang.String, com.opensymphony.xwork2.validator.ValidatorContext, java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::loadFile(java.lang.String, java.lang.Class, boolean):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::validate(java.lang.Object, java.lang.String, com.opensymphony.xwork2.validator.ValidatorContext, java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::loadFile(java.lang.String, java.lang.Class, boolean):java.util.List" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Context" element="org.apache.struts2.dispatcher.FilterDispatcher" />
			<role name="state" element="org.apache.struts2.dispatcher.FilterDispatcher::actionMapper:org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Request()" element="org.apache.struts2.dispatcher.FilterDispatcher::doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Context" element="org.apache.struts2.dispatcher.ServletRedirectResult" />
			<role name="state" element="org.apache.struts2.dispatcher.ServletRedirectResult::actionMapper:org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Request()" element="org.apache.struts2.dispatcher.ServletRedirectResult::doExecute(java.lang.String, com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Context" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher" />
			<role name="state" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::actionMapper:org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::getActionMapping(javax.portlet.PortletRequest, javax.servlet.http.HttpServletRequest):org.apache.struts2.dispatcher.mapper.ActionMapping" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Context" element="org.apache.struts2.portlet.result.PortletActionRedirectResult" />
			<role name="state" element="org.apache.struts2.portlet.result.PortletActionRedirectResult::actionMapper:org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Request()" element="org.apache.struts2.portlet.result.PortletActionRedirectResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.I18n" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="org.apache.struts2.components.I18n::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="org.apache.struts2.components.I18n::start(java.io.Writer):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ActionSupport" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="com.opensymphony.xwork2.ActionSupport::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::getTextProvider():com.opensymphony.xwork2.TextProvider" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="State" element="com.opensymphony.xwork2.UnknownHandlerManager" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionInvocation::unknownHandlerManager:com.opensymphony.xwork2.UnknownHandlerManager" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::createResult():com.opensymphony.xwork2.Result" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invokeAction(java.lang.Object, com.opensymphony.xwork2.config.entities.ActionConfig):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionInvocation::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::createResult():com.opensymphony.xwork2.Result" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::executeResult():void" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invokeAction(java.lang.Object, com.opensymphony.xwork2.config.entities.ActionConfig):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.rest.RestActionInvocation" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.rest.RestActionInvocation::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.rest.RestActionInvocation::invokeAction(java.lang.Object, com.opensymphony.xwork2.config.entities.ActionConfig):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="Context" element="com.opensymphony.xwork2.ObjectFactory" />
			<role name="state" element="com.opensymphony.xwork2.ObjectFactory::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.ObjectFactory::injectInternalBeans(java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.config.ConfigurationManager" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.config.ConfigurationManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.config.ConfigurationManager::clearContainerProviders():void" />
			<role name="Request()" element="com.opensymphony.xwork2.config.ConfigurationManager::conditionalReload():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter" />
			<role name="state" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter::convertValue(java.util.Map, java.lang.Object, java.lang.reflect.Member, java.lang.String, java.lang.Object, java.lang.Class):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter::getConverter(java.lang.Class, java.lang.String):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter::addConverterMapping(java.util.Map, java.lang.Class):void" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.XWorkConverter::loadConversionProperties(java.lang.String, boolean):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.showcase.chat.DateConverter" />
			<role name="state" element="org.apache.struts2.showcase.chat.DateConverter::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.showcase.chat.DateConverter::convertFromString(java.util.Map, java.lang.String[], java.lang.Class):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ognl.OgnlValueStack" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.ognl.OgnlValueStack::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::handleRuntimeException(java.lang.String, java.lang.Object, boolean, java.lang.RuntimeException):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::handleOgnlException(java.lang.String, java.lang.Object, boolean, ognl.OgnlException):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::handleOgnlException(java.lang.String, boolean, ognl.OgnlException):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStack::logLookupFailure(java.lang.String, java.lang.Exception):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::registerValidator(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::parseValidators():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest::parse(javax.servlet.http.HttpServletRequest, java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest::processUpload(javax.servlet.http.HttpServletRequest, java.lang.String):void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest::processFileField(org.apache.commons.fileupload.FileItem):void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.JakartaMultiPartRequest::processNormalFormField(org.apache.commons.fileupload.FileItem, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.multipart.PellMultiPartRequest" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.multipart.PellMultiPartRequest::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.multipart.PellMultiPartRequest::setEncoding():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Context" element="org.apache.struts2.config.Settings" />
			<role name="state" element="org.apache.struts2.config.Settings::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.config.Settings::getDefaultInstance():org.apache.struts2.config.Settings" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.BundleFreemarkerManager" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.osgi.BundleFreemarkerManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.BundleFreemarkerManager::createTemplateLoader(javax.servlet.ServletContext, java.lang.String):freemarker.cache.TemplateLoader" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.freemarker.FreemarkerManager" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.views.freemarker.FreemarkerManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreemarkerManager::getConfiguration(javax.servlet.ServletContext):freemarker.template.Configuration" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreemarkerManager::init(javax.servlet.ServletContext):void" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreemarkerManager::createTemplateLoader(javax.servlet.ServletContext, java.lang.String):freemarker.cache.TemplateLoader" />
			<role name="Request()" element="org.apache.struts2.views.freemarker.FreemarkerManager::loadSettings(javax.servlet.ServletContext):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Context" element="com.opensymphony.xwork2.ObjectFactory" />
			<role name="state" element="com.opensymphony.xwork2.ObjectFactory::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.ObjectFactory::buildInterceptor(com.opensymphony.xwork2.config.entities.InterceptorConfig, java.util.Map):com.opensymphony.xwork2.interceptor.Interceptor" />
			<role name="Request()" element="com.opensymphony.xwork2.ObjectFactory::buildResult(com.opensymphony.xwork2.config.entities.ResultConfig, java.util.Map):com.opensymphony.xwork2.Result" />
			<role name="Request()" element="com.opensymphony.xwork2.ObjectFactory::buildValidator(java.lang.String, java.util.Map, java.util.Map):com.opensymphony.xwork2.validator.Validator" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="State" element="org.apache.struts2.osgi.BundleAccessor" />
			<role name="state" element="org.apache.struts2.osgi.OsgiConfigurationProvider::bundleAccessor:org.apache.struts2.osgi.BundleAccessor" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::init(com.opensymphony.xwork2.config.Configuration):void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::loadConfigFromBundle(org.osgi.framework.Bundle):void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::onBundleStopped(org.osgi.framework.Bundle):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.util.classloader.ResourceStoreClassLoader" />
			<role name="State" element="com.opensymphony.xwork2.util.classloader.ResourceStore" />
			<role name="state" element="com.opensymphony.xwork2.util.classloader.ResourceStoreClassLoader::stores:com.opensymphony.xwork2.util.classloader.ResourceStore[]" />
			<role name="Request()" element="com.opensymphony.xwork2.util.classloader.ResourceStoreClassLoader::fastFindClass(java.lang.String):java.lang.Class" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.DefaultResultMapBuilder" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.convention.DefaultResultMapBuilder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.DefaultResultMapBuilder::build(java.lang.Class, org.apache.struts2.convention.annotation.Action, java.lang.String, com.opensymphony.xwork2.config.entities.PackageConfig):java.util.Map" />
			<role name="Request()" element="org.apache.struts2.convention.DefaultResultMapBuilder::createFromResources(java.lang.Class, java.util.Map, java.lang.String, java.lang.String, java.lang.String, com.opensymphony.xwork2.config.entities.PackageConfig, java.util.Map):void" />
			<role name="Request()" element="org.apache.struts2.convention.DefaultResultMapBuilder::makeResults(java.lang.Class, java.lang.String, java.lang.String, java.util.Map, com.opensymphony.xwork2.config.entities.PackageConfig, java.util.Map):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.DefaultBundleAccessor" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.osgi.DefaultBundleAccessor::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.osgi.DefaultBundleAccessor::getAllServiceReferences(java.lang.String):org.osgi.framework.ServiceReference[]" />
			<role name="Request()" element="org.apache.struts2.osgi.DefaultBundleAccessor::loadClass(java.lang.String):java.lang.Class" />
			<role name="Request()" element="org.apache.struts2.osgi.DefaultBundleAccessor::loadResource(java.lang.String, boolean):java.net.URL" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder" />
			<role name="State" element="com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="state" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::validatorFactory:com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processExpressionValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.ExpressionValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processCustomValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.CustomValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processRegexFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.RegexFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processConditionalVisitorFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.ConditionalVisitorFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processVisitorFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.VisitorFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processUrlValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.UrlValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processStringLengthFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.StringLengthFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processRequiredStringValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.RequiredStringValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processRequiredFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.RequiredFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processIntRangeFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.IntRangeFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processDoubleRangeFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.DoubleRangeFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processFieldExpressionValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.FieldExpressionValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processEmailValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.EmailValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processDateRangeFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.DateRangeFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationValidationConfigurationBuilder::processConversionErrorFieldValidatorAnnotation(com.opensymphony.xwork2.validator.annotations.ConversionErrorFieldValidator, java.lang.String, java.lang.String):com.opensymphony.xwork2.validator.ValidatorConfig" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper::getMapping(javax.servlet.http.HttpServletRequest, com.opensymphony.xwork2.config.ConfigurationManager):org.apache.struts2.dispatcher.mapper.ActionMapping" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper::getMappingFromActionName(java.lang.String):org.apache.struts2.dispatcher.mapper.ActionMapping" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.CompositeActionMapper::getUriFromActionMapping(org.apache.struts2.dispatcher.mapper.ActionMapping):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.mapper.Restful2ActionMapper" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.mapper.Restful2ActionMapper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.Restful2ActionMapper::getMapping(javax.servlet.http.HttpServletRequest, com.opensymphony.xwork2.config.ConfigurationManager):org.apache.struts2.dispatcher.mapper.ActionMapping" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.mapper.RestfulActionMapper" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.mapper.RestfulActionMapper::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.mapper.RestfulActionMapper::getMapping(javax.servlet.http.HttpServletRequest, com.opensymphony.xwork2.config.ConfigurationManager):org.apache.struts2.dispatcher.mapper.ActionMapping" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.jasper.compiler.TextOptimizer$TextCatVisitor" />
			<role name="State" element="org.apache.struts2.jasper.Options" />
			<role name="state" element="org.apache.struts2.jasper.compiler.TextOptimizer$TextCatVisitor::options:org.apache.struts2.jasper.Options" />
			<role name="Request()" element="org.apache.struts2.jasper.compiler.TextOptimizer$TextCatVisitor::visit(org.apache.struts2.jasper.compiler.Node$TemplateText):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.showcase.hangman.HangmanService" />
			<role name="State" element="org.apache.struts2.showcase.hangman.VocabSource" />
			<role name="state" element="org.apache.struts2.showcase.hangman.HangmanService::vocabSource:org.apache.struts2.showcase.hangman.VocabSource" />
			<role name="Request()" element="org.apache.struts2.showcase.hangman.HangmanService::startNewGame():org.apache.struts2.showcase.hangman.Hangman" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionProxyFactory" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionProxyFactory::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxyFactory::createActionProxy(java.lang.String, java.lang.String, java.lang.String, java.util.Map, boolean, boolean):com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxyFactory::createActionProxy(com.opensymphony.xwork2.ActionInvocation, java.lang.String, java.lang.String, java.lang.String, boolean, boolean):com.opensymphony.xwork2.ActionProxy" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.DelegatingObjectFactory" />
			<role name="State" element="org.apache.struts2.osgi.BundleAccessor" />
			<role name="state" element="org.apache.struts2.osgi.DelegatingObjectFactory::bundleResourceLoader:org.apache.struts2.osgi.BundleAccessor" />
			<role name="Request()" element="org.apache.struts2.osgi.DelegatingObjectFactory::buildBean(java.lang.String, java.util.Map, boolean):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.osgi.DelegatingObjectFactory::getClassInstance(java.lang.String):java.lang.Class" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.SpringOsgiObjectFactory" />
			<role name="State" element="org.apache.struts2.osgi.BundleAccessor" />
			<role name="state" element="org.apache.struts2.osgi.SpringOsgiObjectFactory::bundleAccessor:org.apache.struts2.osgi.BundleAccessor" />
			<role name="Request()" element="org.apache.struts2.osgi.SpringOsgiObjectFactory::getBean(java.lang.String):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.osgi.SpringOsgiObjectFactory::containsBean(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.TestNGXWorkTestCase" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.TestNGXWorkTestCase::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.TestNGXWorkTestCase::setUp():void" />
			<role name="Request()" element="com.opensymphony.xwork2.TestNGXWorkTestCase::loadConfigurationProviders(com.opensymphony.xwork2.config.ConfigurationProvider[]):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.codebehind.CodebehindUnknownHandler" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::buildActionConfig(java.lang.String, java.lang.String, java.lang.String, com.opensymphony.xwork2.config.entities.ResultTypeConfig):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.codebehind.CodebehindUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.ConventionUnknownHandler" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.convention.ConventionUnknownHandler::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.config.ConfigurationManager" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.config.ConfigurationManager::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.config.ConfigurationManager::getConfiguration():com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.config.ConfigurationManager::destroyConfiguration():void" />
			<role name="Request()" element="com.opensymphony.xwork2.config.ConfigurationManager::conditionalReload():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.OsgiConfigurationProvider" />
			<role name="State" element="org.apache.struts2.osgi.OsgiHost" />
			<role name="state" element="org.apache.struts2.osgi.OsgiConfigurationProvider::osgiHost:org.apache.struts2.osgi.OsgiHost" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::init(com.opensymphony.xwork2.config.Configuration):void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::loadPackages():void" />
			<role name="Request()" element="org.apache.struts2.osgi.OsgiConfigurationProvider::destroy():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ognl.OgnlNullHandlerWrapper" />
			<role name="State" element="com.opensymphony.xwork2.conversion.NullHandler" />
			<role name="state" element="com.opensymphony.xwork2.ognl.OgnlNullHandlerWrapper::wrapped:com.opensymphony.xwork2.conversion.NullHandler" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlNullHandlerWrapper::nullMethodResult(java.util.Map, java.lang.Object, java.lang.String, java.lang.Object[]):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlNullHandlerWrapper::nullPropertyValue(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::nullMethodResult(java.util.Map, java.lang.Object, java.lang.String, java.lang.Object[]):java.lang.Object" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::nullPropertyValue(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getElementClass(java.lang.Class, java.lang.String, java.lang.Object):java.lang.Class" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getClass(java.lang.Class, java.lang.String, boolean):java.lang.Class" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="state" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getAnnotation(, java.lang.String, java.lang.Class):java.lang.annotation.Annotation" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getAnnotationFromGetter(, java.lang.String, java.lang.Class):java.lang.annotation.Annotation" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getAnnotationFromSetter(, java.lang.String, java.lang.Class):java.lang.annotation.Annotation" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.DefaultObjectTypeDeterminer::getClass(java.lang.Class, java.lang.String, boolean):java.lang.Class" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.AliasInterceptor" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.AliasInterceptor::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.AliasInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ParametersInterceptor::setParameters(java.lang.Object, com.opensymphony.xwork2.util.ValueStack, java.util.Map):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.StaticParametersInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory::createValueStack():com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory::createValueStack(com.opensymphony.xwork2.util.ValueStack):com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.ognl.OgnlValueStackFactory::setContainer(com.opensymphony.xwork2.inject.Container):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="state" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::nullPropertyValue(java.util.Map, java.lang.Object, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.FilterDispatcher" />
			<role name="State" element="org.apache.struts2.dispatcher.StaticContentLoader" />
			<role name="state" element="org.apache.struts2.dispatcher.FilterDispatcher::staticResourceLoader:org.apache.struts2.dispatcher.StaticContentLoader" />
			<role name="Request()" element="org.apache.struts2.dispatcher.FilterDispatcher::init(javax.servlet.FilterConfig):void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.FilterDispatcher::doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.ActionProxy" />
			<role name="Context" element="org.apache.struts2.components.ActionComponent" />
			<role name="state" element="org.apache.struts2.components.ActionComponent::proxy:com.opensymphony.xwork2.ActionProxy" />
			<role name="Request()" element="org.apache.struts2.components.ActionComponent::end(java.io.Writer, java.lang.String):boolean" />
			<role name="Request()" element="org.apache.struts2.components.ActionComponent::executeAction():void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Context" element="org.apache.struts2.components.Component" />
			<role name="state" element="org.apache.struts2.components.Component::actionMapper:org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Request()" element="org.apache.struts2.components.Component::determineActionURL(java.lang.String, java.lang.String, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.util.Map, java.lang.String, boolean, boolean, boolean, boolean):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.oval.interceptor.DefaultOValValidationManager" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.oval.interceptor.DefaultOValValidationManager::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.oval.interceptor.DefaultOValValidationManager::addAditionalConfigurers(java.util.List):void" />
			<role name="Request()" element="org.apache.struts2.oval.interceptor.DefaultOValValidationManager::loadFile(java.lang.String, java.lang.Class, boolean):net.sf.oval.configuration.xml.XMLConfigurer" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.util.StrutsUtil" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="org.apache.struts2.util.StrutsUtil::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtil::bean(java.lang.Object):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtil::isTrue(java.lang.String):boolean" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtil::findString(java.lang.String):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtil::findValue(java.lang.String, java.lang.String):java.lang.Object" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtil::getText(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.struts2.util.StrutsUtil::makeSelectList(java.lang.String, java.lang.String, java.lang.String, java.lang.String):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config_browser.ShowConfigAction" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="state" element="org.apache.struts2.config_browser.ShowConfigAction::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="org.apache.struts2.config_browser.ShowConfigAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config_browser.ShowValidatorAction" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="state" element="org.apache.struts2.config_browser.ShowValidatorAction::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="org.apache.struts2.config_browser.ShowValidatorAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.util.IteratorGenerator" />
			<role name="State" element="org.apache.struts2.util.IteratorGenerator$Converter" />
			<role name="state" element="org.apache.struts2.util.IteratorGenerator::converter:org.apache.struts2.util.IteratorGenerator$Converter" />
			<role name="Request()" element="org.apache.struts2.util.IteratorGenerator::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.util.SubsetIteratorFilter" />
			<role name="State" element="org.apache.struts2.util.SubsetIteratorFilter$Decider" />
			<role name="state" element="org.apache.struts2.util.SubsetIteratorFilter::decider:org.apache.struts2.util.SubsetIteratorFilter$Decider" />
			<role name="Request()" element="org.apache.struts2.util.SubsetIteratorFilter::decide(java.lang.Object):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionInvocation::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::invokeAction(java.lang.Object, com.opensymphony.xwork2.config.entities.ActionConfig):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionInvocation::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::createContextMap():java.util.Map" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::init(com.opensymphony.xwork2.ActionProxy):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext" />
			<role name="State" element="com.opensymphony.xwork2.LocaleProvider" />
			<role name="state" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::localeProvider:com.opensymphony.xwork2.LocaleProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DelegatingValidatorContext::getLocale():java.util.Locale" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.ConventionUnknownHandler" />
			<role name="State" element="org.apache.struts2.convention.ConventionsService" />
			<role name="state" element="org.apache.struts2.convention.ConventionUnknownHandler::conventionsService:org.apache.struts2.convention.ConventionsService" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownAction(java.lang.String, java.lang.String):com.opensymphony.xwork2.config.entities.ActionConfig" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::scanResultsByExtension(java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.opensymphony.xwork2.ActionContext):com.opensymphony.xwork2.Result" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::handleUnknownResult(com.opensymphony.xwork2.ActionContext, java.lang.String, com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):com.opensymphony.xwork2.Result" />
			<role name="Request()" element="org.apache.struts2.convention.ConventionUnknownHandler::determinePath(com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionProxy" />
			<role name="State" element="com.opensymphony.xwork2.UnknownHandlerManager" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionProxy::unknownHandlerManager:com.opensymphony.xwork2.UnknownHandlerManager" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxy::prepare():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultUnknownHandlerManager" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="com.opensymphony.xwork2.DefaultUnknownHandlerManager::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultUnknownHandlerManager::build():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.config.impl.DefaultConfiguration::addPackageConfig(java.lang.String, com.opensymphony.xwork2.config.entities.PackageConfig):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::buildConfiguration(java.util.Set):void" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::createActionConfig(com.opensymphony.xwork2.config.entities.PackageConfig$Builder, java.lang.Class, java.lang.String, java.lang.String, org.apache.struts2.convention.annotation.Action):void" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::getPackageConfig(java.util.Map, java.lang.String, java.lang.String, java.lang.Class, org.apache.struts2.convention.annotation.Action):com.opensymphony.xwork2.config.entities.PackageConfig$Builder" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.ClasspathConfigurationProvider" />
			<role name="State" element="org.apache.struts2.convention.ActionConfigBuilder" />
			<role name="state" element="org.apache.struts2.convention.ClasspathConfigurationProvider::actionConfigBuilder:org.apache.struts2.convention.ActionConfigBuilder" />
			<role name="Request()" element="org.apache.struts2.convention.ClasspathConfigurationProvider::destroy():void" />
			<role name="Request()" element="org.apache.struts2.convention.ClasspathConfigurationProvider::needsReload():boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.ClasspathPackageProvider" />
			<role name="State" element="org.apache.struts2.convention.ActionConfigBuilder" />
			<role name="state" element="org.apache.struts2.convention.ClasspathPackageProvider::actionConfigBuilder:org.apache.struts2.convention.ActionConfigBuilder" />
			<role name="Request()" element="org.apache.struts2.convention.ClasspathPackageProvider::needsReload():boolean" />
			<role name="Request()" element="org.apache.struts2.convention.ClasspathPackageProvider::loadPackages():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.conversion.impl.XWorkBasicConverter" />
			<role name="State" element="com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="state" element="com.opensymphony.xwork2.conversion.impl.XWorkBasicConverter::objectTypeDeterminer:com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.XWorkBasicConverter::doConvertToCollection(java.util.Map, java.lang.Object, java.lang.reflect.Member, java.lang.String, java.lang.Object, java.lang.Class):java.util.Collection" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.interceptor.FileUploadInterceptor" />
			<role name="State" element="com.opensymphony.xwork2.util.PatternMatcher" />
			<role name="state" element="org.apache.struts2.interceptor.FileUploadInterceptor::matcher:com.opensymphony.xwork2.util.PatternMatcher" />
			<role name="Request()" element="org.apache.struts2.interceptor.FileUploadInterceptor::matchesWildcard(java.lang.String, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.ValidationInterceptor" />
			<role name="State" element="com.opensymphony.xwork2.validator.ActionValidatorManager" />
			<role name="state" element="com.opensymphony.xwork2.validator.ValidationInterceptor::actionValidatorManager:com.opensymphony.xwork2.validator.ActionValidatorManager" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.ValidationInterceptor::doBeforeInvocation(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.rest.ContentTypeInterceptor" />
			<role name="State" element="org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="state" element="org.apache.struts2.rest.ContentTypeInterceptor::selector:org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="Request()" element="org.apache.struts2.rest.ContentTypeInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.rest.RestWorkflowInterceptor" />
			<role name="State" element="org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="state" element="org.apache.struts2.rest.RestWorkflowInterceptor::manager:org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="Request()" element="org.apache.struts2.rest.RestWorkflowInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.util.location.LocatableProperties" />
			<role name="State" element="com.opensymphony.xwork2.util.location.Location" />
			<role name="state" element="com.opensymphony.xwork2.util.location.LocatableProperties::location:com.opensymphony.xwork2.util.location.Location" />
			<role name="Request()" element="com.opensymphony.xwork2.util.location.LocatableProperties::load(java.io.InputStream):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.ServletUrlRenderer" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.components.ServletUrlRenderer::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.components.ServletUrlRenderer::renderFormUrl(org.apache.struts2.components.Form):void" />
			<role name="Request()" element="org.apache.struts2.components.ServletUrlRenderer::beforeRenderUrl(org.apache.struts2.components.UrlProvider):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.SEOActionNameBuilder" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.convention.SEOActionNameBuilder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.SEOActionNameBuilder::build(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.DefaultInterceptorMapBuilder" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.convention.DefaultInterceptorMapBuilder::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.convention.DefaultInterceptorMapBuilder::build(org.apache.struts2.convention.annotation.InterceptorRef[], java.lang.String, com.opensymphony.xwork2.config.entities.PackageConfig$Builder):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.java.DefaultTagHandlerFactory" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.views.java.DefaultTagHandlerFactory::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.java.DefaultTagHandlerFactory::create(org.apache.struts2.views.java.TagHandler):org.apache.struts2.views.java.TagHandler" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager" />
			<role name="State" element="com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="state" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::validatorFactory:com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::getValidators(java.lang.Class, java.lang.String, java.lang.String):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager" />
			<role name="State" element="com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="state" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::validatorFactory:com.opensymphony.xwork2.validator.ValidatorFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::getValidators(java.lang.Class, java.lang.String, java.lang.String):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager" />
			<role name="State" element="com.opensymphony.xwork2.validator.ValidatorFileParser" />
			<role name="state" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::validatorFileParser:com.opensymphony.xwork2.validator.ValidatorFileParser" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.AnnotationActionValidatorManager::loadFile(java.lang.String, java.lang.Class, boolean):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager" />
			<role name="State" element="com.opensymphony.xwork2.validator.ValidatorFileParser" />
			<role name="state" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::validatorFileParser:com.opensymphony.xwork2.validator.ValidatorFileParser" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultActionValidatorManager::loadFile(java.lang.String, java.lang.Class, boolean):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory" />
			<role name="State" element="com.opensymphony.xwork2.validator.ValidatorFileParser" />
			<role name="state" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::validatorFileParser:com.opensymphony.xwork2.validator.ValidatorFileParser" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultValidatorFactory::retrieveValidatorConfiguration(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.Bean" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="state" element="org.apache.struts2.components.Bean::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="org.apache.struts2.components.Bean::addParameter(java.lang.String, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.Debug" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="state" element="org.apache.struts2.components.Debug::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="org.apache.struts2.components.Debug::start(java.io.Writer):boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.DefaultResultMapBuilder" />
			<role name="State" element="org.apache.struts2.convention.ConventionsService" />
			<role name="state" element="org.apache.struts2.convention.DefaultResultMapBuilder::conventionsService:org.apache.struts2.convention.ConventionsService" />
			<role name="Request()" element="org.apache.struts2.convention.DefaultResultMapBuilder::build(java.lang.Class, org.apache.struts2.convention.annotation.Action, java.lang.String, com.opensymphony.xwork2.config.entities.PackageConfig):java.util.Map" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.ServletUrlRenderer" />
			<role name="State" element="org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="state" element="org.apache.struts2.components.ServletUrlRenderer::actionMapper:org.apache.struts2.dispatcher.mapper.ActionMapper" />
			<role name="Request()" element="org.apache.struts2.components.ServletUrlRenderer::renderFormUrl(org.apache.struts2.components.Form):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsFreemarkerDecorator::render(com.opensymphony.sitemesh.Content, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, com.opensymphony.xwork2.ActionContext):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsVelocityDecorator::render(com.opensymphony.sitemesh.Content, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, com.opensymphony.xwork2.ActionContext):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.java.DefaultTheme" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.views.java.DefaultTheme::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.java.DefaultTheme::renderTag(java.lang.String, org.apache.struts2.components.template.TemplateRenderingContext):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.jsp.iterator.IteratorGeneratorTag" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.views.jsp.iterator.IteratorGeneratorTag::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.jsp.iterator.IteratorGeneratorTag::doStartTag():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.jsp.iterator.SubsetIteratorTag" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.views.jsp.iterator.SubsetIteratorTag::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.views.jsp.iterator.SubsetIteratorTag::doStartTag():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config_browser.ShowValidatorAction" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionContextFactory" />
			<role name="state" element="org.apache.struts2.config_browser.ShowValidatorAction::reflectionContextFactory:com.opensymphony.xwork2.util.reflection.ReflectionContextFactory" />
			<role name="Request()" element="org.apache.struts2.config_browser.ShowValidatorAction::execute():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.config_browser.ListValidatorsAction" />
			<role name="State" element="com.opensymphony.xwork2.validator.ActionValidatorManager" />
			<role name="state" element="org.apache.struts2.config_browser.ListValidatorsAction::actionValidatorManager:com.opensymphony.xwork2.validator.ActionValidatorManager" />
			<role name="Request()" element="org.apache.struts2.config_browser.ListValidatorsAction::loadValidators():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionInvocation" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionInvocation::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionInvocation::createContextMap():java.util.Map" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.rest.RestActionInvocation" />
			<role name="State" element="org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="state" element="org.apache.struts2.rest.RestActionInvocation::handlerSelector:org.apache.struts2.rest.ContentTypeHandlerManager" />
			<role name="Request()" element="org.apache.struts2.rest.RestActionInvocation::processResult(com.opensymphony.xwork2.config.entities.ActionConfig, java.lang.Object):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor$RefreshModelBeforeResult" />
			<role name="State" element="com.opensymphony.xwork2.ModelDriven" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor$RefreshModelBeforeResult::action:com.opensymphony.xwork2.ModelDriven" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ModelDrivenInterceptor$RefreshModelBeforeResult::beforeResult(com.opensymphony.xwork2.ActionInvocation, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.ActionChainResult" />
			<role name="State" element="com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="state" element="com.opensymphony.xwork2.ActionChainResult::actionProxyFactory:com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionChainResult::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.views.gxp.GxpResult" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="org.apache.struts2.views.gxp.GxpResult::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="org.apache.struts2.views.gxp.GxpResult::getGxpClosure():com.google.gxp.html.HtmlClosure" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultUnknownHandlerManager" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.DefaultUnknownHandlerManager::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultUnknownHandlerManager::build():void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.DefaultActionProxy" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="com.opensymphony.xwork2.DefaultActionProxy::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="com.opensymphony.xwork2.DefaultActionProxy::prepare():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.DefaultInterceptorMapBuilder" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.convention.DefaultInterceptorMapBuilder::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.convention.DefaultInterceptorMapBuilder::buildInterceptorList(com.opensymphony.xwork2.config.entities.PackageConfig$Builder, org.apache.struts2.convention.annotation.InterceptorRef, java.util.Map):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler" />
			<role name="State" element="com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="state" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::objectTypeDeterminer:com.opensymphony.xwork2.conversion.ObjectTypeDeterminer" />
			<role name="Request()" element="com.opensymphony.xwork2.conversion.impl.InstantiatingNullHandler::createObject(java.lang.Class, java.lang.Object, java.lang.String, java.util.Map):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.inject.ContainerImpl$FieldInjector" />
			<role name="State" element="com.opensymphony.xwork2.inject.InternalFactory" />
			<role name="state" element="com.opensymphony.xwork2.inject.ContainerImpl$FieldInjector::factory:com.opensymphony.xwork2.inject.InternalFactory" />
			<role name="Request()" element="com.opensymphony.xwork2.inject.ContainerImpl$FieldInjector::inject(com.opensymphony.xwork2.inject.InternalContext, java.lang.Object):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor" />
			<role name="State" element="com.opensymphony.xwork2.inject.Container" />
			<role name="state" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::container:com.opensymphony.xwork2.inject.Container" />
			<role name="Request()" element="org.apache.struts2.interceptor.ExecuteAndWaitInterceptor::doIntercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="state" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="com.opensymphony.xwork2.interceptor.ChainingInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor" />
			<role name="State" element="org.apache.struts2.oval.interceptor.OValValidationManager" />
			<role name="state" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::validationManager:org.apache.struts2.oval.interceptor.OValValidationManager" />
			<role name="Request()" element="org.apache.struts2.oval.interceptor.OValValidationInterceptor::performOValValidation(java.lang.Object, com.opensymphony.xwork2.util.ValueStack, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="com.opensymphony.xwork2.validator.DefaultValidatorFileParser" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="com.opensymphony.xwork2.validator.DefaultValidatorFileParser::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="com.opensymphony.xwork2.validator.DefaultValidatorFileParser::addValidatorConfigs(com.opensymphony.xwork2.validator.ValidatorFactory, org.w3c.dom.NodeList, java.util.Map, java.util.List):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher" />
			<role name="State" element="com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="state" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::factory:com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="Request()" element="org.apache.struts2.portlet.dispatcher.Jsr168Dispatcher::serviceAction(javax.portlet.PortletRequest, javax.portlet.PortletResponse, java.util.Map, java.util.Map, java.util.Map, java.util.Map, java.lang.String, java.lang.Integer):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.HttpHeaderResultTest" />
			<role name="State" element="com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="state" element="org.apache.struts2.dispatcher.HttpHeaderResultTest::reflectionProvider:com.opensymphony.xwork2.util.reflection.ReflectionProvider" />
			<role name="Request()" element="org.apache.struts2.dispatcher.HttpHeaderResultTest::testHeaderValuesAreNotParsedWhenParseIsFalse():void" />
			<role name="Request()" element="org.apache.struts2.dispatcher.HttpHeaderResultTest::testHeaderValuesAreParsedAndSet():void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="Context" element="org.apache.struts2.components.ActionComponent" />
			<role name="state" element="org.apache.struts2.components.ActionComponent::actionProxyFactory:com.opensymphony.xwork2.ActionProxyFactory" />
			<role name="Request()" element="org.apache.struts2.components.ActionComponent::executeAction():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.components.Form" />
			<role name="State" element="com.opensymphony.xwork2.config.Configuration" />
			<role name="state" element="org.apache.struts2.components.Form::configuration:com.opensymphony.xwork2.config.Configuration" />
			<role name="Request()" element="org.apache.struts2.components.Form::evaluateClientSideJsEnablement(java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Context" element="org.apache.struts2.components.ActionComponent" />
			<role name="state" element="org.apache.struts2.components.ActionComponent::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Request()" element="org.apache.struts2.components.ActionComponent::createExtraContext():java.util.Map" />
		</instance>
		<instance>
			<role name="State" element="com.opensymphony.xwork2.validator.ActionValidatorManager" />
			<role name="Context" element="org.apache.struts2.components.Form" />
			<role name="state" element="org.apache.struts2.components.Form::actionValidatorManager:com.opensymphony.xwork2.validator.ActionValidatorManager" />
			<role name="Request()" element="org.apache.struts2.components.Form::getValidators(java.lang.String):java.util.List" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder" />
			<role name="State" element="org.apache.struts2.convention.ActionNameBuilder" />
			<role name="state" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::actionNameBuilder:org.apache.struts2.convention.ActionNameBuilder" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::determineActionNamespace(java.lang.Class):java.util.List" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::determineActionName(java.lang.Class):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder" />
			<role name="State" element="org.apache.struts2.convention.InterceptorMapBuilder" />
			<role name="state" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::interceptorMapBuilder:org.apache.struts2.convention.InterceptorMapBuilder" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::createActionConfig(com.opensymphony.xwork2.config.entities.PackageConfig$Builder, java.lang.Class, java.lang.String, java.lang.String, org.apache.struts2.convention.annotation.Action):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder" />
			<role name="State" element="org.apache.struts2.convention.ResultMapBuilder" />
			<role name="state" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::resultMapBuilder:org.apache.struts2.convention.ResultMapBuilder" />
			<role name="Request()" element="org.apache.struts2.convention.PackageBasedActionConfigBuilder::createActionConfig(com.opensymphony.xwork2.config.entities.PackageConfig$Builder, java.lang.Class, java.lang.String, java.lang.String, org.apache.struts2.convention.annotation.Action):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.Dispatcher" />
			<role name="State" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="state" element="org.apache.struts2.dispatcher.Dispatcher::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Request()" element="org.apache.struts2.dispatcher.Dispatcher::serviceAction(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, org.apache.struts2.dispatcher.mapper.ActionMapping):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.dispatcher.DefaultStaticContentLoader" />
			<role name="State" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="state" element="org.apache.struts2.dispatcher.DefaultStaticContentLoader::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Request()" element="org.apache.struts2.dispatcher.DefaultStaticContentLoader::process(java.io.InputStream, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.loaders.StaticContentBundleResourceLoader" />
			<role name="State" element="org.apache.struts2.osgi.BundleAccessor" />
			<role name="state" element="org.apache.struts2.osgi.loaders.StaticContentBundleResourceLoader::bundleAccessor:org.apache.struts2.osgi.BundleAccessor" />
			<role name="Request()" element="org.apache.struts2.osgi.loaders.StaticContentBundleResourceLoader::findResource(java.lang.String):java.net.URL" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.struts2.osgi.DefaultBundleAccessor" />
			<role name="State" element="org.apache.struts2.osgi.OsgiHost" />
			<role name="state" element="org.apache.struts2.osgi.DefaultBundleAccessor::osgiHost:org.apache.struts2.osgi.OsgiHost" />
			<role name="Request()" element="org.apache.struts2.osgi.DefaultBundleAccessor::getCurrentBundle():org.osgi.framework.Bundle" />
			<role name="Request()" element="org.apache.struts2.osgi.DefaultBundleAccessor::loadResourceFromAllBundles(java.lang.String):java.net.URL" />
		</instance>
	</pattern>
	<pattern name="Strategy" />
	<pattern name="Bridge">
		<instance>
			<role name="Abstraction" element="com.opensymphony.xwork2.interceptor.MethodFilterInterceptor" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="com.opensymphony.xwork2.interceptor.MethodFilterInterceptor::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="com.opensymphony.xwork2.interceptor.MethodFilterInterceptor::applyInterceptor(com.opensymphony.xwork2.ActionInvocation):boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.dojo.views.jsp.ui.AbstractTagTest" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="implementor" element="org.apache.struts2.dojo.views.jsp.ui.AbstractTagTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Operation()" element="org.apache.struts2.dojo.views.jsp.ui.AbstractTagTest::setUp():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.views.jsp.AbstractTagTest" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="implementor" element="org.apache.struts2.views.jsp.AbstractTagTest::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Operation()" element="org.apache.struts2.views.jsp.AbstractTagTest::setUp():void" />
		</instance>
		<instance>
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Abstraction" element="org.apache.struts2.components.ClosingUIBean" />
			<role name="implementor" element="org.apache.struts2.components.ClosingUIBean::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.components.ClosingUIBean::start(java.io.Writer):boolean" />
		</instance>
		<instance>
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Abstraction" element="org.apache.struts2.components.UIBean" />
			<role name="implementor" element="org.apache.struts2.components.UIBean::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.components.UIBean::mergeTemplate(java.io.Writer, org.apache.struts2.components.template.Template):void" />
			<role name="Operation()" element="org.apache.struts2.components.UIBean::evaluateParams():void" />
			<role name="Operation()" element="org.apache.struts2.components.UIBean::enableAncestorFormCustomOnsubmit():void" />
			<role name="Operation()" element="org.apache.struts2.components.UIBean::getTooltipConfig(org.apache.struts2.components.UIBean):java.util.Map" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.views.xslt.AbstractAdapterNode" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="org.apache.struts2.views.xslt.AbstractAdapterNode::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::getChildBeforeOrAfter(org.w3c.dom.Node, boolean):org.w3c.dom.Node" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::getChildAfter(org.w3c.dom.Node):org.w3c.dom.Node" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::getChildBefore(org.w3c.dom.Node):org.w3c.dom.Node" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::getChildNodes():org.w3c.dom.NodeList" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::getParentNode():org.w3c.dom.Node" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::getNextSibling():org.w3c.dom.Node" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::cloneNode(boolean):org.w3c.dom.Node" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.AbstractAdapterNode::normalize():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.views.xslt.ProxyNodeAdapter" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::getNodeName():java.lang.String" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::getNodeValue():java.lang.String" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::getNodeType():short" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::getAttributes():org.w3c.dom.NamedNodeMap" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::hasChildNodes():boolean" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::isSupported(java.lang.String, java.lang.String):boolean" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::getNamespaceURI():java.lang.String" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::getPrefix():java.lang.String" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::getLocalName():java.lang.String" />
			<role name="Operation()" element="org.apache.struts2.views.xslt.ProxyNodeAdapter::hasAttributes():boolean" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.components.template.BaseTemplateEngine" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="org.apache.struts2.components.template.BaseTemplateEngine::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.components.template.BaseTemplateEngine::tryToLoadPropertiesFromStream(java.util.Properties, java.lang.String, java.io.InputStream):void" />
			<role name="Operation()" element="org.apache.struts2.components.template.BaseTemplateEngine::tryCloseStream(java.io.InputStream):void" />
			<role name="Operation()" element="org.apache.struts2.components.template.BaseTemplateEngine::tryReadingPropertyFileFromFileSystem(java.lang.String):java.io.InputStream" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.opensymphony.xwork2.validator.validators.RepopulateConversionErrorFieldValidatorSupport" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="com.opensymphony.xwork2.validator.validators.RepopulateConversionErrorFieldValidatorSupport::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="com.opensymphony.xwork2.validator.validators.RepopulateConversionErrorFieldValidatorSupport::repopulateField(java.lang.Object):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::getMessage(java.lang.Object):java.lang.String" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.jasper.compiler.Compiler" />
			<role name="Implementor" element="org.apache.struts2.jasper.Options" />
			<role name="implementor" element="org.apache.struts2.jasper.compiler.Compiler::options:org.apache.struts2.jasper.Options" />
			<role name="Operation()" element="org.apache.struts2.jasper.compiler.Compiler::generateJava():java.lang.String[]" />
			<role name="Operation()" element="org.apache.struts2.jasper.compiler.Compiler::compile(boolean, boolean):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="implementor" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Operation()" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::getMessage(java.lang.Object):java.lang.String" />
			<role name="Operation()" element="com.opensymphony.xwork2.validator.validators.ValidatorSupport::getFieldValue(java.lang.String, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.opensymphony.xwork2.config.impl.AbstractMatcher" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.PatternMatcher" />
			<role name="implementor" element="com.opensymphony.xwork2.config.impl.AbstractMatcher::wildcard:com.opensymphony.xwork2.util.PatternMatcher" />
			<role name="Operation()" element="com.opensymphony.xwork2.config.impl.AbstractMatcher::addPattern(java.lang.String, E, boolean):void" />
			<role name="Operation()" element="com.opensymphony.xwork2.config.impl.AbstractMatcher::match(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.dojo.views.jsp.ui.AbstractUITagTest" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="org.apache.struts2.dojo.views.jsp.ui.AbstractUITagTest::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.dojo.views.jsp.ui.AbstractUITagTest::verifyGenericProperties(org.apache.struts2.views.jsp.ui.AbstractUITag, java.lang.String, java.util.Map, java.lang.String[]):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.views.jsp.AbstractUITagTest" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="org.apache.struts2.views.jsp.AbstractUITagTest::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.views.jsp.AbstractUITagTest::verifyGenericProperties(org.apache.struts2.views.jsp.ui.AbstractUITag, java.lang.String, java.util.Map, java.lang.String[]):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="com.opensymphony.xwork2.config.impl.AbstractMatcher" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="com.opensymphony.xwork2.config.impl.AbstractMatcher::log:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="com.opensymphony.xwork2.config.impl.AbstractMatcher::addPattern(java.lang.String, E, boolean):void" />
			<role name="Operation()" element="com.opensymphony.xwork2.config.impl.AbstractMatcher::match(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.sitegraph.entities.FileBasedView" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="org.apache.struts2.sitegraph.entities.FileBasedView::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.sitegraph.entities.FileBasedView::readFile(java.io.File):java.lang.String" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.views.freemarker.tags.TagModel" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.ValueStack" />
			<role name="implementor" element="org.apache.struts2.views.freemarker.tags.TagModel::stack:com.opensymphony.xwork2.util.ValueStack" />
			<role name="Operation()" element="org.apache.struts2.views.freemarker.tags.TagModel::getWriter(java.io.Writer, java.util.Map):java.io.Writer" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.views.freemarker.tags.TagModel" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.logging.Logger" />
			<role name="implementor" element="org.apache.struts2.views.freemarker.tags.TagModel::LOG:com.opensymphony.xwork2.util.logging.Logger" />
			<role name="Operation()" element="org.apache.struts2.views.freemarker.tags.TagModel::unwrapParameters(java.util.Map):java.util.Map" />
			<role name="Operation()" element="org.apache.struts2.views.freemarker.tags.TagModel::getComplexParams(java.util.Map):java.util.Map" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.struts2.views.gxp.AbstractGxp" />
			<role name="Implementor" element="com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="implementor" element="org.apache.struts2.views.gxp.AbstractGxp::valueStackFactory:com.opensymphony.xwork2.util.ValueStackFactory" />
			<role name="Operation()" element="org.apache.struts2.views.gxp.AbstractGxp::getArgListFromValueStack(java.util.Map):java.util.List" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="com.opensymphony.xwork2.config.impl.AbstractMatcher" />
			<role name="TemplateMethod()" element="com.opensymphony.xwork2.config.impl.AbstractMatcher::match(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.opensymphony.xwork2.interceptor.MethodFilterInterceptor" />
			<role name="TemplateMethod()" element="com.opensymphony.xwork2.interceptor.MethodFilterInterceptor::intercept(com.opensymphony.xwork2.ActionInvocation):java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.opensymphony.xwork2.util.logging.LoggerFactory" />
			<role name="TemplateMethod()" element="com.opensymphony.xwork2.util.logging.LoggerFactory::getLogger(java.lang.Class):com.opensymphony.xwork2.util.logging.Logger" />
			<role name="TemplateMethod()" element="com.opensymphony.xwork2.util.logging.LoggerFactory::getLogger(java.lang.String):com.opensymphony.xwork2.util.logging.Logger" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.opensymphony.xwork2.util.profiling.UtilTimerStackTest$MockProfilingBlock" />
			<role name="TemplateMethod()" element="com.opensymphony.xwork2.util.profiling.UtilTimerStackTest$MockProfilingBlock::doProfiling():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.opensymphony.xwork2.validator.metadata.AbstractFieldValidatorDescription" />
			<role name="TemplateMethod()" element="com.opensymphony.xwork2.validator.metadata.AbstractFieldValidatorDescription::asXml():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.opensymphony.xwork2.validator.validators.AbstractRangeValidator" />
			<role name="TemplateMethod()" element="com.opensymphony.xwork2.validator.validators.AbstractRangeValidator::validate(java.lang.Object):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="com.opensymphony.xwork2.validator.validators.RepopulateConversionErrorFieldValidatorSupport" />
			<role name="TemplateMethod()" element="com.opensymphony.xwork2.validator.validators.RepopulateConversionErrorFieldValidatorSupport::validate(java.lang.Object):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.components.ClosingUIBean" />
			<role name="TemplateMethod()" element="org.apache.struts2.components.ClosingUIBean::start(java.io.Writer):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.components.FormButton" />
			<role name="TemplateMethod()" element="org.apache.struts2.components.FormButton::evaluateExtraParams():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.components.template.BaseTemplateEngine" />
			<role name="TemplateMethod()" element="org.apache.struts2.components.template.BaseTemplateEngine::getFinalTemplateName(org.apache.struts2.components.template.Template):java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.components.UIBean" />
			<role name="TemplateMethod()" element="org.apache.struts2.components.UIBean::end(java.io.Writer, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.dispatcher.StrutsResultSupport" />
			<role name="TemplateMethod()" element="org.apache.struts2.dispatcher.StrutsResultSupport::execute(com.opensymphony.xwork2.ActionInvocation):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.el.lang.ELArithmetic" />
			<role name="TemplateMethod()" element="org.apache.struts2.el.lang.ELArithmetic::add(java.lang.Object, java.lang.Object):java.lang.Number" />
			<role name="TemplateMethod()" element="org.apache.struts2.el.lang.ELArithmetic::mod(java.lang.Object, java.lang.Object):java.lang.Number" />
			<role name="TemplateMethod()" element="org.apache.struts2.el.lang.ELArithmetic::subtract(java.lang.Object, java.lang.Object):java.lang.Number" />
			<role name="TemplateMethod()" element="org.apache.struts2.el.lang.ELArithmetic::divide(java.lang.Object, java.lang.Object):java.lang.Number" />
			<role name="TemplateMethod()" element="org.apache.struts2.el.lang.ELArithmetic::multiply(java.lang.Object, java.lang.Object):java.lang.Number" />
			<role name="TemplateMethod()" element="org.apache.struts2.el.lang.ELArithmetic::coerce(java.lang.Object):java.lang.Number" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.jasper.compiler.Compiler" />
			<role name="TemplateMethod()" element="org.apache.struts2.jasper.compiler.Compiler::compile(boolean, boolean):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.jasper.runtime.HttpJspBase" />
			<role name="TemplateMethod()" element="org.apache.struts2.jasper.runtime.HttpJspBase::service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.json.JSONCleaner" />
			<role name="TemplateMethod()" element="org.apache.struts2.json.JSONCleaner::clean(java.lang.String, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.portlet.test.BasePortletTest" />
			<role name="TemplateMethod()" element="org.apache.struts2.portlet.test.BasePortletTest::setUp():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.showcase.action.AbstractCRUDAction" />
			<role name="TemplateMethod()" element="org.apache.struts2.showcase.action.AbstractCRUDAction::list():java.lang.String" />
			<role name="TemplateMethod()" element="org.apache.struts2.showcase.action.AbstractCRUDAction::delete():java.lang.String" />
			<role name="TemplateMethod()" element="org.apache.struts2.showcase.action.AbstractCRUDAction::fetch(java.io.Serializable, org.apache.struts2.showcase.model.IdEntity):org.apache.struts2.showcase.model.IdEntity" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.sitegraph.entities.FileBasedView" />
			<role name="TemplateMethod()" element="org.apache.struts2.sitegraph.entities.FileBasedView::getTargets():java.util.Set" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.sitegraph.model.SiteGraphNode" />
			<role name="TemplateMethod()" element="org.apache.struts2.sitegraph.model.SiteGraphNode::render(org.apache.struts2.sitegraph.model.IndentWriter):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsDecorator" />
			<role name="TemplateMethod()" element="org.apache.struts2.sitemesh.OldDecorator2NewStrutsDecorator::render(com.opensymphony.sitemesh.Content, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, javax.servlet.ServletContext, com.opensymphony.sitemesh.webapp.SiteMeshWebAppContext):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.util.StrutsTypeConverter" />
			<role name="TemplateMethod()" element="org.apache.struts2.util.StrutsTypeConverter::convertValue(java.util.Map, java.lang.Object, java.lang.Class):java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.views.freemarker.tags.TagModel" />
			<role name="TemplateMethod()" element="org.apache.struts2.views.freemarker.tags.TagModel::getWriter(java.io.Writer, java.util.Map):java.io.Writer" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.views.java.simple.AbstractMessageListHandler" />
			<role name="TemplateMethod()" element="org.apache.struts2.views.java.simple.AbstractMessageListHandler::generate():void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.views.jsp.ComponentTagSupport" />
			<role name="TemplateMethod()" element="org.apache.struts2.views.jsp.ComponentTagSupport::doStartTag():int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.struts2.views.velocity.components.AbstractDirective" />
			<role name="TemplateMethod()" element="org.apache.struts2.views.velocity.components.AbstractDirective::getName():java.lang.String" />
			<role name="TemplateMethod()" element="org.apache.struts2.views.velocity.components.AbstractDirective::render(org.apache.velocity.context.InternalContextAdapter, java.io.Writer, org.apache.velocity.runtime.parser.node.Node):boolean" />
		</instance>
	</pattern>
	<pattern name="Visitor">
		<instance>
			<role name="ConcreteElement" element="org.apache.struts2.el.parser.SimpleNode" />
			<role name="Visitor" element="org.apache.struts2.el.parser.NodeVisitor" />
			<role name="Accept()" element="org.apache.struts2.el.parser.SimpleNode::accept(org.apache.struts2.el.parser.NodeVisitor):void" />
		</instance>
	</pattern>
	<pattern name="Proxy">
		<instance>
			<role name="Proxy" element="com.opensymphony.xwork2.ActionSupport" />
			<role name="RealSubject" element="com.opensymphony.xwork2.ValidationAwareSupport" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::setActionErrors(java.util.Collection):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::getActionErrors():java.util.Collection" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::setActionMessages(java.util.Collection):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::getActionMessages():java.util.Collection" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::setFieldErrors(java.util.Map):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::getFieldErrors():java.util.Map" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::addActionError(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::addActionMessage(java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::addFieldError(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::hasActionErrors():boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::hasActionMessages():boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::hasErrors():boolean" />
			<role name="Request()" element="com.opensymphony.xwork2.ActionSupport::hasFieldErrors():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="org.apache.struts2.config.ClasspathPackageProvider$ServletContextPageLocator" />
			<role name="RealSubject" element="org.apache.struts2.config.ClasspathPackageProvider$ClasspathPageLocator" />
			<role name="Request()" element="org.apache.struts2.config.ClasspathPackageProvider$ServletContextPageLocator::locate(java.lang.String):java.net.URL" />
		</instance>
	</pattern>
	<pattern name="Proxy2">
		<instance>
			<role name="Proxy" element="org.apache.struts2.components.PortletUrlRenderer" />
			<role name="RealSubject" element="org.apache.struts2.components.ServletUrlRenderer" />
			<role name="Subject" element="org.apache.struts2.components.UrlRenderer" />
			<role name="subject" element="org.apache.struts2.components.PortletUrlRenderer::servletRenderer:org.apache.struts2.components.UrlRenderer" />
			<role name="Request()" element="org.apache.struts2.components.PortletUrlRenderer::setActionMapper(org.apache.struts2.dispatcher.mapper.ActionMapper):void" />
			<role name="Request()" element="org.apache.struts2.components.PortletUrlRenderer::renderUrl(java.io.Writer, org.apache.struts2.components.UrlProvider):void" />
			<role name="Request()" element="org.apache.struts2.components.PortletUrlRenderer::renderFormUrl(org.apache.struts2.components.Form):void" />
			<role name="Request()" element="org.apache.struts2.components.PortletUrlRenderer::beforeRenderUrl(org.apache.struts2.components.UrlProvider):void" />
		</instance>
	</pattern>
	<pattern name="Chain of Responsibility">
		<instance>
			<role name="Handler" element="org.apache.struts2.jasper.compiler.Node" />
			<role name="successor" element="org.apache.struts2.jasper.compiler.Node::parent:org.apache.struts2.jasper.compiler.Node" />
		</instance>
	</pattern>
</system>

