<?xml version="1.0" encoding="UTF-8"?>
<system>
	<pattern name="Factory Method">
		<instance>
			<role name="Creator" element="javax.xml.transform.sax.SAXTransformerFactory" />
			<role name="FactoryMethod()" element="javax.xml.transform.sax.SAXTransformerFactory::newTemplatesHandler():javax.xml.transform.sax.TemplatesHandler" />
			<role name="FactoryMethod()" element="javax.xml.transform.sax.SAXTransformerFactory::newXMLFilter(javax.xml.transform.Templates):org.xml.sax.XMLFilter" />
			<role name="FactoryMethod()" element="javax.xml.transform.sax.SAXTransformerFactory::newTransformerHandler():javax.xml.transform.sax.TransformerHandler" />
			<role name="FactoryMethod()" element="javax.xml.transform.sax.SAXTransformerFactory::newTransformerHandler(javax.xml.transform.Source):javax.xml.transform.sax.TransformerHandler" />
			<role name="FactoryMethod()" element="javax.xml.transform.sax.SAXTransformerFactory::newTransformerHandler(javax.xml.transform.Templates):javax.xml.transform.sax.TransformerHandler" />
		</instance>
		<instance>
			<role name="Creator" element="javax.xml.transform.Templates" />
			<role name="FactoryMethod()" element="javax.xml.transform.Templates::newTransformer():javax.xml.transform.Transformer" />
		</instance>
		<instance>
			<role name="Creator" element="javax.xml.xpath.XPath" />
			<role name="FactoryMethod()" element="javax.xml.xpath.XPath::compile(java.lang.String):javax.xml.xpath.XPathExpression" />
		</instance>
		<instance>
			<role name="Creator" element="javax.xml.xpath.XPathFactory" />
			<role name="FactoryMethod()" element="javax.xml.xpath.XPathFactory::newXPath():javax.xml.xpath.XPath" />
		</instance>
		<instance>
			<role name="Creator" element="javax.xml.xpath.XPathFunctionResolver" />
			<role name="FactoryMethod()" element="javax.xml.xpath.XPathFunctionResolver::resolveFunction(javax.xml.namespace.QName, int):javax.xml.xpath.XPathFunction" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xalan.extensions.ExpressionContext" />
			<role name="FactoryMethod()" element="org.apache.xalan.extensions.ExpressionContext::getContextNodes():org.w3c.dom.traversal.NodeIterator" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xalan.serialize.Serializer" />
			<role name="FactoryMethod()" element="org.apache.xalan.serialize.Serializer::asDOMSerializer():org.apache.xalan.serialize.DOMSerializer" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xalan.transformer.TransformState" />
			<role name="FactoryMethod()" element="org.apache.xalan.transformer.TransformState::getContextNodeList():org.w3c.dom.traversal.NodeIterator" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xalan.xsltc.DOM" />
			<role name="FactoryMethod()" element="org.apache.xalan.xsltc.DOM::getTypedChildren(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="FactoryMethod()" element="org.apache.xalan.xsltc.DOM::getAxisIterator(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="FactoryMethod()" element="org.apache.xalan.xsltc.DOM::getTypedAxisIterator(int, int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="FactoryMethod()" element="org.apache.xalan.xsltc.DOM::getNodeValueIterator(org.apache.xml.dtm.DTMAxisIterator, int, java.lang.String, boolean):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="FactoryMethod()" element="org.apache.xalan.xsltc.DOM::getIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="FactoryMethod()" element="org.apache.xalan.xsltc.DOM::getChildren(int):org.apache.xml.dtm.DTMAxisIterator" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xml.dtm.DTM" />
			<role name="FactoryMethod()" element="org.apache.xml.dtm.DTM::getAxisIterator(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="FactoryMethod()" element="org.apache.xml.dtm.DTM::getTypedAxisIterator(int, int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="FactoryMethod()" element="org.apache.xml.dtm.DTM::getStringValue(int):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.dtm.DTM::getNode(int):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xml.dtm.DTMManager" />
			<role name="FactoryMethod()" element="org.apache.xml.dtm.DTMManager::getDTM(javax.xml.transform.Source, boolean, org.apache.xml.dtm.DTMWSFilter, boolean, boolean):org.apache.xml.dtm.DTM" />
			<role name="FactoryMethod()" element="org.apache.xml.dtm.DTMManager::createDTMIterator(int):org.apache.xml.dtm.DTMIterator" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xml.dtm.ref.DTMDefaultBase" />
			<role name="FactoryMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::getAxisTraverser(int):org.apache.xml.dtm.DTMAxisTraverser" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::fixWhiteSpace(boolean, boolean, boolean):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::substring(int):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::substring(int, int):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::concat(java.lang.String):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::toLowerCase(java.util.Locale):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::toLowerCase():org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::toUpperCase(java.util.Locale):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::toUpperCase():org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLString::trim():org.apache.xml.utils.XMLString" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xml.utils.XMLStringFactory" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLStringFactory::newstr(java.lang.String):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLStringFactory::newstr(org.apache.xml.utils.FastStringBuffer, int, int):org.apache.xml.utils.XMLString" />
			<role name="FactoryMethod()" element="org.apache.xml.utils.XMLStringFactory::newstr(char[], int, int):org.apache.xml.utils.XMLString" />
		</instance>
		<instance>
			<role name="Creator" element="org.apache.xpath.operations.UnaryOperation" />
			<role name="FactoryMethod()" element="org.apache.xpath.operations.UnaryOperation::operate(org.apache.xpath.objects.XObject):org.apache.xpath.objects.XObject" />
		</instance>
		<instance>
			<role name="Creator" element="org.w3c.dom.Document" />
			<role name="FactoryMethod()" element="org.w3c.dom.Document::getElementsByTagName(java.lang.String):org.w3c.dom.NodeList" />
			<role name="FactoryMethod()" element="org.w3c.dom.Document::getElementsByTagNameNS(java.lang.String, java.lang.String):org.w3c.dom.NodeList" />
		</instance>
		<instance>
			<role name="Creator" element="org.w3c.dom.DOMConfiguration" />
			<role name="FactoryMethod()" element="org.w3c.dom.DOMConfiguration::getParameterNames():org.w3c.dom.DOMStringList" />
		</instance>
		<instance>
			<role name="Creator" element="org.w3c.dom.Element" />
			<role name="FactoryMethod()" element="org.w3c.dom.Element::getElementsByTagName(java.lang.String):org.w3c.dom.NodeList" />
			<role name="FactoryMethod()" element="org.w3c.dom.Element::getElementsByTagNameNS(java.lang.String, java.lang.String):org.w3c.dom.NodeList" />
		</instance>
		<instance>
			<role name="Creator" element="org.w3c.dom.Node" />
			<role name="FactoryMethod()" element="org.w3c.dom.Node::getChildNodes():org.w3c.dom.NodeList" />
			<role name="FactoryMethod()" element="org.w3c.dom.Node::getAttributes():org.w3c.dom.NamedNodeMap" />
		</instance>
		<instance>
			<role name="Creator" element="org.w3c.dom.xpath.XPathEvaluator" />
			<role name="FactoryMethod()" element="org.w3c.dom.xpath.XPathEvaluator::createExpression(java.lang.String, org.w3c.dom.xpath.XPathNSResolver):org.w3c.dom.xpath.XPathExpression" />
			<role name="FactoryMethod()" element="org.w3c.dom.xpath.XPathEvaluator::createNSResolver(org.w3c.dom.Node):org.w3c.dom.xpath.XPathNSResolver" />
		</instance>
	</pattern>
	<pattern name="Prototype">
		<instance>
			<role name="Prototype" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Client" element="org.apache.xpath.axes.UnionPathIterator" />
			<role name="prototype" element="org.apache.xpath.axes.UnionPathIterator::m_iterators:org.apache.xml.dtm.DTMIterator[]" />
			<role name="Operation()" element="org.apache.xpath.axes.UnionPathIterator::clone():java.lang.Object" />
		</instance>
		<instance>
			<role name="Prototype" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Client" element="org.apache.xpath.axes.NodeSequence" />
			<role name="prototype" element="org.apache.xpath.axes.NodeSequence::m_iter:org.apache.xml.dtm.DTMIterator" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::clone():java.lang.Object" />
		</instance>
		<instance>
			<role name="Prototype" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Client" element="org.apache.xpath.axes.IteratorPool" />
			<role name="prototype" element="org.apache.xpath.axes.IteratorPool::m_orig:org.apache.xml.dtm.DTMIterator" />
			<role name="Operation()" element="org.apache.xpath.axes.IteratorPool::getInstanceOrThrow():org.apache.xml.dtm.DTMIterator" />
			<role name="Operation()" element="org.apache.xpath.axes.IteratorPool::getInstance():org.apache.xml.dtm.DTMIterator" />
		</instance>
		<instance>
			<role name="Client" element="org.apache.xml.dtm.ref.DTMNodeIterator" />
			<role name="Prototype" element="org.apache.xml.dtm.DTMIterator" />
			<role name="prototype" element="org.apache.xml.dtm.ref.DTMNodeIterator::dtm_iter:org.apache.xml.dtm.DTMIterator" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.DTMNodeIterator(org.apache.xml.dtm.DTMIterator)" />
		</instance>
		<instance>
			<role name="Client" element="org.apache.xalan.transformer.TransformSnapshotImpl" />
			<role name="Prototype" element="org.apache.xml.dtm.DTMIterator" />
			<role name="prototype" element="org.apache.xalan.transformer.TransformSnapshotImpl::m_contextNodeList:org.apache.xml.dtm.DTMIterator" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformSnapshotImpl::apply(org.apache.xalan.transformer.TransformerImpl):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformSnapshotImpl(org.apache.xalan.transformer.TransformerImpl)" />
		</instance>
	</pattern>
	<pattern name="Singleton">
		<instance>
			<role name="Singleton" element="org.apache.xalan.processor.XSLTAttributeDef" />
			<role name="uniqueInstance" element="org.apache.xalan.processor.XSLTAttributeDef::m_foreignAttr:org.apache.xalan.processor.XSLTAttributeDef" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.xalan.xsltc.compiler.SyntaxTreeNode" />
			<role name="uniqueInstance" element="org.apache.xalan.xsltc.compiler.SyntaxTreeNode::Dummy:org.apache.xalan.xsltc.compiler.SyntaxTreeNode" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.xml.dtm.ref.EmptyIterator" />
			<role name="uniqueInstance" element="org.apache.xml.dtm.ref.EmptyIterator::INSTANCE:org.apache.xml.dtm.ref.EmptyIterator" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.xml.utils.XMLReaderManager" />
			<role name="uniqueInstance" element="org.apache.xml.utils.XMLReaderManager::m_singletonManager:org.apache.xml.utils.XMLReaderManager" />
		</instance>
		<instance>
			<role name="Singleton" element="org.apache.xpath.objects.XString" />
			<role name="uniqueInstance" element="org.apache.xpath.objects.XString::EMPTYSTRING:org.apache.xpath.objects.XString" />
		</instance>
	</pattern>
	<pattern name="(Object)Adapter">
		<instance>
			<role name="Adaptee" element="org.apache.xpath.Expression" />
			<role name="Adapter" element="org.apache.xpath.functions.FuncExtFunction$ArgExtOwner" />
			<role name="adaptee" element="org.apache.xpath.functions.FuncExtFunction$ArgExtOwner::m_exp:org.apache.xpath.Expression" />
			<role name="Request()" element="org.apache.xpath.functions.FuncExtFunction$ArgExtOwner::setExpression(org.apache.xpath.Expression):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.Expression" />
			<role name="Adapter" element="org.apache.xpath.XPath" />
			<role name="adaptee" element="org.apache.xpath.XPath::m_mainExp:org.apache.xpath.Expression" />
			<role name="Request()" element="org.apache.xpath.XPath::setExpression(org.apache.xpath.Expression):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.utils.QName" />
			<role name="Adapter" element="org.apache.xpath.operations.Variable" />
			<role name="adaptee" element="org.apache.xpath.operations.Variable::m_qname:org.apache.xml.utils.QName" />
			<role name="Request()" element="org.apache.xpath.operations.Variable::fixupVariables(java.util.Vector, int):void" />
			<role name="Request()" element="org.apache.xpath.operations.Variable::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.axes.IteratorPool" />
			<role name="Adapter" element="org.apache.xpath.axes.LocPathIterator" />
			<role name="adaptee" element="org.apache.xpath.axes.LocPathIterator::m_clones:org.apache.xpath.axes.IteratorPool" />
			<role name="Request()" element="org.apache.xpath.axes.LocPathIterator::detach():void" />
			<role name="Request()" element="org.apache.xpath.axes.LocPathIterator::cloneWithReset():org.apache.xml.dtm.DTMIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.axes.NodeSequence$IteratorCache" />
			<role name="Adapter" element="org.apache.xpath.axes.NodeSequence" />
			<role name="adaptee" element="org.apache.xpath.axes.NodeSequence::m_cache:org.apache.xpath.axes.NodeSequence$IteratorCache" />
			<role name="Request()" element="org.apache.xpath.axes.NodeSequence::setItem(int, int):void" />
			<role name="Request()" element="org.apache.xpath.axes.NodeSequence::cloneWithReset():org.apache.xml.dtm.DTMIterator" />
			<role name="Request()" element="org.apache.xpath.axes.NodeSequence::clone():java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.utils.FastStringBuffer" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.DTMDocumentImpl" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMDocumentImpl::m_char:org.apache.xml.utils.FastStringBuffer" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getStringValue(int):org.apache.xml.utils.XMLString" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getNodeValue(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.utils.FastStringBuffer" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::m_chars:org.apache.xml.utils.FastStringBuffer" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::characters(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.ref.ChunkedIntArray" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.DTMDocumentImpl" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMDocumentImpl::nodes:org.apache.xml.dtm.ref.ChunkedIntArray" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getFirstChild(int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getAttributeNode(int, java.lang.String, java.lang.String):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getFirstAttribute(int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getNextSibling(int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getPreviousSibling(int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getNextAttribute(int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getParent(int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getStringValue(int):org.apache.xml.utils.XMLString" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getExpandedTypeID(int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getNodeName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getLocalName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getPrefix(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getNodeValue(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getNodeType(int):short" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getLevel(int):short" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.utils.SuballocatedIntVector" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::m_data:org.apache.xml.utils.SuballocatedIntVector" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.SAXImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.SAXImpl::_nsIndex:org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.SAXImpl::_node2Ids:org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.SAXImpl::getNamespaceMapping(java.lang.String[]):short[]" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.SAXImpl::getReverseNamespaceMapping(java.lang.String[]):short[]" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.SAXImpl::getElementById(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="Adaptee" element="org.apache.xml.dtm.DTM" />
			<role name="adaptee" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startDocument():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endDocument():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::setSystemId(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.templates.OutputProperties" />
			<role name="Adapter" element="org.apache.xalan.transformer.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.transformer.TransformerImpl::m_outputFormat:org.apache.xalan.templates.OutputProperties" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::setOutputProperty(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::setOutputProperties(java.util.Properties):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.templates.StylesheetRoot" />
			<role name="Adapter" element="org.apache.xalan.transformer.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.transformer.TransformerImpl::m_stylesheetRoot:org.apache.xalan.templates.StylesheetRoot" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::getShouldStripSpace(int, org.apache.xml.dtm.DTM):short" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::setOutputProperties(java.util.Properties):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.templates.OutputProperties" />
			<role name="Adapter" element="org.apache.xalan.transformer.TransformerIdentityImpl" />
			<role name="adaptee" element="org.apache.xalan.transformer.TransformerIdentityImpl::m_outputFormat:org.apache.xalan.templates.OutputProperties" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::setOutputProperties(java.util.Properties):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::getOutputProperties():java.util.Properties" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::setOutputProperty(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::getOutputProperty(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.dom.BitArray" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.SimpleResultTreeImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.SimpleResultTreeImpl::_dontEscape:org.apache.xalan.xsltc.dom.BitArray" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.SimpleResultTreeImpl::characters(int, org.apache.xml.serializer.SerializationHandler):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.XPathContext" />
			<role name="Adapter" element="org.apache.xpath.axes.LocPathIterator" />
			<role name="adaptee" element="org.apache.xpath.axes.LocPathIterator::m_execContext:org.apache.xpath.XPathContext" />
			<role name="Request()" element="org.apache.xpath.axes.LocPathIterator::getDTM(int):org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xpath.axes.LocPathIterator::getDTMManager():org.apache.xml.dtm.DTMManager" />
			<role name="Request()" element="org.apache.xpath.axes.LocPathIterator::setRoot(int, java.lang.Object):void" />
			<role name="Request()" element="org.apache.xpath.axes.LocPathIterator::getLength():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="javax.xml.transform.URIResolver" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TransformerImpl::_uriResolver:javax.xml.transform.URIResolver" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::retrieveDocument(java.lang.String, java.lang.String, org.apache.xalan.xsltc.Translet):org.apache.xalan.xsltc.DOM" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TransformerImpl::_parameters:org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::setParameter(java.lang.String, java.lang.Object):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::clearParameters():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::getParameter(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.runtime.output.TransletOutputHandlerFactory" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TransformerImpl::_tohFactory:org.apache.xalan.xsltc.runtime.output.TransletOutputHandlerFactory" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::transform(javax.xml.transform.Source, javax.xml.transform.Result):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.Node" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.SAX2DOM" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.SAX2DOM::_lastSibling:org.w3c.dom.Node" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.SAX2DOM::_root:org.w3c.dom.Node" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.SAX2DOM::_nextSibling:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.Node" />
			<role name="Adapter" element="org.apache.xml.utils.DOMBuilder" />
			<role name="adaptee" element="org.apache.xml.utils.DOMBuilder::m_currentNode:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::characters(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.Document" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.SAXImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.SAXImpl::_document:org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.SAXImpl::getElementById(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.Document" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.SAX2DOM" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.SAX2DOM::_document:org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.Document" />
			<role name="Adapter" element="org.apache.xml.utils.DOMBuilder" />
			<role name="adaptee" element="org.apache.xml.utils.DOMBuilder::m_doc:org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::comment(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::startCDATA():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="javax.xml.transform.URIResolver" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TransformerFactoryImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TransformerFactoryImpl::_uriResolver:javax.xml.transform.URIResolver" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerFactoryImpl::loadSource(java.lang.String, java.lang.String, org.apache.xalan.xsltc.compiler.XSLTC):org.xml.sax.InputSource" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.CharInfo" />
			<role name="Adapter" element="org.apache.xml.serializer.ToStream" />
			<role name="adaptee" element="org.apache.xml.serializer.ToStream::m_charInfo:org.apache.xml.serializer.CharInfo" />
			<role name="Request()" element="org.apache.xml.serializer.ToStream::setOutputFormat(java.util.Properties):void" />
			<role name="Request()" element="org.apache.xml.serializer.ToStream::characters(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.EncodingInfo" />
			<role name="Adapter" element="org.apache.xml.serializer.ToStream" />
			<role name="adaptee" element="org.apache.xml.serializer.ToStream::m_encodingInfo:org.apache.xml.serializer.EncodingInfo" />
			<role name="Request()" element="org.apache.xml.serializer.ToStream::characters(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.ToStream$BoolStack" />
			<role name="Adapter" element="org.apache.xml.serializer.ToStream" />
			<role name="adaptee" element="org.apache.xml.serializer.ToStream::m_disableOutputEscapingStates:org.apache.xml.serializer.ToStream$BoolStack" />
			<role name="adaptee" element="org.apache.xml.serializer.ToStream::m_preserves:org.apache.xml.serializer.ToStream$BoolStack" />
			<role name="Request()" element="org.apache.xml.serializer.ToStream::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.serializer.ToStream::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.ref.CoroutineManager" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::fCoroutineManager:org.apache.xml.dtm.ref.CoroutineManager" />
			<role name="Request()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::deliverMoreNodes(boolean):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.XPath" />
			<role name="Adapter" element="org.apache.xalan.templates.AVTPartXPath" />
			<role name="adaptee" element="org.apache.xalan.templates.AVTPartXPath::m_xpath:org.apache.xpath.XPath" />
			<role name="Request()" element="org.apache.xalan.templates.AVTPartXPath::fixupVariables(java.util.Vector, int):void" />
			<role name="Request()" element="org.apache.xalan.templates.AVTPartXPath::getSimpleString():java.lang.String" />
			<role name="Request()" element="org.apache.xalan.templates.AVTPartXPath::evaluate(org.apache.xpath.XPathContext, org.apache.xml.utils.FastStringBuffer, int, org.apache.xml.utils.PrefixResolver):void" />
			<role name="Request()" element="org.apache.xalan.templates.AVTPartXPath::callVisitors(org.apache.xalan.templates.XSLTVisitor):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.StripFilter" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.DOMWSFilter" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.DOMWSFilter::m_filter:org.apache.xalan.xsltc.StripFilter" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMWSFilter::getShouldStripSpace(int, org.apache.xml.dtm.DTM):short" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.DOMWSFilter" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.DOMWSFilter::m_mappings:org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMWSFilter::getShouldStripSpace(int, org.apache.xml.dtm.DTM):short" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator" />
			<role name="Adaptee" element="org.apache.xalan.xsltc.util.IntegerArray" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::_nodes:org.apache.xalan.xsltc.util.IntegerArray" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::next():int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.DupFilterIterator" />
			<role name="Adaptee" element="org.apache.xalan.xsltc.util.IntegerArray" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.DupFilterIterator::_nodes:org.apache.xalan.xsltc.util.IntegerArray" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DupFilterIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DupFilterIterator::next():int" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xalan.transformer.TransformerImpl" />
			<role name="Adaptee" element="org.apache.xalan.trace.TraceManager" />
			<role name="adaptee" element="org.apache.xalan.transformer.TransformerImpl::m_traceManager:org.apache.xalan.trace.TraceManager" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::fireGenerateEvent(int, char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::fireGenerateEvent(int, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::fireGenerateEvent(int, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::fireGenerateEvent(int, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::fireGenerateEvent(int):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::hasTraceListeners():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.InputSource" />
			<role name="Adapter" element="javax.xml.transform.sax.SAXSource" />
			<role name="adaptee" element="javax.xml.transform.sax.SAXSource::inputSource:org.xml.sax.InputSource" />
			<role name="Request()" element="javax.xml.transform.sax.SAXSource::setSystemId(java.lang.String):void" />
			<role name="Request()" element="javax.xml.transform.sax.SAXSource::getSystemId():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTM" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.DTMNodeProxy" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMNodeProxy::dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNodeName():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getLocalName():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getPrefix():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNamespaceURI():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNodeValue():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNodeType():short" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getParentNode():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getFirstChild():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getLastChild():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getPreviousSibling():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNextSibling():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getOwnerDocument():org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::hasChildNodes():boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::hasAttributes():boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getDocumentElement():org.w3c.dom.Element" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getElementsByTagName(java.lang.String):org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getElementsByTagNameNS(java.lang.String, java.lang.String):org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getElementById(java.lang.String):org.w3c.dom.Element" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::hasAttribute(java.lang.String):boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::hasAttributeNS(java.lang.String, java.lang.String):boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getTagName():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getAttributeNS(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getAttributeNodeNS(java.lang.String, java.lang.String):org.w3c.dom.Attr" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getName():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getValue():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getOwnerElement():org.w3c.dom.Element" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getTarget():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getData():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.ContentHandler" />
			<role name="Adapter" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.ParserAdapter::contentHandler:org.xml.sax.ContentHandler" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startDocument():void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::endDocument():void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startElement(java.lang.String, org.xml.sax.AttributeList):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::endElement(java.lang.String):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::characters(char[], int, int):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::processingInstruction(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.XMLReader" />
			<role name="Adapter" element="org.xml.sax.helpers.XMLReaderAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.XMLReaderAdapter::xmlReader:org.xml.sax.XMLReader" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setEntityResolver(org.xml.sax.EntityResolver):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setDTDHandler(org.xml.sax.DTDHandler):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setErrorHandler(org.xml.sax.ErrorHandler):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::parse(org.xml.sax.InputSource):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="javax.xml.transform.URIResolver" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::_uriResolver:javax.xml.transform.URIResolver" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::loadSource(java.lang.String, java.lang.String, org.apache.xalan.xsltc.compiler.XSLTC):org.xml.sax.InputSource" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.DOMAdapter" />
			<role name="Adaptee" element="org.apache.xalan.xsltc.DOMEnhancedForDTM" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.DOMAdapter::_enhancedDOM:org.apache.xalan.xsltc.DOMEnhancedForDTM" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getExpandedTypeID(int):int" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="Adaptee" element="org.apache.xalan.transformer.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_transformer:org.apache.xalan.transformer.TransformerImpl" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startDocument():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endDocument():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::warning(org.xml.sax.SAXParseException):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::error(org.xml.sax.SAXParseException):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::fatalError(org.xml.sax.SAXParseException):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::setResult(javax.xml.transform.Result):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.utils.QName" />
			<role name="Adapter" element="org.apache.xalan.extensions.ExtensionHandlerExsltFunction" />
			<role name="adaptee" element="org.apache.xalan.extensions.ExtensionHandlerExsltFunction::RESULTQNAME:org.apache.xml.utils.QName" />
			<role name="Request()" element="org.apache.xalan.extensions.ExtensionHandlerExsltFunction::isElementAvailable(java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTMManager" />
			<role name="Adapter" element="org.apache.xpath.NodeSetDTM" />
			<role name="adaptee" element="org.apache.xpath.NodeSetDTM::m_manager:org.apache.xml.dtm.DTMManager" />
			<role name="Request()" element="org.apache.xpath.NodeSetDTM::getDTM(int):org.apache.xml.dtm.DTM" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Adapter" element="org.apache.xalan.xsltc.runtime.AbstractTranslet" />
			<role name="adaptee" element="org.apache.xalan.xsltc.runtime.AbstractTranslet::_auxClasses:org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Request()" element="org.apache.xalan.xsltc.runtime.AbstractTranslet::addAuxiliaryClass(java.lang.Class):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.runtime.AbstractTranslet::getAuxiliaryClass(java.lang.String):java.lang.Class" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.XPathContext" />
			<role name="Adapter" element="org.apache.xalan.transformer.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.transformer.TransformerImpl::m_xcontext:org.apache.xpath.XPathContext" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::clearParameters():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::setURIResolver(javax.xml.transform.URIResolver):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::getURIResolver():javax.xml.transform.URIResolver" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl" />
			<role name="Adaptee" element="org.apache.xalan.xsltc.trax.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::_transformer:org.apache.xalan.xsltc.trax.TransformerImpl" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::setResult(javax.xml.transform.Result):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.DOM" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.KeyIndex" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.KeyIndex::_dom:org.apache.xalan.xsltc.DOM" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.KeyIndex::next():int" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="Adaptee" element="org.xml.sax.Locator" />
			<role name="adaptee" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_locator:org.xml.sax.Locator" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::setDocumentLocator(org.xml.sax.Locator):void" />
		</instance>
		<instance>
			<role name="Adapter" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM" />
			<role name="Adaptee" element="org.xml.sax.Locator" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::m_locator:org.xml.sax.Locator" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::setDocumentLocator(org.xml.sax.Locator):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.ErrorHandler" />
			<role name="Adapter" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.ParserAdapter::errorHandler:org.xml.sax.ErrorHandler" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startElement(java.lang.String, org.xml.sax.AttributeList):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTM" />
			<role name="Adapter" element="org.apache.xalan.templates.ElemNumber$MyPrefixResolver" />
			<role name="adaptee" element="org.apache.xalan.templates.ElemNumber$MyPrefixResolver::dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xalan.templates.ElemNumber$MyPrefixResolver::getNamespaceForPrefix(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.SerializerTrace" />
			<role name="Adapter" element="org.apache.xml.serializer.SerializerBase" />
			<role name="adaptee" element="org.apache.xml.serializer.SerializerBase::m_tracer:org.apache.xml.serializer.SerializerTrace" />
			<role name="Request()" element="org.apache.xml.serializer.SerializerBase::setTransformer(javax.xml.transform.Transformer):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.utils.IntStack" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::m_parents:org.apache.xml.utils.IntStack" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::m_contextIndexes:org.apache.xml.utils.IntStack" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::startDocument():void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::endPrefixMapping(java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.DocumentHandler" />
			<role name="Adapter" element="org.xml.sax.helpers.XMLReaderAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.XMLReaderAdapter::documentHandler:org.xml.sax.DocumentHandler" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::startDocument():void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::endDocument():void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::characters(char[], int, int):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::processingInstruction(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::iterator:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::step():int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::setStartNode(int):org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator$HeapNode" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::reset():org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator$HeapNode" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Adapter" element="org.apache.xpath.axes.ChildTestIterator" />
			<role name="adaptee" element="org.apache.xpath.axes.ChildTestIterator::m_traverser:org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Request()" element="org.apache.xpath.axes.ChildTestIterator::getNextNode():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Adapter" element="org.apache.xpath.axes.DescendantIterator" />
			<role name="adaptee" element="org.apache.xpath.axes.DescendantIterator::m_traverser:org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Request()" element="org.apache.xpath.axes.DescendantIterator::nextNode():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.Serializer" />
			<role name="Adapter" element="org.apache.xml.serializer.dom3.LSSerializerImpl" />
			<role name="adaptee" element="org.apache.xml.serializer.dom3.LSSerializerImpl::fXMLSerializer:org.apache.xml.serializer.Serializer" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToString(org.w3c.dom.Node):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToURI(org.w3c.dom.Node, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.Parser" />
			<role name="Adapter" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.ParserAdapter::parser:org.xml.sax.Parser" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::parse(org.xml.sax.InputSource):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="javax.xml.transform.ErrorListener" />
			<role name="Adapter" element="org.apache.xalan.processor.TransformerFactoryImpl" />
			<role name="adaptee" element="org.apache.xalan.processor.TransformerFactoryImpl::m_errorListener:javax.xml.transform.ErrorListener" />
			<role name="Request()" element="org.apache.xalan.processor.TransformerFactoryImpl::newXMLFilter(javax.xml.transform.Templates):org.xml.sax.XMLFilter" />
			<role name="Request()" element="org.apache.xalan.processor.TransformerFactoryImpl::newTransformerHandler(javax.xml.transform.Templates):javax.xml.transform.sax.TransformerHandler" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.AttributeList" />
			<role name="Adapter" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::qAtts:org.xml.sax.AttributeList" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getLength():int" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getQName(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getType(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getValue(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getIndex(java.lang.String):int" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getType(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getValue(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.Attributes" />
			<role name="Adapter" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::attributes:org.xml.sax.Attributes" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getLength():int" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getName(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getType(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getValue(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getType(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getValue(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.Serializer" />
			<role name="Adapter" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper" />
			<role name="adaptee" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::m_serializer:org.apache.xml.serializer.Serializer" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::setOutputStream(java.io.OutputStream):void" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::getOutputStream():java.io.OutputStream" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::setWriter(java.io.Writer):void" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::getWriter():java.io.Writer" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::setOutputFormat(java.util.Properties):void" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::getOutputFormat():java.util.Properties" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::asContentHandler():org.xml.sax.ContentHandler" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::asDOMSerializer():org.apache.xalan.serialize.DOMSerializer" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::reset():boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.runtime.AbstractTranslet" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TransformerImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TransformerImpl::_translet:org.apache.xalan.xsltc.runtime.AbstractTranslet" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::transform(javax.xml.transform.Source, javax.xml.transform.Result):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::setErrorListener(javax.xml.transform.ErrorListener):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::setParameter(java.lang.String, java.lang.Object):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::clearParameters():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::getParameter(java.lang.String):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTM" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.DTMNamedNodeMap" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::getLength():int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::getNamedItem(java.lang.String):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::item(int):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::getNamedItemNS(java.lang.String, java.lang.String):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Adapter" element="org.apache.xalan.xsltc.runtime.AttributeList" />
			<role name="adaptee" element="org.apache.xalan.xsltc.runtime.AttributeList::_attributes:org.apache.xalan.xsltc.runtime.Hashtable" />
			<role name="Request()" element="org.apache.xalan.xsltc.runtime.AttributeList::getValue(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.utils.DOM2Helper" />
			<role name="Adapter" element="org.apache.xml.serializer.utils.AttList" />
			<role name="adaptee" element="org.apache.xml.serializer.utils.AttList::m_dh:org.apache.xml.serializer.utils.DOM2Helper" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getURI(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getLocalName(int):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="javax.xml.parsers.DocumentBuilder" />
			<role name="Adapter" element="org.apache.xpath.jaxp.XPathExpressionImpl" />
			<role name="adaptee" element="org.apache.xpath.jaxp.XPathExpressionImpl::db:javax.xml.parsers.DocumentBuilder" />
			<role name="Request()" element="org.apache.xpath.jaxp.XPathExpressionImpl::evaluate(org.xml.sax.InputSource, javax.xml.namespace.QName):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="javax.xml.parsers.DocumentBuilderFactory" />
			<role name="Adapter" element="org.apache.xpath.jaxp.XPathExpressionImpl" />
			<role name="adaptee" element="org.apache.xpath.jaxp.XPathExpressionImpl::dbf:javax.xml.parsers.DocumentBuilderFactory" />
			<role name="Request()" element="org.apache.xpath.jaxp.XPathExpressionImpl::evaluate(org.xml.sax.InputSource, javax.xml.namespace.QName):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.ref.DTMStringPool" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.DTMDocumentImpl" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMDocumentImpl::m_nsNames:org.apache.xml.dtm.ref.DTMStringPool" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMDocumentImpl::m_localNames:org.apache.xml.dtm.ref.DTMStringPool" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMDocumentImpl::m_prefixNames:org.apache.xml.dtm.ref.DTMStringPool" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getAttributeNode(int, java.lang.String, java.lang.String):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getExpandedTypeID(int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getExpandedTypeID(java.lang.String, java.lang.String, int):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getLocalNameFromExpandedNameID(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getNamespaceFromExpandedNameID(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getNodeName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getLocalName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getPrefix(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.ref.DTMStringPool" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::m_valuesOrPrefixes:org.apache.xml.dtm.ref.DTMStringPool" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.utils.XMLStringFactory" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.DTMDocumentImpl" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMDocumentImpl::m_xsf:org.apache.xml.utils.XMLStringFactory" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getStringValue(int):org.apache.xml.utils.XMLString" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.trax.TemplatesImpl" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::_templates:org.apache.xalan.xsltc.trax.TemplatesImpl" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::endDocument():void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.trax.TransformerFactoryImpl" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TemplatesImpl" />
			<role name="adaptee" element="org.apache.xalan.xsltc.trax.TemplatesImpl::_tfactory:org.apache.xalan.xsltc.trax.TransformerFactoryImpl" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesImpl::newTransformer():javax.xml.transform.Transformer" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.transformer.TransformerImpl" />
			<role name="Adapter" element="org.apache.xalan.transformer.XalanTransformState" />
			<role name="adaptee" element="org.apache.xalan.transformer.XalanTransformState::m_transformer:org.apache.xalan.transformer.TransformerImpl" />
			<role name="Request()" element="org.apache.xalan.transformer.XalanTransformState::getCurrentElement():org.apache.xalan.templates.ElemTemplateElement" />
			<role name="Request()" element="org.apache.xalan.transformer.XalanTransformState::getCurrentNode():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xalan.transformer.XalanTransformState::getCurrentTemplate():org.apache.xalan.templates.ElemTemplate" />
			<role name="Request()" element="org.apache.xalan.transformer.XalanTransformState::getMatchedTemplate():org.apache.xalan.templates.ElemTemplate" />
			<role name="Request()" element="org.apache.xalan.transformer.XalanTransformState::getMatchedNode():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xalan.transformer.XalanTransformState::getContextNodeList():org.w3c.dom.traversal.NodeIterator" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.DTMNodeIterator" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMNodeIterator::dtm_iter:org.apache.xml.dtm.DTMIterator" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeIterator::getRoot():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeIterator::getWhatToShow():int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeIterator::nextNode():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeIterator::previousNode():org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.NamedNodeMap" />
			<role name="Adapter" element="org.apache.xml.serializer.utils.AttList" />
			<role name="adaptee" element="org.apache.xml.serializer.utils.AttList::m_attrs:org.w3c.dom.NamedNodeMap" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getLength():int" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getURI(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getLocalName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getQName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getValue(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getValue(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getValue(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getIndex(java.lang.String, java.lang.String):int" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getIndex(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.NamedNodeMap" />
			<role name="Adapter" element="org.apache.xml.utils.AttList" />
			<role name="adaptee" element="org.apache.xml.utils.AttList::m_attrs:org.w3c.dom.NamedNodeMap" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getLength():int" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getURI(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getLocalName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getQName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getValue(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getValue(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getValue(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getIndex(java.lang.String, java.lang.String):int" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getIndex(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.helpers.AttributesImpl" />
			<role name="Adapter" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.ParserAdapter::atts:org.xml.sax.helpers.AttributesImpl" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startElement(java.lang.String, org.xml.sax.AttributeList):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter" />
			<role name="Adapter" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.ParserAdapter::attAdapter:org.xml.sax.helpers.ParserAdapter$AttributeListAdapter" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startElement(java.lang.String, org.xml.sax.AttributeList):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.helpers.NamespaceSupport" />
			<role name="Adapter" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.ParserAdapter::nsSupport:org.xml.sax.helpers.NamespaceSupport" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startElement(java.lang.String, org.xml.sax.AttributeList):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::endElement(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.trax.TransformerFactoryImpl" />
			<role name="Adapter" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.objects.XObject" />
			<role name="Adapter" element="org.apache.xpath.domapi.XPathResultImpl" />
			<role name="adaptee" element="org.apache.xpath.domapi.XPathResultImpl::m_resultObj:org.apache.xpath.objects.XObject" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getNumberValue():double" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getStringValue():java.lang.String" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getBooleanValue():boolean" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getSingleNodeValue():org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.MultipleNodeCounter" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.MultipleNodeCounter::_precSiblings:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultipleNodeCounter::getCounter():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.SingleNodeCounter" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.SingleNodeCounter::_countSiblings:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.SingleNodeCounter::getCounter():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.templates.AVT" />
			<role name="Adapter" element="org.apache.xalan.templates.ElemLiteralResult$Attribute" />
			<role name="adaptee" element="org.apache.xalan.templates.ElemLiteralResult$Attribute::m_attribute:org.apache.xalan.templates.AVT" />
			<role name="Request()" element="org.apache.xalan.templates.ElemLiteralResult$Attribute::getName():java.lang.String" />
			<role name="Request()" element="org.apache.xalan.templates.ElemLiteralResult$Attribute::getValue():java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.DOM3Serializer" />
			<role name="Adapter" element="org.apache.xml.serializer.dom3.LSSerializerImpl" />
			<role name="adaptee" element="org.apache.xml.serializer.dom3.LSSerializerImpl::fDOMSerializer:org.apache.xml.serializer.DOM3Serializer" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToString(org.w3c.dom.Node):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToURI(org.w3c.dom.Node, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.util.IntegerArray" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.KeyIndex$KeyIndexIterator$KeyIndexHeapNode" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.KeyIndex$KeyIndexIterator$KeyIndexHeapNode::_nodes:org.apache.xalan.xsltc.util.IntegerArray" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.KeyIndex$KeyIndexIterator$KeyIndexHeapNode::step():int" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.xsltc.runtime.AbstractTranslet" />
			<role name="Adapter" element="org.apache.xalan.xsltc.dom.DOMWSFilter" />
			<role name="adaptee" element="org.apache.xalan.xsltc.dom.DOMWSFilter::m_translet:org.apache.xalan.xsltc.runtime.AbstractTranslet" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMWSFilter::getShouldStripSpace(int, org.apache.xml.dtm.DTM):short" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.serializer.TransformStateSetter" />
			<role name="Adapter" element="org.apache.xml.serializer.ToSAXHandler" />
			<role name="adaptee" element="org.apache.xml.serializer.ToSAXHandler::m_state:org.apache.xml.serializer.TransformStateSetter" />
			<role name="Request()" element="org.apache.xml.serializer.ToSAXHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xml.serializer.ToSAXHandler::startElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.serializer.ToSAXHandler::startElement(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xml.utils.DOMHelper" />
			<role name="Adapter" element="org.apache.xml.utils.AttList" />
			<role name="adaptee" element="org.apache.xml.utils.AttList::m_dh:org.apache.xml.utils.DOMHelper" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getURI(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getLocalName(int):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.DOMImplementation" />
			<role name="Adapter" element="org.apache.xml.dtm.ref.DTMNodeProxy" />
			<role name="adaptee" element="org.apache.xml.dtm.ref.DTMNodeProxy::implementation:org.w3c.dom.DOMImplementation" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::isSupported(java.lang.String, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.Node" />
			<role name="Adapter" element="org.apache.xml.serializer.dom3.LSSerializerImpl" />
			<role name="adaptee" element="org.apache.xml.serializer.dom3.LSSerializerImpl::fVisitedNode:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToString(org.w3c.dom.Node):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToURI(org.w3c.dom.Node, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.NodeList" />
			<role name="Adapter" element="org.apache.xpath.domapi.XPathResultImpl" />
			<role name="adaptee" element="org.apache.xpath.domapi.XPathResultImpl::m_list:org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getSnapshotLength():int" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::snapshotItem(int):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter" />
			<role name="Adapter" element="org.xml.sax.helpers.XMLReaderAdapter" />
			<role name="adaptee" element="org.xml.sax.helpers.XMLReaderAdapter::qAtts:org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xalan.extensions.ExtensionHandler" />
			<role name="Adapter" element="org.apache.xalan.extensions.XPathFunctionImpl" />
			<role name="adaptee" element="org.apache.xalan.extensions.XPathFunctionImpl::m_handler:org.apache.xalan.extensions.ExtensionHandler" />
			<role name="Request()" element="org.apache.xalan.extensions.XPathFunctionImpl::evaluate(java.util.List):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="javax.xml.namespace.NamespaceContext" />
			<role name="Adapter" element="org.apache.xpath.jaxp.JAXPPrefixResolver" />
			<role name="adaptee" element="org.apache.xpath.jaxp.JAXPPrefixResolver::namespaceContext:javax.xml.namespace.NamespaceContext" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPPrefixResolver::getNamespaceForPrefix(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.XPath" />
			<role name="Adapter" element="org.apache.xpath.domapi.XPathResultImpl" />
			<role name="adaptee" element="org.apache.xpath.domapi.XPathResultImpl::m_xpath:org.apache.xpath.XPath" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getNumberValue():double" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getStringValue():java.lang.String" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getBooleanValue():boolean" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getSingleNodeValue():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getSnapshotLength():int" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::iterateNext():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::snapshotItem(int):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.apache.xpath.XPath" />
			<role name="Adapter" element="org.apache.xpath.domapi.XPathExpressionImpl" />
			<role name="adaptee" element="org.apache.xpath.domapi.XPathExpressionImpl::m_xpath:org.apache.xpath.XPath" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathExpressionImpl::evaluate(org.w3c.dom.Node, short, java.lang.Object):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="javax.xml.xpath.XPathFunctionResolver" />
			<role name="Adapter" element="org.apache.xpath.jaxp.JAXPExtensionsProvider" />
			<role name="adaptee" element="org.apache.xpath.jaxp.JAXPExtensionsProvider::resolver:javax.xml.xpath.XPathFunctionResolver" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPExtensionsProvider::functionAvailable(java.lang.String, java.lang.String):boolean" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPExtensionsProvider::extFunction(java.lang.String, java.lang.String, java.util.Vector, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPExtensionsProvider::extFunction(org.apache.xpath.functions.FuncExtFunction, java.util.Vector):java.lang.Object" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.DOMErrorHandler" />
			<role name="Adapter" element="org.apache.xml.serializer.dom3.LSSerializerImpl" />
			<role name="adaptee" element="org.apache.xml.serializer.dom3.LSSerializerImpl::fDOMErrorHandler:org.w3c.dom.DOMErrorHandler" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToString(org.w3c.dom.Node):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToURI(org.w3c.dom.Node, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Adaptee" element="org.w3c.dom.traversal.NodeIterator" />
			<role name="Adapter" element="org.apache.xpath.domapi.XPathResultImpl" />
			<role name="adaptee" element="org.apache.xpath.domapi.XPathResultImpl::m_iterator:org.w3c.dom.traversal.NodeIterator" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::iterateNext():org.w3c.dom.Node" />
		</instance>
	</pattern>
	<pattern name="Command" />
	<pattern name="Composite">
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Composite" element="org.apache.xpath.axes.PredicatedNodeTest" />
			<role name="Operation()" element="org.apache.xpath.axes.PredicatedNodeTest::fixupVariables(java.util.Vector, int):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Composite" element="org.apache.xpath.functions.FuncExtFunction" />
			<role name="Operation()" element="org.apache.xpath.functions.FuncExtFunction::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.functions.FuncExtFunction::execute(org.apache.xpath.XPathContext):org.apache.xpath.objects.XObject" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Composite" element="org.apache.xpath.functions.FunctionMultiArgs" />
			<role name="Operation()" element="org.apache.xpath.functions.FunctionMultiArgs::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.functions.FunctionMultiArgs::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Composite" element="org.apache.xpath.patterns.StepPattern" />
			<role name="Operation()" element="org.apache.xpath.patterns.StepPattern::fixupVariables(java.util.Vector, int):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xalan.xsltc.compiler.SyntaxTreeNode" />
			<role name="Composite" element="org.apache.xalan.xsltc.compiler.LiteralElement" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.LiteralElement::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.LiteralElement::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Composite" element="org.apache.xpath.axes.UnionPathIterator" />
			<role name="Operation()" element="org.apache.xpath.axes.UnionPathIterator::detach():void" />
			<role name="Operation()" element="org.apache.xpath.axes.UnionPathIterator::clone():java.lang.Object" />
			<role name="Operation()" element="org.apache.xpath.axes.UnionPathIterator::nextNode():int" />
		</instance>
	</pattern>
	<pattern name="Decorator">
		<instance>
			<role name="Component" element="javax.xml.transform.sax.SAXTransformerFactory" />
			<role name="Decorator" element="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl" />
			<role name="component" element="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl::_xsltcFactory:javax.xml.transform.sax.SAXTransformerFactory" />
			<role name="component" element="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl::_xalanFactory:javax.xml.transform.sax.SAXTransformerFactory" />
			<role name="component" element="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl::_currFactory:javax.xml.transform.sax.SAXTransformerFactory" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl::newTemplatesHandler():javax.xml.transform.sax.TemplatesHandler" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl::newTransformerHandler():javax.xml.transform.sax.TransformerHandler" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl::newTransformerHandler(javax.xml.transform.Source):javax.xml.transform.sax.TransformerHandler" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.SmartTransformerFactoryImpl::newTransformerHandler(javax.xml.transform.Templates):javax.xml.transform.sax.TransformerHandler" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMManager" />
			<role name="Decorator" element="org.apache.xpath.XPathContext" />
			<role name="component" element="org.apache.xpath.XPathContext::m_dtmManager:org.apache.xml.dtm.DTMManager" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::getDTM(javax.xml.transform.Source, boolean, org.apache.xml.dtm.DTMWSFilter, boolean, boolean):org.apache.xml.dtm.DTM" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::getDTM(int):org.apache.xml.dtm.DTM" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::getDTMHandleFromNode(org.w3c.dom.Node):int" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::getDTMIdentity(org.apache.xml.dtm.DTM):int" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::createDocumentFragment():org.apache.xml.dtm.DTM" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::release(org.apache.xml.dtm.DTM, boolean):boolean" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::createDTMIterator(java.lang.Object, int):org.apache.xml.dtm.DTMIterator" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::createDTMIterator(java.lang.String, org.apache.xml.utils.PrefixResolver):org.apache.xml.dtm.DTMIterator" />
			<role name="Operation()" element="org.apache.xpath.XPathContext::createDTMIterator(int, org.apache.xml.dtm.DTMFilter, boolean):org.apache.xml.dtm.DTMIterator" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.EntityResolver" />
			<role name="Decorator" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="component" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_entityResolver:org.xml.sax.EntityResolver" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::resolveEntity(java.lang.String, java.lang.String):org.xml.sax.InputSource" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.EntityResolver" />
			<role name="Decorator" element="org.xml.sax.helpers.XMLFilterImpl" />
			<role name="component" element="org.xml.sax.helpers.XMLFilterImpl::entityResolver:org.xml.sax.EntityResolver" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::resolveEntity(java.lang.String, java.lang.String):org.xml.sax.InputSource" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.DTDHandler" />
			<role name="Decorator" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="component" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_dtdHandler:org.xml.sax.DTDHandler" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::notationDecl(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.DTDHandler" />
			<role name="Decorator" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter" />
			<role name="component" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::clientDTDHandler:org.xml.sax.DTDHandler" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::notationDecl(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.DTDHandler" />
			<role name="Decorator" element="org.xml.sax.helpers.XMLFilterImpl" />
			<role name="component" element="org.xml.sax.helpers.XMLFilterImpl::dtdHandler:org.xml.sax.DTDHandler" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::notationDecl(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ContentHandler" />
			<role name="Decorator" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="component" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_contentHandler:org.xml.sax.ContentHandler" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startDocument():void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endDocument():void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startPrefixMapping(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endPrefixMapping(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::characters(char[], int, int):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::ignorableWhitespace(char[], int, int):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::skippedEntity(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ContentHandler" />
			<role name="Decorator" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter" />
			<role name="component" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::clientContentHandler:org.xml.sax.ContentHandler" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::characters(char[], int, int):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::endDocument():void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::endPrefixMapping(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::ignorableWhitespace(char[], int, int):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::skippedEntity(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::startDocument():void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::startPrefixMapping(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ContentHandler" />
			<role name="Decorator" element="org.xml.sax.helpers.XMLFilterImpl" />
			<role name="component" element="org.xml.sax.helpers.XMLFilterImpl::contentHandler:org.xml.sax.ContentHandler" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::startDocument():void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::endDocument():void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::startPrefixMapping(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::endPrefixMapping(java.lang.String):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::characters(char[], int, int):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::ignorableWhitespace(char[], int, int):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::skippedEntity(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ErrorHandler" />
			<role name="Decorator" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="component" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_errorHandler:org.xml.sax.ErrorHandler" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::error(org.xml.sax.SAXParseException):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::fatalError(org.xml.sax.SAXParseException):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ErrorHandler" />
			<role name="Decorator" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter" />
			<role name="component" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::clientErrorHandler:org.xml.sax.ErrorHandler" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::error(org.xml.sax.SAXParseException):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ErrorHandler" />
			<role name="Decorator" element="org.xml.sax.helpers.XMLFilterImpl" />
			<role name="component" element="org.xml.sax.helpers.XMLFilterImpl::errorHandler:org.xml.sax.ErrorHandler" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::warning(org.xml.sax.SAXParseException):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::error(org.xml.sax.SAXParseException):void" />
			<role name="Operation()" element="org.xml.sax.helpers.XMLFilterImpl::fatalError(org.xml.sax.SAXParseException):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ext.DeclHandler" />
			<role name="Decorator" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="component" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_declHandler:org.xml.sax.ext.DeclHandler" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::elementDecl(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::internalEntityDecl(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::externalEntityDecl(java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ext.DeclHandler" />
			<role name="Decorator" element="org.apache.xalan.transformer.TransformerIdentityImpl" />
			<role name="component" element="org.apache.xalan.transformer.TransformerIdentityImpl::m_resultDeclHandler:org.xml.sax.ext.DeclHandler" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerIdentityImpl::elementDecl(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerIdentityImpl::attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerIdentityImpl::internalEntityDecl(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerIdentityImpl::externalEntityDecl(java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ext.DeclHandler" />
			<role name="Decorator" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl" />
			<role name="component" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::_declHandler:org.xml.sax.ext.DeclHandler" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::attributeDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::elementDecl(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::externalEntityDecl(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::internalEntityDecl(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ext.LexicalHandler" />
			<role name="Decorator" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="component" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_lexicalHandler:org.xml.sax.ext.LexicalHandler" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startDTD(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endDTD():void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startEntity(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endEntity(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startCDATA():void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endCDATA():void" />
			<role name="Operation()" element="org.apache.xalan.transformer.TransformerHandlerImpl::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.ext.LexicalHandler" />
			<role name="Decorator" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter" />
			<role name="component" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::clientLexicalHandler:org.xml.sax.ext.LexicalHandler" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::comment(char[], int, int):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::endCDATA():void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::endDTD():void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::endEntity(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::startCDATA():void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::startDTD(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::startEntity(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.axes.FilterExprIterator" />
			<role name="component" element="org.apache.xpath.axes.FilterExprIterator::m_expr:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.axes.FilterExprIterator::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.axes.FilterExprIterator::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.axes.FilterExprIteratorSimple" />
			<role name="component" element="org.apache.xpath.axes.FilterExprIteratorSimple::m_expr:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.axes.FilterExprIteratorSimple::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.axes.FilterExprIteratorSimple::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.axes.FilterExprWalker" />
			<role name="component" element="org.apache.xpath.axes.FilterExprWalker::m_expr:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.axes.FilterExprWalker::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.axes.FilterExprWalker::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.functions.Function2Args" />
			<role name="component" element="org.apache.xpath.functions.Function2Args::m_arg1:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.functions.Function2Args::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.functions.Function2Args::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.functions.Function3Args" />
			<role name="component" element="org.apache.xpath.functions.Function3Args::m_arg2:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.functions.Function3Args::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.functions.Function3Args::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.functions.FunctionOneArg" />
			<role name="component" element="org.apache.xpath.functions.FunctionOneArg::m_arg0:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.functions.FunctionOneArg::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.functions.FunctionOneArg::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.operations.Operation" />
			<role name="component" element="org.apache.xpath.operations.Operation::m_left:org.apache.xpath.Expression" />
			<role name="component" element="org.apache.xpath.operations.Operation::m_right:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.operations.Operation::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.operations.Operation::callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor):void" />
			<role name="Operation()" element="org.apache.xpath.operations.Operation::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.operations.UnaryOperation" />
			<role name="component" element="org.apache.xpath.operations.UnaryOperation::m_right:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.operations.UnaryOperation::fixupVariables(java.util.Vector, int):void" />
			<role name="Operation()" element="org.apache.xpath.operations.UnaryOperation::execute(org.apache.xpath.XPathContext):org.apache.xpath.objects.XObject" />
			<role name="Operation()" element="org.apache.xpath.operations.UnaryOperation::callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor):void" />
			<role name="Operation()" element="org.apache.xpath.operations.UnaryOperation::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xpath.Expression" />
			<role name="Decorator" element="org.apache.xpath.patterns.FunctionPattern" />
			<role name="component" element="org.apache.xpath.patterns.FunctionPattern::m_functionExpr:org.apache.xpath.Expression" />
			<role name="Operation()" element="org.apache.xpath.patterns.FunctionPattern::fixupVariables(java.util.Vector, int):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xalan.xsltc.compiler.Pattern" />
			<role name="Decorator" element="org.apache.xalan.xsltc.compiler.AncestorPattern" />
			<role name="component" element="org.apache.xalan.xsltc.compiler.AncestorPattern::_left:org.apache.xalan.xsltc.compiler.Pattern" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.AncestorPattern::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.AncestorPattern::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xalan.xsltc.compiler.Pattern" />
			<role name="Decorator" element="org.apache.xalan.xsltc.compiler.ParentPattern" />
			<role name="component" element="org.apache.xalan.xsltc.compiler.ParentPattern::_left:org.apache.xalan.xsltc.compiler.Pattern" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.ParentPattern::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.ParentPattern::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xalan.xsltc.compiler.Pattern" />
			<role name="Decorator" element="org.apache.xalan.xsltc.compiler.AlternativePattern" />
			<role name="component" element="org.apache.xalan.xsltc.compiler.AlternativePattern::_left:org.apache.xalan.xsltc.compiler.Pattern" />
			<role name="component" element="org.apache.xalan.xsltc.compiler.AlternativePattern::_right:org.apache.xalan.xsltc.compiler.Pattern" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.AlternativePattern::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.AlternativePattern::getPriority():double" />
			<role name="Operation()" element="org.apache.xalan.xsltc.compiler.AlternativePattern::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.AbsoluteIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.AbsoluteIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.AbsoluteIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.AbsoluteIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.AbsoluteIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.AbsoluteIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.AbsoluteIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.AbsoluteIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.AbsoluteIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.CachedNodeListIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.CachedNodeListIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.CachedNodeListIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.CachedNodeListIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.CachedNodeListIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.DupFilterIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.DupFilterIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DupFilterIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DupFilterIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DupFilterIterator::setRestartable(boolean):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.FilterIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.FilterIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.FilterIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.FilterIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.FilterIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.FilterIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.FilterIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.FilterIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.FilterIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.ForwardPositionIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.ForwardPositionIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.ForwardPositionIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.ForwardPositionIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.ForwardPositionIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.ForwardPositionIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.ForwardPositionIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.ForwardPositionIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.KeyIndex$KeyIndexIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.KeyIndex$KeyIndexIterator::_keyValueIterator:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.KeyIndex$KeyIndexIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.MatchingIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.MatchingIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MatchingIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MatchingIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MatchingIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MatchingIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MatchingIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MatchingIterator::getLast():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MatchingIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MatchingIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::getLast():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::getPosition():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::gotoMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$AxisIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiDOM$NodeValueIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.NthIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.NthIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.NthIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.NthIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.NthIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.NthIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.NthIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.NthIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.SAXImpl$NamespaceWildcardIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.SAXImpl$NamespaceWildcardIterator::m_baseIterator:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NamespaceWildcardIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NamespaceWildcardIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NamespaceWildcardIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NamespaceWildcardIterator::isReverse():boolean" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NamespaceWildcardIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NamespaceWildcardIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SAXImpl$NodeValueIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.SortingIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.SortingIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SortingIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SortingIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SortingIterator::gotoMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SortingIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.StepIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.StepIterator::_source:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="component" element="org.apache.xalan.xsltc.dom.StepIterator::_iterator:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.StepIterator::setRestartable(boolean):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.StepIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.StepIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.StepIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.StepIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.StepIterator::setMark():void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.StepIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.serializer.SerializationHandler" />
			<role name="Decorator" element="org.apache.xml.serializer.ToUnknownStream" />
			<role name="component" element="org.apache.xml.serializer.ToUnknownStream::m_handler:org.apache.xml.serializer.SerializationHandler" />
			<role name="Operation()" element="org.apache.xml.serializer.ToUnknownStream::close():void" />
			<role name="Operation()" element="org.apache.xml.serializer.ToUnknownStream::serialize(org.w3c.dom.Node):void" />
			<role name="Operation()" element="org.apache.xml.serializer.ToUnknownStream::setEscaping(boolean):boolean" />
			<role name="Operation()" element="org.apache.xml.serializer.ToUnknownStream::setIndentAmount(int):void" />
			<role name="Operation()" element="org.apache.xml.serializer.ToUnknownStream::flushPending():void" />
			<role name="Operation()" element="org.apache.xml.serializer.ToUnknownStream::setTransformer(javax.xml.transform.Transformer):void" />
			<role name="Operation()" element="org.apache.xml.serializer.ToUnknownStream::getTransformer():javax.xml.transform.Transformer" />
			<role name="Operation()" element="org.apache.xml.serializer.ToUnknownStream::setContentHandler(org.xml.sax.ContentHandler):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xalan.xsltc.DOM" />
			<role name="Decorator" element="org.apache.xalan.xsltc.dom.DOMAdapter" />
			<role name="component" element="org.apache.xalan.xsltc.dom.DOMAdapter::_dom:org.apache.xalan.xsltc.DOM" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getStringValue():java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getChildren(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getTypedChildren(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNamespaceAxisIterator(int, int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getAxisIterator(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getTypedAxisIterator(int, int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNthDescendant(int, int, boolean):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNodeValueIterator(org.apache.xml.dtm.DTMAxisIterator, int, java.lang.String, boolean):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::orderNodes(org.apache.xml.dtm.DTMAxisIterator, int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getExpandedTypeID(int):int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNSType(int):int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getParent(int):int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getAttributeNode(int, int):int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNodeName(int):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNodeNameX(int):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNamespaceName(int):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getStringValueX(int):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::copy(int, org.apache.xml.serializer.SerializationHandler):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::copy(org.apache.xml.dtm.DTMAxisIterator, org.apache.xml.serializer.SerializationHandler):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::shallowCopy(int, org.apache.xml.serializer.SerializationHandler):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::lessThan(int, int):boolean" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::characters(int, org.apache.xml.serializer.SerializationHandler):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::makeNode(int):org.w3c.dom.Node" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::makeNode(org.apache.xml.dtm.DTMAxisIterator):org.w3c.dom.Node" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::makeNodeList(int):org.w3c.dom.NodeList" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::makeNodeList(org.apache.xml.dtm.DTMAxisIterator):org.w3c.dom.NodeList" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getLanguage(int):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getSize():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getDocumentURI(int):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getDocument():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::isElement(int):boolean" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::isAttribute(int):boolean" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNodeIdent(int):int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNodeHandle(int):int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getResultTreeFrag(int, int):org.apache.xalan.xsltc.DOM" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getResultTreeFrag(int, int, boolean):org.apache.xalan.xsltc.DOM" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getOutputDomBuilder():org.apache.xml.serializer.SerializationHandler" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::lookupNamespace(int, java.lang.String):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getUnparsedEntityURI(java.lang.String):java.lang.String" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getElementsWithIDs():org.apache.xalan.xsltc.runtime.Hashtable" />
		</instance>
		<instance>
			<role name="Component" element="org.xml.sax.Locator" />
			<role name="Decorator" element="org.apache.xml.utils.SAXSourceLocator" />
			<role name="component" element="org.apache.xml.utils.SAXSourceLocator::m_locator:org.xml.sax.Locator" />
			<role name="Operation()" element="org.apache.xml.utils.SAXSourceLocator::getPublicId():java.lang.String" />
			<role name="Operation()" element="org.apache.xml.utils.SAXSourceLocator::getSystemId():java.lang.String" />
			<role name="Operation()" element="org.apache.xml.utils.SAXSourceLocator::getLineNumber():int" />
			<role name="Operation()" element="org.apache.xml.utils.SAXSourceLocator::getColumnNumber():int" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Decorator" element="org.apache.xpath.axes.NodeSequence" />
			<role name="component" element="org.apache.xpath.axes.NodeSequence::m_iter:org.apache.xml.dtm.DTMIterator" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::getRoot():int" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::setRoot(int, java.lang.Object):void" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::getWhatToShow():int" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::getExpandEntityReferences():boolean" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::nextNode():int" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::previousNode():int" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::detach():void" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::allowDetachToRelease(boolean):void" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::getCurrentNode():int" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::setItem(int, int):void" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::getLength():int" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::clone():java.lang.Object" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::isDocOrdered():boolean" />
			<role name="Operation()" element="org.apache.xpath.axes.NodeSequence::getAxis():int" />
		</instance>
		<instance>
			<role name="Component" element="javax.xml.transform.Source" />
			<role name="Decorator" element="org.apache.xalan.xsltc.trax.XSLTCSource" />
			<role name="component" element="org.apache.xalan.xsltc.trax.XSLTCSource::_source:javax.xml.transform.Source" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.XSLTCSource::setSystemId(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.trax.XSLTCSource::getSystemId():java.lang.String" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.serializer.DOMSerializer" />
			<role name="Decorator" element="org.apache.xalan.serialize.SerializerFactory$DOMSerializerWrapper" />
			<role name="component" element="org.apache.xalan.serialize.SerializerFactory$DOMSerializerWrapper::m_dom:org.apache.xml.serializer.DOMSerializer" />
			<role name="Operation()" element="org.apache.xalan.serialize.SerializerFactory$DOMSerializerWrapper::serialize(org.w3c.dom.Node):void" />
		</instance>
		<instance>
			<role name="Component" element="org.apache.xml.serializer.EncodingInfo$InEncoding" />
			<role name="Decorator" element="org.apache.xml.serializer.EncodingInfo$EncodingImpl" />
			<role name="component" element="org.apache.xml.serializer.EncodingInfo$EncodingImpl::m_before:org.apache.xml.serializer.EncodingInfo$InEncoding" />
			<role name="component" element="org.apache.xml.serializer.EncodingInfo$EncodingImpl::m_after:org.apache.xml.serializer.EncodingInfo$InEncoding" />
			<role name="Operation()" element="org.apache.xml.serializer.EncodingInfo$EncodingImpl::isInEncoding(char):boolean" />
			<role name="Operation()" element="org.apache.xml.serializer.EncodingInfo$EncodingImpl::isInEncoding(char, char):boolean" />
		</instance>
	</pattern>
	<pattern name="Observer">
		<instance>
			<role name="Observer" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator$HeapNode" />
			<role name="Subject" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator" />
			<role name="Notify()" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::next():int" />
			<role name="Notify()" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Notify()" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::heapify(int):void" />
			<role name="Notify()" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
		</instance>
		<instance>
			<role name="Observer" element="org.apache.xalan.trace.TraceListener" />
			<role name="Subject" element="org.apache.xalan.trace.TraceManager" />
			<role name="Notify()" element="org.apache.xalan.trace.TraceManager::fireGenerateEvent(org.apache.xalan.trace.GenerateEvent):void" />
			<role name="Notify()" element="org.apache.xalan.trace.TraceManager::fireTraceEvent(org.apache.xalan.trace.TracerEvent):void" />
			<role name="Notify()" element="org.apache.xalan.trace.TraceManager::fireSelectedEvent(org.apache.xalan.trace.SelectionEvent):void" />
		</instance>
	</pattern>
	<pattern name="State">
		<instance>
			<role name="State" element="org.apache.xpath.Expression" />
			<role name="Context" element="org.apache.xpath.XPath" />
			<role name="state" element="org.apache.xpath.XPath::m_mainExp:org.apache.xpath.Expression" />
			<role name="Request()" element="org.apache.xpath.XPath::fixupVariables(java.util.Vector, int):void" />
			<role name="Request()" element="org.apache.xpath.XPath::execute(org.apache.xpath.XPathContext, int, org.apache.xml.utils.PrefixResolver):org.apache.xpath.objects.XObject" />
			<role name="Request()" element="org.apache.xpath.XPath::getMatchScore(org.apache.xpath.XPathContext, int):double" />
			<role name="Request()" element="org.apache.xpath.XPath::callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor):void" />
		</instance>
		<instance>
			<role name="Context" element="TransformServlet" />
			<role name="State" element="TransformHome" />
			<role name="state" element="TransformServlet::transformer:TransformHome" />
			<role name="Request()" element="TransformServlet::doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.utils.XMLReaderManager" />
			<role name="State" element="javax.xml.parsers.SAXParserFactory" />
			<role name="state" element="org.apache.xml.utils.XMLReaderManager::m_parserFactory:javax.xml.parsers.SAXParserFactory" />
			<role name="Request()" element="org.apache.xml.utils.XMLReaderManager::getXMLReader():org.xml.sax.XMLReader" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.SourceTreeManager" />
			<role name="State" element="javax.xml.transform.URIResolver" />
			<role name="state" element="org.apache.xpath.SourceTreeManager::m_uriResolver:javax.xml.transform.URIResolver" />
			<role name="Request()" element="org.apache.xpath.SourceTreeManager::resolveURI(java.lang.String, java.lang.String, javax.xml.transform.SourceLocator):javax.xml.transform.Source" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.compiler.ArgumentList" />
			<role name="State" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="state" element="org.apache.xalan.xsltc.compiler.ArgumentList::_arg:org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.ArgumentList::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.compiler.Lexer" />
			<role name="State" element="org.apache.xml.utils.PrefixResolver" />
			<role name="state" element="org.apache.xpath.compiler.Lexer::m_namespaceContext:org.apache.xml.utils.PrefixResolver" />
			<role name="Request()" element="org.apache.xpath.compiler.Lexer::tokenize(java.lang.String, java.util.Vector):void" />
			<role name="Request()" element="org.apache.xpath.compiler.Lexer::mapNSTokens(java.lang.String, int, int, int):int" />
		</instance>
		<instance>
			<role name="State" element="javax.xml.transform.URIResolver" />
			<role name="Context" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl" />
			<role name="state" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::_uriResolver:javax.xml.transform.URIResolver" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::loadSource(java.lang.String, java.lang.String, org.apache.xalan.xsltc.compiler.XSLTC):org.xml.sax.InputSource" />
		</instance>
		<instance>
			<role name="State" element="javax.xml.transform.URIResolver" />
			<role name="Context" element="org.apache.xml.utils.StylesheetPIHandler" />
			<role name="state" element="org.apache.xml.utils.StylesheetPIHandler::m_uriResolver:javax.xml.transform.URIResolver" />
			<role name="Request()" element="org.apache.xml.utils.StylesheetPIHandler::processingInstruction(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::setSystemId(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::startDocument():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::endDocument():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.extensions.XSLProcessorContext" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xalan.extensions.XSLProcessorContext::sourceTree:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xalan.extensions.XSLProcessorContext::getSourceTree():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xalan.extensions.XSLProcessorContext::getContextNode():org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.axes.NodeSequence" />
			<role name="State" element="org.apache.xml.dtm.DTMManager" />
			<role name="state" element="org.apache.xpath.axes.NodeSequence::m_dtmMgr:org.apache.xml.dtm.DTMManager" />
			<role name="Request()" element="org.apache.xpath.axes.NodeSequence::addNodeInDocOrder(int):int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.trax.TransformerImpl" />
			<role name="State" element="javax.xml.transform.URIResolver" />
			<role name="state" element="org.apache.xalan.xsltc.trax.TransformerImpl::_uriResolver:javax.xml.transform.URIResolver" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl::retrieveDocument(java.lang.String, java.lang.String, org.apache.xalan.xsltc.Translet):org.apache.xalan.xsltc.DOM" />
		</instance>
		<instance>
			<role name="Context" element="TransformThread" />
			<role name="State" element="javax.xml.transform.Transformer" />
			<role name="state" element="TransformThread::m_transformer:javax.xml.transform.Transformer" />
			<role name="Request()" element="TransformThread::run():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.transformer.TransformerIdentityImpl" />
			<role name="State" element="org.apache.xml.serializer.Serializer" />
			<role name="state" element="org.apache.xalan.transformer.TransformerIdentityImpl::m_serializer:org.apache.xml.serializer.Serializer" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::createResultContentHandler(javax.xml.transform.Result):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
		</instance>
		<instance>
			<role name="State" element="org.w3c.dom.Node" />
			<role name="Context" element="org.apache.xalan.xsltc.trax.SAX2DOM" />
			<role name="state" element="org.apache.xalan.xsltc.trax.SAX2DOM::_lastSibling:org.w3c.dom.Node" />
			<role name="state" element="org.apache.xalan.xsltc.trax.SAX2DOM::_root:org.w3c.dom.Node" />
			<role name="state" element="org.apache.xalan.xsltc.trax.SAX2DOM::_nextSibling:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="State" element="org.w3c.dom.Node" />
			<role name="Context" element="org.apache.xml.utils.DOMBuilder" />
			<role name="state" element="org.apache.xml.utils.DOMBuilder::m_currentNode:org.w3c.dom.Node" />
			<role name="state" element="org.apache.xml.utils.DOMBuilder::m_root:org.w3c.dom.Node" />
			<role name="state" element="org.apache.xml.utils.DOMBuilder::m_nextSibling:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::append(org.w3c.dom.Node):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::isOutsideDocElem():boolean" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::cdata(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.dom.SAXImpl" />
			<role name="State" element="org.w3c.dom.Document" />
			<role name="state" element="org.apache.xalan.xsltc.dom.SAXImpl::_document:org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.SAXImpl::getElementById(java.lang.String):int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.SAXImpl::getUnparsedEntityURI(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.trax.SAX2DOM" />
			<role name="State" element="org.w3c.dom.Document" />
			<role name="state" element="org.apache.xalan.xsltc.trax.SAX2DOM::_document:org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.SAX2DOM::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.utils.DOMBuilder" />
			<role name="State" element="org.w3c.dom.Document" />
			<role name="state" element="org.apache.xml.utils.DOMBuilder::m_doc:org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::append(org.w3c.dom.Node):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::charactersRaw(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::entityReference(java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::comment(char[], int, int):void" />
			<role name="Request()" element="org.apache.xml.utils.DOMBuilder::startCDATA():void" />
		</instance>
		<instance>
			<role name="State" element="org.xml.sax.ContentHandler" />
			<role name="Context" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl" />
			<role name="state" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::_handler:org.xml.sax.ContentHandler" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::startDocument():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::endDocument():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::skippedEntity(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::startPrefixMapping(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::endPrefixMapping(java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="org.xml.sax.ContentHandler" />
			<role name="Context" element="org.apache.xalan.transformer.TransformerIdentityImpl" />
			<role name="state" element="org.apache.xalan.transformer.TransformerIdentityImpl::m_resultContentHandler:org.xml.sax.ContentHandler" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::flushStartDoc():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::endDocument():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::startPrefixMapping(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::endPrefixMapping(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::skippedEntity(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="TransformApplet" />
			<role name="State" element="javax.xml.transform.TransformerFactory" />
			<role name="state" element="TransformApplet::tf:javax.xml.transform.TransformerFactory" />
			<role name="Request()" element="TransformApplet::init():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.client.XSLTProcessorApplet" />
			<role name="State" element="javax.xml.transform.TransformerFactory" />
			<role name="state" element="org.apache.xalan.client.XSLTProcessorApplet::m_tfactory:javax.xml.transform.TransformerFactory" />
			<role name="Request()" element="org.apache.xalan.client.XSLTProcessorApplet::start():void" />
			<role name="Request()" element="org.apache.xalan.client.XSLTProcessorApplet::getSource():java.lang.String" />
			<role name="Request()" element="org.apache.xalan.client.XSLTProcessorApplet::processTransformation():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.trax.TransformerFactoryImpl" />
			<role name="State" element="javax.xml.transform.URIResolver" />
			<role name="state" element="org.apache.xalan.xsltc.trax.TransformerFactoryImpl::_uriResolver:javax.xml.transform.URIResolver" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerFactoryImpl::loadSource(java.lang.String, java.lang.String, org.apache.xalan.xsltc.compiler.XSLTC):org.xml.sax.InputSource" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.dom3.DOM3TreeWalker" />
			<role name="State" element="org.apache.xml.serializer.SerializationHandler" />
			<role name="state" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::fSerializer:org.apache.xml.serializer.SerializationHandler" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::initProperties(java.util.Properties):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl" />
			<role name="State" element="org.xml.sax.ext.LexicalHandler" />
			<role name="state" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::_lexHandler:org.xml.sax.ext.LexicalHandler" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::startCDATA():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::endCDATA():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::comment(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::startDTD(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::endDTD():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::startEntity(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::endEntity(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.transformer.TransformerIdentityImpl" />
			<role name="State" element="org.xml.sax.ext.LexicalHandler" />
			<role name="state" element="org.apache.xalan.transformer.TransformerIdentityImpl::m_resultLexicalHandler:org.xml.sax.ext.LexicalHandler" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::startDTD(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::endDTD():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::startEntity(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::endEntity(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::startCDATA():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::endCDATA():void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::comment(char[], int, int):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xalan.xsltc.compiler.Closure" />
			<role name="Context" element="org.apache.xalan.xsltc.compiler.VariableRefBase" />
			<role name="state" element="org.apache.xalan.xsltc.compiler.VariableRefBase::_closure:org.apache.xalan.xsltc.compiler.Closure" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.VariableRefBase::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.dom3.DOM3TreeWalker" />
			<role name="State" element="org.xml.sax.ext.LexicalHandler" />
			<role name="state" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::fLexicalHandler:org.xml.sax.ext.LexicalHandler" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::serializeDocType(org.w3c.dom.DocumentType, boolean):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::serializeComment(org.w3c.dom.Comment):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::serializeCDATASection(org.w3c.dom.CDATASection):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::serializeEntityReference(org.w3c.dom.EntityReference, boolean):void" />
		</instance>
		<instance>
			<role name="State" element="org.xml.sax.DTDHandler" />
			<role name="Context" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl" />
			<role name="state" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::_dtdHandler:org.xml.sax.DTDHandler" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerHandlerImpl::notationDecl(java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="org.xml.sax.DTDHandler" />
			<role name="Context" element="org.apache.xalan.transformer.TransformerIdentityImpl" />
			<role name="state" element="org.apache.xalan.transformer.TransformerIdentityImpl::m_resultDTDHandler:org.xml.sax.DTDHandler" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::notationDecl(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerIdentityImpl::unparsedEntityDecl(java.lang.String, java.lang.String, java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.axes.IteratorPool" />
			<role name="State" element="org.apache.xml.dtm.DTMIterator" />
			<role name="state" element="org.apache.xpath.axes.IteratorPool::m_orig:org.apache.xml.dtm.DTMIterator" />
			<role name="Request()" element="org.apache.xpath.axes.IteratorPool::getInstanceOrThrow():org.apache.xml.dtm.DTMIterator" />
			<role name="Request()" element="org.apache.xpath.axes.IteratorPool::getInstance():org.apache.xml.dtm.DTMIterator" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.dom.DOMWSFilter" />
			<role name="State" element="org.apache.xalan.xsltc.StripFilter" />
			<role name="state" element="org.apache.xalan.xsltc.dom.DOMWSFilter::m_filter:org.apache.xalan.xsltc.StripFilter" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMWSFilter::getShouldStripSpace(int, org.apache.xml.dtm.DTM):short" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator" />
			<role name="State" element="org.apache.xalan.xsltc.dom.CurrentNodeListFilter" />
			<role name="state" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::_filter:org.apache.xalan.xsltc.dom.CurrentNodeListFilter" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::next():int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.CurrentNodeListIterator::computePositionOfLast():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.dom.FilterIterator" />
			<role name="State" element="org.apache.xml.dtm.DTMFilter" />
			<role name="state" element="org.apache.xalan.xsltc.dom.FilterIterator::_filter:org.apache.xml.dtm.DTMFilter" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.FilterIterator::next():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.axes.AxesWalker" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xpath.axes.AxesWalker::m_dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xpath.axes.AxesWalker::setRoot(int):void" />
		</instance>
		<instance>
			<role name="Context" element="TransformThread" />
			<role name="State" element="javax.xml.transform.Source" />
			<role name="state" element="TransformThread::m_inSource:javax.xml.transform.Source[]" />
			<role name="Request()" element="TransformThread::initSource():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMNodeProxy" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMNodeProxy::dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNodeName():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getTarget():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getLocalName():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getPrefix():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNamespaceURI():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNodeValue():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getStringValue():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNodeType():short" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getParentNode():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getOwnerNode():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getFirstChild():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getLastChild():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getPreviousSibling():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getNextSibling():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::hasAttribute(java.lang.String):boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::hasAttributeNS(java.lang.String, java.lang.String):boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getOwnerDocument():org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::hasChildNodes():boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getDocumentElement():org.w3c.dom.Element" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getElementsByTagName(java.lang.String):org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getElementsByTagNameNS(java.lang.String, java.lang.String):org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getElementById(java.lang.String):org.w3c.dom.Element" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getData():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getLength():int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getTagName():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::hasAttributes():boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getAttributeNS(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getAttributeNodeNS(java.lang.String, java.lang.String):org.w3c.dom.Attr" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getName():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getValue():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::getOwnerElement():org.w3c.dom.Element" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM" />
			<role name="State" element="org.w3c.dom.Node" />
			<role name="state" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM::m_pos:org.w3c.dom.Node" />
			<role name="state" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM::m_root:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM::nextNode():boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM::getHandleOfNode(org.w3c.dom.Node):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM::getDocumentTypeDeclarationSystemIdentifier():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM::getDocumentTypeDeclarationPublicIdentifier():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM::getElementById(java.lang.String):int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.dom2dtm.DOM2DTM::getUnparsedEntityURI(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.transformer.KeyRefIterator" />
			<role name="State" element="org.apache.xml.utils.XMLString" />
			<role name="state" element="org.apache.xalan.transformer.KeyRefIterator::m_ref:org.apache.xml.utils.XMLString" />
			<role name="Request()" element="org.apache.xalan.transformer.KeyRefIterator::filterNode(int):short" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter" />
			<role name="State" element="org.xml.sax.XMLReader" />
			<role name="state" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::fXMLReader:org.xml.sax.XMLReader" />
			<role name="Request()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::setXMLReader(org.xml.sax.XMLReader):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.IncrementalSAXSource_Filter::run():void" />
		</instance>
		<instance>
			<role name="Context" element="org.xml.sax.helpers.XMLFilterImpl" />
			<role name="State" element="org.xml.sax.XMLReader" />
			<role name="state" element="org.xml.sax.helpers.XMLFilterImpl::parent:org.xml.sax.XMLReader" />
			<role name="Request()" element="org.xml.sax.helpers.XMLFilterImpl::setFeature(java.lang.String, boolean):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLFilterImpl::getFeature(java.lang.String):boolean" />
			<role name="Request()" element="org.xml.sax.helpers.XMLFilterImpl::setProperty(java.lang.String, java.lang.Object):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLFilterImpl::getProperty(java.lang.String):java.lang.Object" />
			<role name="Request()" element="org.xml.sax.helpers.XMLFilterImpl::parse(org.xml.sax.InputSource):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLFilterImpl::setupParse():void" />
		</instance>
		<instance>
			<role name="Context" element="org.xml.sax.helpers.XMLReaderAdapter" />
			<role name="State" element="org.xml.sax.XMLReader" />
			<role name="state" element="org.xml.sax.helpers.XMLReaderAdapter::xmlReader:org.xml.sax.XMLReader" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setEntityResolver(org.xml.sax.EntityResolver):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setDTDHandler(org.xml.sax.DTDHandler):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setErrorHandler(org.xml.sax.ErrorHandler):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::parse(org.xml.sax.InputSource):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setupXMLReader():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.dom.DOMAdapter" />
			<role name="State" element="org.apache.xalan.xsltc.DOMEnhancedForDTM" />
			<role name="state" element="org.apache.xalan.xsltc.dom.DOMAdapter::_enhancedDOM:org.apache.xalan.xsltc.DOMEnhancedForDTM" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getMapping():short[]" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getReverse():int[]" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNSMapping():short[]" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getNSReverse():short[]" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getExpandedTypeID(int):int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMAdapter::setDocumentURI(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DOMAdapter::getDocumentURI():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.dom.KeyIndex" />
			<role name="State" element="org.apache.xalan.xsltc.DOMEnhancedForDTM" />
			<role name="state" element="org.apache.xalan.xsltc.dom.KeyIndex::_enhancedDOM:org.apache.xalan.xsltc.DOMEnhancedForDTM" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.KeyIndex::lookupId(java.lang.Object):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.KeyIndex::getDOMNodeById(java.lang.String):org.apache.xalan.xsltc.util.IntegerArray" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.KeyIndex::containsID(int, java.lang.Object):int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.NodeSetDTM" />
			<role name="State" element="org.apache.xml.dtm.DTMManager" />
			<role name="state" element="org.apache.xpath.NodeSetDTM::m_manager:org.apache.xml.dtm.DTMManager" />
			<role name="Request()" element="org.apache.xpath.NodeSetDTM::getDTM(int):org.apache.xml.dtm.DTM" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMManagerDefault" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMManagerDefault::m_dtms:org.apache.xml.dtm.DTM[]" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMManagerDefault::addDTM(org.apache.xml.dtm.DTM, int, int):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMManagerDefault::release(org.apache.xml.dtm.DTM, boolean):boolean" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xalan.xsltc.DOM" />
			<role name="Context" element="org.apache.xalan.xsltc.dom.KeyIndex" />
			<role name="state" element="org.apache.xalan.xsltc.dom.KeyIndex::_dom:org.apache.xalan.xsltc.DOM" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.KeyIndex::next():int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.KeyIndex::containsID(int, java.lang.Object):int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.KeyIndex::containsKey(int, java.lang.Object):int" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="Context" element="org.apache.xml.dtm.ref.DTMTreeWalker" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMTreeWalker::m_dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMTreeWalker::traverse(int):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMTreeWalker::traverse(int, int):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMTreeWalker::dispatachChars(int):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMTreeWalker::startNode(int):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMTreeWalker::endNode(int):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Context" element="org.apache.xml.dtm.ref.DTMNodeList" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMNodeList::m_iter:org.apache.xml.dtm.DTMIterator" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeList::item(int):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeList::getLength():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMAxisIterNodeList" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMAxisIterNodeList::m_dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMAxisIterNodeList::item(int):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMChildIterNodeList" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMChildIterNodeList::m_parentDTM:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMChildIterNodeList::item(int):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMChildIterNodeList::getLength():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.transformer.TransformerHandlerImpl" />
			<role name="State" element="org.xml.sax.Locator" />
			<role name="state" element="org.apache.xalan.transformer.TransformerHandlerImpl::m_locator:org.xml.sax.Locator" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerHandlerImpl::setDocumentLocator(org.xml.sax.Locator):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.compiler.Parser" />
			<role name="State" element="org.xml.sax.Locator" />
			<role name="state" element="org.apache.xalan.xsltc.compiler.Parser::_locator:org.xml.sax.Locator" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.Parser::getLineNumber():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM" />
			<role name="State" element="org.xml.sax.Locator" />
			<role name="state" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::m_locator:org.xml.sax.Locator" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::setSourceLocation():void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::getSourceLocatorFor(int):javax.xml.transform.SourceLocator" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.lib.sql.XConnection" />
			<role name="State" element="org.apache.xalan.lib.sql.ConnectionPool" />
			<role name="state" element="org.apache.xalan.lib.sql.XConnection::m_ConnectionPool:org.apache.xalan.lib.sql.ConnectionPool" />
			<role name="Request()" element="org.apache.xalan.lib.sql.XConnection::connect(org.apache.xalan.extensions.ExpressionContext, java.lang.String):org.apache.xpath.objects.XBooleanStatic" />
			<role name="Request()" element="org.apache.xalan.lib.sql.XConnection::init(java.lang.String, java.lang.String, java.util.Properties):void" />
			<role name="Request()" element="org.apache.xalan.lib.sql.XConnection::enableDefaultConnectionPool():void" />
			<role name="Request()" element="org.apache.xalan.lib.sql.XConnection::disableDefaultConnectionPool():void" />
			<role name="Request()" element="org.apache.xalan.lib.sql.XConnection::close():void" />
			<role name="Request()" element="org.apache.xalan.lib.sql.XConnection::setFeature(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="org.w3c.dom.Node" />
			<role name="Context" element="org.apache.xalan.xsltc.trax.DOM2SAX" />
			<role name="state" element="org.apache.xalan.xsltc.trax.DOM2SAX::_dom:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.DOM2SAX::parse():void" />
		</instance>
		<instance>
			<role name="State" element="org.w3c.dom.Node" />
			<role name="Context" element="org.apache.xalan.xsltc.trax.DOM2TO" />
			<role name="state" element="org.apache.xalan.xsltc.trax.DOM2TO::_dom:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.DOM2TO::parse():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.templates.ElemNumber$MyPrefixResolver" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xalan.templates.ElemNumber$MyPrefixResolver::dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xalan.templates.ElemNumber$MyPrefixResolver::getNamespaceForPrefix(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.transformer.TransformerImpl" />
			<role name="State" element="org.apache.xml.serializer.SerializationHandler" />
			<role name="state" element="org.apache.xalan.transformer.TransformerImpl::m_serializationHandler:org.apache.xml.serializer.SerializationHandler" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::setContentHandler(org.xml.sax.ContentHandler):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::transformToRTF(org.apache.xalan.templates.ElemTemplateElement, org.apache.xml.dtm.DTM):int" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::transformToString(org.apache.xalan.templates.ElemTemplateElement):java.lang.String" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::executeChildTemplates(org.apache.xalan.templates.ElemTemplateElement, org.xml.sax.ContentHandler):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMDocumentImpl" />
			<role name="State" element="org.apache.xml.dtm.ref.IncrementalSAXSource" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMDocumentImpl::m_incrSAXSource:org.apache.xml.dtm.ref.IncrementalSAXSource" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::setIncrementalSAXSource(org.apache.xml.dtm.ref.IncrementalSAXSource):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM" />
			<role name="State" element="org.apache.xml.dtm.ref.IncrementalSAXSource" />
			<role name="state" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::m_incrementalSAXSource:org.apache.xml.dtm.ref.IncrementalSAXSource" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::clearCoRoutine(boolean):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::setIncrementalSAXSource(org.apache.xml.dtm.ref.IncrementalSAXSource):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.sax2dtm.SAX2DTM::nextNode():boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="State" element="org.xml.sax.ContentHandler" />
			<role name="state" element="org.xml.sax.helpers.ParserAdapter::contentHandler:org.xml.sax.ContentHandler" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startDocument():void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::endDocument():void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startElement(java.lang.String, org.xml.sax.AttributeList):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::endElement(java.lang.String):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::characters(char[], int, int):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::processingInstruction(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.xml.sax.helpers.XMLReaderAdapter" />
			<role name="State" element="org.xml.sax.DocumentHandler" />
			<role name="state" element="org.xml.sax.helpers.XMLReaderAdapter::documentHandler:org.xml.sax.DocumentHandler" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::setDocumentLocator(org.xml.sax.Locator):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::startDocument():void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::endDocument():void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::characters(char[], int, int):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter::processingInstruction(java.lang.String, java.lang.String):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.dom.DocumentCache$CachedDocument" />
			<role name="State" element="org.apache.xalan.xsltc.DOMEnhancedForDTM" />
			<role name="state" element="org.apache.xalan.xsltc.dom.DocumentCache$CachedDocument::_dom:org.apache.xalan.xsltc.DOMEnhancedForDTM" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.DocumentCache$CachedDocument::loadDocument(java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Context" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator" />
			<role name="state" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::iterator:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::step():int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::cloneHeapNode():org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator$HeapNode" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::setMark():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::gotoMark():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::setStartNode(int):org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator$HeapNode" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.UnionIterator$LookAheadIterator::reset():org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator$HeapNode" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Context" element="org.apache.xpath.axes.MatchPatternIterator" />
			<role name="state" element="org.apache.xpath.axes.MatchPatternIterator::m_traverser:org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Request()" element="org.apache.xpath.axes.MatchPatternIterator::getNextNode():int" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Context" element="org.apache.xpath.axes.AxesWalker" />
			<role name="state" element="org.apache.xpath.axes.AxesWalker::m_traverser:org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Request()" element="org.apache.xpath.axes.AxesWalker::getNextNode():int" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Context" element="org.apache.xpath.axes.ChildTestIterator" />
			<role name="state" element="org.apache.xpath.axes.ChildTestIterator::m_traverser:org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Request()" element="org.apache.xpath.axes.ChildTestIterator::getNextNode():int" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Context" element="org.apache.xpath.axes.DescendantIterator" />
			<role name="state" element="org.apache.xpath.axes.DescendantIterator::m_traverser:org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Request()" element="org.apache.xpath.axes.DescendantIterator::nextNode():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.dom3.LSSerializerImpl" />
			<role name="State" element="org.apache.xml.serializer.Serializer" />
			<role name="state" element="org.apache.xml.serializer.dom3.LSSerializerImpl::fXMLSerializer:org.apache.xml.serializer.Serializer" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToString(org.w3c.dom.Node):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToURI(org.w3c.dom.Node, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="org.xml.sax.ContentHandler" />
			<role name="Context" element="org.apache.xml.dtm.ref.DTMTreeWalker" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMTreeWalker::m_contentHandler:org.xml.sax.ContentHandler" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMTreeWalker::startNode(int):void" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMTreeWalker::endNode(int):void" />
		</instance>
		<instance>
			<role name="State" element="org.w3c.dom.Node" />
			<role name="Context" element="org.apache.xpath.domapi.XPathNamespaceImpl" />
			<role name="state" element="org.apache.xpath.domapi.XPathNamespaceImpl::m_attributeNode:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getNodeValue():java.lang.String" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getParentNode():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getChildNodes():org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getFirstChild():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getLastChild():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getPreviousSibling():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getNextSibling():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getAttributes():org.w3c.dom.NamedNodeMap" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getOwnerDocument():org.w3c.dom.Document" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::normalize():void" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::isSupported(java.lang.String, java.lang.String):boolean" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getNamespaceURI():java.lang.String" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getPrefix():java.lang.String" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::getLocalName():java.lang.String" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathNamespaceImpl::hasAttributes():boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="State" element="org.xml.sax.Parser" />
			<role name="state" element="org.xml.sax.helpers.ParserAdapter::parser:org.xml.sax.Parser" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::parse(org.xml.sax.InputSource):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::setupParser():void" />
		</instance>
		<instance>
			<role name="State" element="javax.xml.transform.ErrorListener" />
			<role name="Context" element="org.apache.xalan.processor.TransformerFactoryImpl" />
			<role name="state" element="org.apache.xalan.processor.TransformerFactoryImpl::m_errorListener:javax.xml.transform.ErrorListener" />
			<role name="Request()" element="org.apache.xalan.processor.TransformerFactoryImpl::processFromNode(org.w3c.dom.Node):javax.xml.transform.Templates" />
			<role name="Request()" element="org.apache.xalan.processor.TransformerFactoryImpl::newXMLFilter(javax.xml.transform.Templates):org.xml.sax.XMLFilter" />
			<role name="Request()" element="org.apache.xalan.processor.TransformerFactoryImpl::newTransformerHandler(javax.xml.transform.Templates):javax.xml.transform.sax.TransformerHandler" />
			<role name="Request()" element="org.apache.xalan.processor.TransformerFactoryImpl::newTransformer(javax.xml.transform.Source):javax.xml.transform.Transformer" />
			<role name="Request()" element="org.apache.xalan.processor.TransformerFactoryImpl::newTemplates(javax.xml.transform.Source):javax.xml.transform.Templates" />
		</instance>
		<instance>
			<role name="Context" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter" />
			<role name="State" element="org.xml.sax.AttributeList" />
			<role name="state" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::qAtts:org.xml.sax.AttributeList" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getLength():int" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getQName(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getType(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getValue(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getIndex(java.lang.String):int" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getType(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter$AttributeListAdapter::getValue(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter" />
			<role name="State" element="org.xml.sax.Attributes" />
			<role name="state" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::attributes:org.xml.sax.Attributes" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getLength():int" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getName(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getType(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getValue(int):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getType(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.xml.sax.helpers.XMLReaderAdapter$AttributesAdapter::getValue(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="State" element="org.xml.sax.ext.LexicalHandler" />
			<role name="Context" element="org.apache.xalan.xsltc.trax.DOM2SAX" />
			<role name="state" element="org.apache.xalan.xsltc.trax.DOM2SAX::_lex:org.xml.sax.ext.LexicalHandler" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.DOM2SAX::parse(org.w3c.dom.Node):void" />
		</instance>
		<instance>
			<role name="State" element="javax.xml.transform.ErrorListener" />
			<role name="Context" element="org.apache.xalan.transformer.TransformerImpl" />
			<role name="state" element="org.apache.xalan.transformer.TransformerImpl::m_errorHandler:javax.xml.transform.ErrorListener" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::transform(javax.xml.transform.Source, boolean):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::fatalError(java.lang.Throwable):void" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformerImpl::transformNode(int):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper" />
			<role name="State" element="org.apache.xml.serializer.Serializer" />
			<role name="state" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::m_serializer:org.apache.xml.serializer.Serializer" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::setOutputStream(java.io.OutputStream):void" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::getOutputStream():java.io.OutputStream" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::setWriter(java.io.Writer):void" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::getWriter():java.io.Writer" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::setOutputFormat(java.util.Properties):void" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::getOutputFormat():java.util.Properties" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::asContentHandler():org.xml.sax.ContentHandler" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::asDOMSerializer():org.apache.xalan.serialize.DOMSerializer" />
			<role name="Request()" element="org.apache.xalan.serialize.SerializerFactory$SerializerWrapper::reset():boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMNamedNodeMap" />
			<role name="State" element="org.apache.xml.dtm.DTM" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::dtm:org.apache.xml.dtm.DTM" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::getLength():int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::getNamedItem(java.lang.String):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::item(int):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNamedNodeMap::getNamedItemNS(java.lang.String, java.lang.String):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.jaxp.XPathExpressionImpl" />
			<role name="State" element="javax.xml.parsers.DocumentBuilder" />
			<role name="state" element="org.apache.xpath.jaxp.XPathExpressionImpl::db:javax.xml.parsers.DocumentBuilder" />
			<role name="Request()" element="org.apache.xpath.jaxp.XPathExpressionImpl::evaluate(org.xml.sax.InputSource, javax.xml.namespace.QName):java.lang.Object" />
			<role name="Request()" element="org.apache.xpath.jaxp.XPathExpressionImpl::getDummyDocument():org.w3c.dom.Document" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.jaxp.XPathExpressionImpl" />
			<role name="State" element="javax.xml.parsers.DocumentBuilderFactory" />
			<role name="state" element="org.apache.xpath.jaxp.XPathExpressionImpl::dbf:javax.xml.parsers.DocumentBuilderFactory" />
			<role name="Request()" element="org.apache.xpath.jaxp.XPathExpressionImpl::evaluate(org.xml.sax.InputSource, javax.xml.namespace.QName):java.lang.Object" />
			<role name="Request()" element="org.apache.xpath.jaxp.XPathExpressionImpl::getDummyDocument():org.w3c.dom.Document" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMDocumentImpl" />
			<role name="State" element="org.apache.xml.utils.XMLStringFactory" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMDocumentImpl::m_xsf:org.apache.xml.utils.XMLStringFactory" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDocumentImpl::getStringValue(int):org.apache.xml.utils.XMLString" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Context" element="org.apache.xml.dtm.ref.DTMNodeIterator" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMNodeIterator::dtm_iter:org.apache.xml.dtm.DTMIterator" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeIterator::getRoot():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeIterator::getWhatToShow():int" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeIterator::nextNode():org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeIterator::previousNode():org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.utils.AttList" />
			<role name="State" element="org.w3c.dom.NamedNodeMap" />
			<role name="state" element="org.apache.xml.serializer.utils.AttList::m_attrs:org.w3c.dom.NamedNodeMap" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getLength():int" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getURI(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getLocalName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getQName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getValue(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getValue(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getValue(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getIndex(java.lang.String, java.lang.String):int" />
			<role name="Request()" element="org.apache.xml.serializer.utils.AttList::getIndex(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.utils.AttList" />
			<role name="State" element="org.w3c.dom.NamedNodeMap" />
			<role name="state" element="org.apache.xml.utils.AttList::m_attrs:org.w3c.dom.NamedNodeMap" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getLength():int" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getURI(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getLocalName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getQName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getValue(int):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getValue(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getValue(java.lang.String, java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getIndex(java.lang.String, java.lang.String):int" />
			<role name="Request()" element="org.apache.xml.utils.AttList::getIndex(java.lang.String):int" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Context" element="org.apache.xpath.axes.OneStepIterator" />
			<role name="state" element="org.apache.xpath.axes.OneStepIterator::m_iterator:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xpath.axes.OneStepIterator::setRoot(int, java.lang.Object):void" />
			<role name="Request()" element="org.apache.xpath.axes.OneStepIterator::getNextNode():int" />
			<role name="Request()" element="org.apache.xpath.axes.OneStepIterator::clone():java.lang.Object" />
			<role name="Request()" element="org.apache.xpath.axes.OneStepIterator::isReverseAxes():boolean" />
			<role name="Request()" element="org.apache.xpath.axes.OneStepIterator::reset():void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Context" element="org.apache.xpath.axes.ReverseAxesWalker" />
			<role name="state" element="org.apache.xpath.axes.ReverseAxesWalker::m_iterator:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xpath.axes.ReverseAxesWalker::setRoot(int):void" />
			<role name="Request()" element="org.apache.xpath.axes.ReverseAxesWalker::getNextNode():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.EncodingInfo" />
			<role name="State" element="org.apache.xml.serializer.EncodingInfo$InEncoding" />
			<role name="state" element="org.apache.xml.serializer.EncodingInfo::m_encoding:org.apache.xml.serializer.EncodingInfo$InEncoding" />
			<role name="Request()" element="org.apache.xml.serializer.EncodingInfo::isInEncoding(char):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.EncodingInfo::isInEncoding(char, char):boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.dom3.LSSerializerImpl" />
			<role name="State" element="org.apache.xml.serializer.DOM3Serializer" />
			<role name="state" element="org.apache.xml.serializer.dom3.LSSerializerImpl::fDOMSerializer:org.apache.xml.serializer.DOM3Serializer" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToString(org.w3c.dom.Node):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToURI(org.w3c.dom.Node, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="javax.xml.transform.TransformerException" />
			<role name="State" element="javax.xml.transform.SourceLocator" />
			<role name="state" element="javax.xml.transform.TransformerException::locator:javax.xml.transform.SourceLocator" />
			<role name="Request()" element="javax.xml.transform.TransformerException::getMessageAndLocation():java.lang.String" />
			<role name="Request()" element="javax.xml.transform.TransformerException::getLocationAsString():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.lib.sql.SQLDocument" />
			<role name="State" element="org.apache.xalan.lib.sql.ConnectionPool" />
			<role name="state" element="org.apache.xalan.lib.sql.SQLDocument::m_ConnectionPool:org.apache.xalan.lib.sql.ConnectionPool" />
			<role name="Request()" element="org.apache.xalan.lib.sql.SQLDocument::executeSQLStatement():void" />
			<role name="Request()" element="org.apache.xalan.lib.sql.SQLDocument::close(boolean):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMDefaultBaseIterators$FollowingIterator" />
			<role name="State" element="org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMDefaultBaseIterators$FollowingIterator::m_traverser:org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMDefaultBaseIterators$FollowingIterator::next():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.DTMException" />
			<role name="State" element="javax.xml.transform.SourceLocator" />
			<role name="state" element="org.apache.xml.dtm.DTMException::locator:javax.xml.transform.SourceLocator" />
			<role name="Request()" element="org.apache.xml.dtm.DTMException::getMessageAndLocation():java.lang.String" />
			<role name="Request()" element="org.apache.xml.dtm.DTMException::getLocationAsString():java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.compiler.Compiler" />
			<role name="State" element="javax.xml.transform.SourceLocator" />
			<role name="state" element="org.apache.xpath.compiler.Compiler::m_locator:javax.xml.transform.SourceLocator" />
			<role name="Request()" element="org.apache.xpath.compiler.Compiler::warn(java.lang.String, java.lang.Object[]):void" />
		</instance>
		<instance>
			<role name="State" element="javax.xml.transform.ErrorListener" />
			<role name="Context" element="org.apache.xalan.xsltc.trax.TransformerImpl$MessageHandler" />
			<role name="state" element="org.apache.xalan.xsltc.trax.TransformerImpl$MessageHandler::_errorListener:javax.xml.transform.ErrorListener" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TransformerImpl$MessageHandler::displayMessage(java.lang.String):void" />
		</instance>
		<instance>
			<role name="State" element="javax.xml.transform.ErrorListener" />
			<role name="Context" element="org.apache.xpath.compiler.Compiler" />
			<role name="state" element="org.apache.xpath.compiler.Compiler::m_errorHandler:javax.xml.transform.ErrorListener" />
			<role name="Request()" element="org.apache.xpath.compiler.Compiler::compileFunction(int):org.apache.xpath.Expression" />
			<role name="Request()" element="org.apache.xpath.compiler.Compiler::warn(java.lang.String, java.lang.Object[]):void" />
			<role name="Request()" element="org.apache.xpath.compiler.Compiler::error(java.lang.String, java.lang.Object[]):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.dtm.ref.DTMNodeProxy" />
			<role name="State" element="org.w3c.dom.DOMImplementation" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMNodeProxy::implementation:org.w3c.dom.DOMImplementation" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::supports(java.lang.String, java.lang.String):boolean" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMNodeProxy::isSupported(java.lang.String, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="org.w3c.dom.Node" />
			<role name="Context" element="org.apache.xml.serializer.dom3.LSSerializerImpl" />
			<role name="state" element="org.apache.xml.serializer.dom3.LSSerializerImpl::fVisitedNode:org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToString(org.w3c.dom.Node):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToURI(org.w3c.dom.Node, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.domapi.XPathResultImpl" />
			<role name="State" element="org.w3c.dom.NodeList" />
			<role name="state" element="org.apache.xpath.domapi.XPathResultImpl::m_list:org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::getSnapshotLength():int" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::snapshotItem(int):org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.dom3.DOM3TreeWalker" />
			<role name="State" element="org.w3c.dom.ls.LSSerializerFilter" />
			<role name="state" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::fFilter:org.w3c.dom.ls.LSSerializerFilter" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::traverse(org.w3c.dom.Node):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::traverse(org.w3c.dom.Node, org.w3c.dom.Node):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::serializeAttList(org.w3c.dom.Element):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.extensions.XPathFunctionImpl" />
			<role name="State" element="org.apache.xalan.extensions.ExtensionHandler" />
			<role name="state" element="org.apache.xalan.extensions.XPathFunctionImpl::m_handler:org.apache.xalan.extensions.ExtensionHandler" />
			<role name="Request()" element="org.apache.xalan.extensions.XPathFunctionImpl::evaluate(java.util.List):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xalan.xsltc.dom.FilteredStepIterator" />
			<role name="State" element="org.apache.xalan.xsltc.dom.Filter" />
			<role name="state" element="org.apache.xalan.xsltc.dom.FilteredStepIterator::_filter:org.apache.xalan.xsltc.dom.Filter" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.FilteredStepIterator::next():int" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMIterator" />
			<role name="Context" element="org.apache.xalan.transformer.TransformSnapshotImpl" />
			<role name="state" element="org.apache.xalan.transformer.TransformSnapshotImpl::m_contextNodeList:org.apache.xml.dtm.DTMIterator" />
			<role name="Request()" element="org.apache.xalan.transformer.TransformSnapshotImpl::apply(org.apache.xalan.transformer.TransformerImpl):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.SerializerTraceWriter" />
			<role name="State" element="org.apache.xml.serializer.SerializerTrace" />
			<role name="state" element="org.apache.xml.serializer.SerializerTraceWriter::m_tracer:org.apache.xml.serializer.SerializerTrace" />
			<role name="Request()" element="org.apache.xml.serializer.SerializerTraceWriter::flushBuffer():void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.jaxp.JAXPPrefixResolver" />
			<role name="State" element="javax.xml.namespace.NamespaceContext" />
			<role name="state" element="org.apache.xpath.jaxp.JAXPPrefixResolver::namespaceContext:javax.xml.namespace.NamespaceContext" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPPrefixResolver::getNamespaceForPrefix(java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.jaxp.JAXPExtensionsProvider" />
			<role name="State" element="javax.xml.xpath.XPathFunctionResolver" />
			<role name="state" element="org.apache.xpath.jaxp.JAXPExtensionsProvider::resolver:javax.xml.xpath.XPathFunctionResolver" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPExtensionsProvider::functionAvailable(java.lang.String, java.lang.String):boolean" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPExtensionsProvider::extFunction(java.lang.String, java.lang.String, java.util.Vector, java.lang.Object):java.lang.Object" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPExtensionsProvider::extFunction(org.apache.xpath.functions.FuncExtFunction, java.util.Vector):java.lang.Object" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.jaxp.JAXPVariableStack" />
			<role name="State" element="javax.xml.xpath.XPathVariableResolver" />
			<role name="state" element="org.apache.xpath.jaxp.JAXPVariableStack::resolver:javax.xml.xpath.XPathVariableResolver" />
			<role name="Request()" element="org.apache.xpath.jaxp.JAXPVariableStack::getVariableOrParam(org.apache.xpath.XPathContext, org.apache.xml.utils.QName):org.apache.xpath.objects.XObject" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.dom3.DOM3TreeWalker" />
			<role name="State" element="org.w3c.dom.DOMErrorHandler" />
			<role name="state" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::fErrorHandler:org.w3c.dom.DOMErrorHandler" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::serializeAttList(org.w3c.dom.Element):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::serializeCDATASection(org.w3c.dom.CDATASection):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::isCommentWellFormed(java.lang.String):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::isElementWellFormed(org.w3c.dom.Node):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::isAttributeWellFormed(org.w3c.dom.Node):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::isPIWellFormed(org.w3c.dom.ProcessingInstruction):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::isCDATASectionWellFormed(org.w3c.dom.CDATASection):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::isTextWellFormed(org.w3c.dom.Text):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::isEntityReferneceWellFormed(org.w3c.dom.EntityReference):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::checkUnboundPrefixInEntRef(org.w3c.dom.Node):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::recordLocalNSDecl(org.w3c.dom.Node):void" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.DOM3TreeWalker::fixupElementNS(org.w3c.dom.Node):void" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xml.serializer.dom3.LSSerializerImpl" />
			<role name="State" element="org.w3c.dom.DOMErrorHandler" />
			<role name="state" element="org.apache.xml.serializer.dom3.LSSerializerImpl::fDOMErrorHandler:org.w3c.dom.DOMErrorHandler" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::write(org.w3c.dom.Node, org.w3c.dom.ls.LSOutput):boolean" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToString(org.w3c.dom.Node):java.lang.String" />
			<role name="Request()" element="org.apache.xml.serializer.dom3.LSSerializerImpl::writeToURI(org.w3c.dom.Node, java.lang.String):boolean" />
		</instance>
		<instance>
			<role name="State" element="org.w3c.dom.Node" />
			<role name="Context" element="javax.xml.transform.dom.DOMResult" />
			<role name="state" element="javax.xml.transform.dom.DOMResult::nextSibling:org.w3c.dom.Node" />
			<role name="state" element="javax.xml.transform.dom.DOMResult::node:org.w3c.dom.Node" />
			<role name="Request()" element="javax.xml.transform.dom.DOMResult::setNode(org.w3c.dom.Node):void" />
			<role name="Request()" element="javax.xml.transform.dom.DOMResult::setNextSibling(org.w3c.dom.Node):void" />
		</instance>
		<instance>
			<role name="State" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Context" element="org.apache.xml.dtm.ref.DTMAxisIterNodeList" />
			<role name="state" element="org.apache.xml.dtm.ref.DTMAxisIterNodeList::m_iter:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMAxisIterNodeList::item(int):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xml.dtm.ref.DTMAxisIterNodeList::getLength():int" />
		</instance>
		<instance>
			<role name="Context" element="org.apache.xpath.domapi.XPathResultImpl" />
			<role name="State" element="org.w3c.dom.traversal.NodeIterator" />
			<role name="state" element="org.apache.xpath.domapi.XPathResultImpl::m_iterator:org.w3c.dom.traversal.NodeIterator" />
			<role name="Request()" element="org.apache.xpath.domapi.XPathResultImpl::iterateNext():org.w3c.dom.Node" />
		</instance>
		<instance>
			<role name="Context" element="org.xml.sax.helpers.ParserAdapter" />
			<role name="State" element="org.xml.sax.ErrorHandler" />
			<role name="state" element="org.xml.sax.helpers.ParserAdapter::errorHandler:org.xml.sax.ErrorHandler" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::startElement(java.lang.String, org.xml.sax.AttributeList):void" />
			<role name="Request()" element="org.xml.sax.helpers.ParserAdapter::reportError(java.lang.String):void" />
		</instance>
	</pattern>
	<pattern name="Strategy" />
	<pattern name="Bridge">
		<instance>
			<role name="Abstraction" element="org.apache.xml.serializer.ToSAXHandler" />
			<role name="Implementor" element="org.xml.sax.ContentHandler" />
			<role name="implementor" element="org.apache.xml.serializer.ToSAXHandler::m_saxHandler:org.xml.sax.ContentHandler" />
			<role name="Operation()" element="org.apache.xml.serializer.ToSAXHandler::startDocumentInternal():void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.xml.serializer.ToSAXHandler" />
			<role name="Implementor" element="org.xml.sax.ext.LexicalHandler" />
			<role name="implementor" element="org.apache.xml.serializer.ToSAXHandler::m_lexHandler:org.xml.sax.ext.LexicalHandler" />
			<role name="Operation()" element="org.apache.xml.serializer.ToSAXHandler::comment(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.xml.serializer.SerializerBase" />
			<role name="Implementor" element="org.apache.xml.serializer.SerializerTrace" />
			<role name="implementor" element="org.apache.xml.serializer.SerializerBase::m_tracer:org.apache.xml.serializer.SerializerTrace" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireEndElem(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireCharEvent(char[], int, int):void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::setTransformer(javax.xml.transform.Transformer):void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireStartEntity(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireCDATAEvent(char[], int, int):void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireCommentEvent(char[], int, int):void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireStartDoc():void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireEndDoc():void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireStartElem(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireEscapingEvent(java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.serializer.SerializerBase::fireEntityReference(java.lang.String):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator" />
			<role name="Implementor" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator$HeapNode" />
			<role name="implementor" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::_heap:org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator$HeapNode[]" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::next():int" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::setStartNode(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::heapify(int):void" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultiValuedNodeHeapIterator::reset():org.apache.xml.dtm.DTMAxisIterator" />
		</instance>
		<instance>
			<role name="Implementor" element="org.apache.xalan.xsltc.DOM" />
			<role name="Abstraction" element="org.apache.xalan.xsltc.dom.NodeCounter" />
			<role name="implementor" element="org.apache.xalan.xsltc.dom.NodeCounter::_document:org.apache.xalan.xsltc.DOM" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.NodeCounter::matchesCount(int):boolean" />
		</instance>
		<instance>
			<role name="Implementor" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Abstraction" element="org.apache.xalan.xsltc.dom.MultipleNodeCounter" />
			<role name="implementor" element="org.apache.xalan.xsltc.dom.MultipleNodeCounter::_precSiblings:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.MultipleNodeCounter::getCounter():java.lang.String" />
		</instance>
		<instance>
			<role name="Implementor" element="org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Abstraction" element="org.apache.xalan.xsltc.dom.SingleNodeCounter" />
			<role name="implementor" element="org.apache.xalan.xsltc.dom.SingleNodeCounter::_countSiblings:org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.SingleNodeCounter::getCounter():java.lang.String" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.xml.serializer.ToSAXHandler" />
			<role name="Implementor" element="org.apache.xml.serializer.TransformStateSetter" />
			<role name="implementor" element="org.apache.xml.serializer.ToSAXHandler::m_state:org.apache.xml.serializer.TransformStateSetter" />
			<role name="Operation()" element="org.apache.xml.serializer.ToSAXHandler::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Operation()" element="org.apache.xml.serializer.ToSAXHandler::startElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.serializer.ToSAXHandler::startElement(java.lang.String):void" />
			<role name="Operation()" element="org.apache.xml.serializer.ToSAXHandler::characters(org.w3c.dom.Node):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.xalan.xsltc.dom.NodeSortRecord" />
			<role name="Implementor" element="org.apache.xalan.xsltc.CollatorFactory" />
			<role name="implementor" element="org.apache.xalan.xsltc.dom.NodeSortRecord::_collatorFactory:org.apache.xalan.xsltc.CollatorFactory" />
			<role name="Operation()" element="org.apache.xalan.xsltc.dom.NodeSortRecord::initialize(int, int, org.apache.xalan.xsltc.DOM, org.apache.xalan.xsltc.dom.SortSettings):void" />
		</instance>
		<instance>
			<role name="Abstraction" element="org.apache.xalan.xsltc.runtime.AbstractTranslet" />
			<role name="Implementor" element="org.w3c.dom.DOMImplementation" />
			<role name="implementor" element="org.apache.xalan.xsltc.runtime.AbstractTranslet::_domImplementation:org.w3c.dom.DOMImplementation" />
			<role name="Operation()" element="org.apache.xalan.xsltc.runtime.AbstractTranslet::newDocument(java.lang.String, java.lang.String):org.w3c.dom.Document" />
		</instance>
	</pattern>
	<pattern name="Template Method">
		<instance>
			<role name="AbstractClass" element="javax.xml.datatype.DatatypeFactory" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newDuration(boolean, int, int, int, int, int, int):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newDurationDayTime(java.lang.String):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newDurationDayTime(long):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newDurationDayTime(boolean, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger, java.math.BigInteger):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newDurationYearMonth(java.lang.String):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newDurationYearMonth(long):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newDurationYearMonth(boolean, java.math.BigInteger, java.math.BigInteger):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newXMLGregorianCalendar(int, int, int, int, int, int, int, int):javax.xml.datatype.XMLGregorianCalendar" />
			<role name="TemplateMethod()" element="javax.xml.datatype.DatatypeFactory::newXMLGregorianCalendarTime(int, int, int, java.math.BigDecimal, int):javax.xml.datatype.XMLGregorianCalendar" />
		</instance>
		<instance>
			<role name="AbstractClass" element="javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getXMLSchemaType():javax.xml.namespace.QName" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getYears():int" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getMonths():int" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getDays():int" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getHours():int" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getMinutes():int" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getSeconds():int" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getTimeInMillis(java.util.Calendar):long" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::getTimeInMillis(java.util.Date):long" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::addTo(java.util.Date):void" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::subtract(javax.xml.datatype.Duration):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::multiply(int):javax.xml.datatype.Duration" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::isLongerThan(javax.xml.datatype.Duration):boolean" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::isShorterThan(javax.xml.datatype.Duration):boolean" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="javax.xml.datatype.Duration::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="javax.xml.datatype.XMLGregorianCalendar" />
			<role name="TemplateMethod()" element="javax.xml.datatype.XMLGregorianCalendar::setTime(int, int, int, java.math.BigDecimal):void" />
			<role name="TemplateMethod()" element="javax.xml.datatype.XMLGregorianCalendar::setTime(int, int, int, int):void" />
			<role name="TemplateMethod()" element="javax.xml.datatype.XMLGregorianCalendar::getMillisecond():int" />
			<role name="TemplateMethod()" element="javax.xml.datatype.XMLGregorianCalendar::equals(java.lang.Object):boolean" />
			<role name="TemplateMethod()" element="javax.xml.datatype.XMLGregorianCalendar::hashCode():int" />
			<role name="TemplateMethod()" element="javax.xml.datatype.XMLGregorianCalendar::toString():java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="javax.xml.parsers.DocumentBuilder" />
			<role name="TemplateMethod()" element="javax.xml.parsers.DocumentBuilder::parse(java.io.InputStream):org.w3c.dom.Document" />
			<role name="TemplateMethod()" element="javax.xml.parsers.DocumentBuilder::parse(java.io.InputStream, java.lang.String):org.w3c.dom.Document" />
			<role name="TemplateMethod()" element="javax.xml.parsers.DocumentBuilder::parse(java.lang.String):org.w3c.dom.Document" />
			<role name="TemplateMethod()" element="javax.xml.parsers.DocumentBuilder::parse(java.io.File):org.w3c.dom.Document" />
		</instance>
		<instance>
			<role name="AbstractClass" element="javax.xml.parsers.SAXParser" />
			<role name="TemplateMethod()" element="javax.xml.parsers.SAXParser::parse(org.xml.sax.InputSource, org.xml.sax.HandlerBase):void" />
			<role name="TemplateMethod()" element="javax.xml.parsers.SAXParser::parse(org.xml.sax.InputSource, org.xml.sax.helpers.DefaultHandler):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="javax.xml.validation.SchemaFactory" />
			<role name="TemplateMethod()" element="javax.xml.validation.SchemaFactory::newSchema(javax.xml.transform.Source):javax.xml.validation.Schema" />
		</instance>
		<instance>
			<role name="AbstractClass" element="javax.xml.validation.SchemaFactoryFinder$SingleIterator" />
			<role name="TemplateMethod()" element="javax.xml.validation.SchemaFactoryFinder$SingleIterator::next():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="javax.xml.validation.Validator" />
			<role name="TemplateMethod()" element="javax.xml.validation.Validator::validate(javax.xml.transform.Source):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="javax.xml.xpath.XPathFactoryFinder$SingleIterator" />
			<role name="TemplateMethod()" element="javax.xml.xpath.XPathFactoryFinder$SingleIterator::next():java.lang.Object" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xalan.xsltc.compiler.LocationPathPattern" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.LocationPathPattern::getAxis():int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xalan.xsltc.compiler.SyntaxTreeNode" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.SyntaxTreeNode::typeCheckContents(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.SyntaxTreeNode::translateContents(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.util.Type::translateTo(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator, org.apache.xalan.xsltc.compiler.util.Type):void" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.util.Type::translateToDesynthesized(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator, org.apache.xalan.xsltc.compiler.util.BooleanType):org.apache.xalan.xsltc.compiler.FlowList" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.util.Type::translateTo(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator, java.lang.Class):void" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.util.Type::translateFrom(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator, java.lang.Class):void" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.util.Type::translateBox(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.compiler.util.Type::translateUnBox(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xalan.xsltc.dom.NodeCounter" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.dom.NodeCounter::getCounter(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):java.lang.String" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xalan.xsltc.dom.NodeIteratorBase" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.dom.NodeIteratorBase::reset():org.apache.xalan.xsltc.NodeIterator" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.dom.NodeIteratorBase::getLast():int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xalan.xsltc.dom.NodeSortRecord" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.dom.NodeSortRecord::stringValue(int):java.lang.Comparable" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.dom.NodeSortRecord::numericValue(int):java.lang.Double" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xalan.xsltc.runtime.AbstractTranslet" />
			<role name="TemplateMethod()" element="org.apache.xalan.xsltc.runtime.AbstractTranslet::transform(org.apache.xalan.xsltc.DOM, org.apache.xml.serializer.SerializationHandler):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xml.dtm.DTMAxisTraverser" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.DTMAxisTraverser::first(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.DTMAxisTraverser::first(int, int):int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xml.dtm.ref.DTMAxisIteratorBase" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMAxisIteratorBase::reset():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMAxisIteratorBase::getLast():int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMAxisIteratorBase::getNodeByPosition(int):int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xml.dtm.ref.DTMDefaultBase" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::_exptype(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::_level(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::_firstch(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::_nextsib(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::_prevsib(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::_parent(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::dumpDTM(java.io.OutputStream):void" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::dumpNode(int):java.lang.String" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::getFirstAttributeIdentity(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::getTypedAttribute(int, int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::getNextAttributeIdentity(int):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::getFirstNamespaceNode(int, boolean):int" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBase::getNextNamespaceNode(int, int, boolean):int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$IndexedDTMAxisTraverser" />
			<role name="TemplateMethod()" element="org.apache.xml.dtm.ref.DTMDefaultBaseTraversers$IndexedDTMAxisTraverser::getNextIndexed(int, int, int):int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xml.serializer.SerializerBase" />
			<role name="TemplateMethod()" element="org.apache.xml.serializer.SerializerBase::comment(java.lang.String):void" />
			<role name="TemplateMethod()" element="org.apache.xml.serializer.SerializerBase::entityReference(java.lang.String):void" />
			<role name="TemplateMethod()" element="org.apache.xml.serializer.SerializerBase::characters(org.w3c.dom.Node):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xpath.axes.BasicTestIterator" />
			<role name="TemplateMethod()" element="org.apache.xpath.axes.BasicTestIterator::nextNode():int" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xpath.axes.LocPathIterator" />
			<role name="TemplateMethod()" element="org.apache.xpath.axes.LocPathIterator::executeCharsToContentHandler(org.apache.xpath.XPathContext, org.xml.sax.ContentHandler):void" />
			<role name="TemplateMethod()" element="org.apache.xpath.axes.LocPathIterator::getLength():int" />
			<role name="TemplateMethod()" element="org.apache.xpath.axes.LocPathIterator::runTo(int):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xpath.Expression" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::execute(org.apache.xpath.XPathContext, int):org.apache.xpath.objects.XObject" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::execute(org.apache.xpath.XPathContext, int, org.apache.xml.dtm.DTM, int):org.apache.xpath.objects.XObject" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::execute(org.apache.xpath.XPathContext, boolean):org.apache.xpath.objects.XObject" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::num(org.apache.xpath.XPathContext):double" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::bool(org.apache.xpath.XPathContext):boolean" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::xstr(org.apache.xpath.XPathContext):org.apache.xml.utils.XMLString" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::asNode(org.apache.xpath.XPathContext):int" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::asIterator(org.apache.xpath.XPathContext, int):org.apache.xml.dtm.DTMIterator" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::asIteratorRaw(org.apache.xpath.XPathContext, int):org.apache.xml.dtm.DTMIterator" />
			<role name="TemplateMethod()" element="org.apache.xpath.Expression::executeCharsToContentHandler(org.apache.xpath.XPathContext, org.xml.sax.ContentHandler):void" />
		</instance>
		<instance>
			<role name="AbstractClass" element="org.apache.xpath.operations.UnaryOperation" />
			<role name="TemplateMethod()" element="org.apache.xpath.operations.UnaryOperation::execute(org.apache.xpath.XPathContext):org.apache.xpath.objects.XObject" />
		</instance>
	</pattern>
	<pattern name="Visitor" />
	<pattern name="Proxy">
		<instance>
			<role name="Proxy" element="org.apache.xalan.xsltc.dom.AdaptiveResultTreeImpl" />
			<role name="RealSubject" element="org.apache.xalan.xsltc.dom.SAXImpl" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.AdaptiveResultTreeImpl::getAxisIterator(int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.AdaptiveResultTreeImpl::getTypedAxisIterator(int, int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.AdaptiveResultTreeImpl::getNodeName(int):java.lang.String" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.AdaptiveResultTreeImpl::getUnparsedEntityURI(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.AdaptiveResultTreeImpl::getElementById(java.lang.String):int" />
		</instance>
		<instance>
			<role name="Proxy" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl" />
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Parser" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::startDocument():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::endDocument():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::startPrefixMapping(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::endPrefixMapping(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::endElement(java.lang.String, java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::characters(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::processingInstruction(java.lang.String, java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::ignorableWhitespace(char[], int, int):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::skippedEntity(java.lang.String):void" />
			<role name="Request()" element="org.apache.xalan.xsltc.trax.TemplatesHandlerImpl::setDocumentLocator(org.xml.sax.Locator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.templates.StylesheetRoot" />
			<role name="Proxy" element="org.apache.xalan.templates.ElemTemplateElement" />
			<role name="Request()" element="org.apache.xalan.templates.ElemTemplateElement::canStripWhiteSpace():boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="org.apache.xpath.axes.WalkingIterator" />
			<role name="RealSubject" element="org.apache.xpath.axes.AxesWalker" />
			<role name="Request()" element="org.apache.xpath.axes.WalkingIterator::getAnalysisBits():int" />
			<role name="Request()" element="org.apache.xpath.axes.WalkingIterator::callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor):void" />
			<role name="Request()" element="org.apache.xpath.axes.WalkingIterator::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="Proxy" element="org.apache.xpath.patterns.UnionPattern" />
			<role name="RealSubject" element="org.apache.xpath.patterns.StepPattern" />
			<role name="Request()" element="org.apache.xpath.patterns.UnionPattern::fixupVariables(java.util.Vector, int):void" />
			<role name="Request()" element="org.apache.xpath.patterns.UnionPattern::execute(org.apache.xpath.XPathContext):org.apache.xpath.objects.XObject" />
			<role name="Request()" element="org.apache.xpath.patterns.UnionPattern::callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor):void" />
			<role name="Request()" element="org.apache.xpath.patterns.UnionPattern::deepEquals(org.apache.xpath.Expression):boolean" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.Key" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.Key::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.Key::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.Number" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.Number::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.Number::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.ApplyTemplates" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.ApplyTemplates::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.ApplyTemplates::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.ForEach" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.ForEach::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.ForEach::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.Sort" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.Sort::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.CopyOf" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.CopyOf::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.CopyOf::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.If" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.If::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.TransletOutput" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.TransletOutput::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.TransletOutput::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.ValueOf" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.ValueOf::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.ValueOf::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.When" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.When::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.Expression" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.WithParam" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.WithParam::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.UseAttributeSets" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.AttributeSet" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.AttributeSet::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.AttributeSet::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="RealSubject" element="org.apache.xalan.xsltc.compiler.UseAttributeSets" />
			<role name="Proxy" element="org.apache.xalan.xsltc.compiler.Copy" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.Copy::typeCheck(org.apache.xalan.xsltc.compiler.SymbolTable):org.apache.xalan.xsltc.compiler.util.Type" />
			<role name="Request()" element="org.apache.xalan.xsltc.compiler.Copy::translate(org.apache.xalan.xsltc.compiler.util.ClassGenerator, org.apache.xalan.xsltc.compiler.util.MethodGenerator):void" />
		</instance>
		<instance>
			<role name="Proxy" element="org.apache.xalan.xsltc.dom.ClonedNodeListIterator" />
			<role name="RealSubject" element="org.apache.xalan.xsltc.dom.CachedNodeListIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.ClonedNodeListIterator::cloneIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.ClonedNodeListIterator::setMark():void" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.ClonedNodeListIterator::gotoMark():void" />
		</instance>
		<instance>
			<role name="Proxy" element="org.apache.xalan.xsltc.dom.MultiDOM" />
			<role name="RealSubject" element="org.apache.xalan.xsltc.dom.DOMAdapter" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getDocument():int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getIterator():org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getStringValue():java.lang.String" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getNamespaceAxisIterator(int, int):org.apache.xml.dtm.DTMAxisIterator" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::makeNode(org.apache.xml.dtm.DTMAxisIterator):org.w3c.dom.Node" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::makeNodeList(org.apache.xml.dtm.DTMAxisIterator):org.w3c.dom.NodeList" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getNodeHandle(int):int" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getResultTreeFrag(int, int):org.apache.xalan.xsltc.DOM" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getResultTreeFrag(int, int, boolean):org.apache.xalan.xsltc.DOM" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getOutputDomBuilder():org.apache.xml.serializer.SerializationHandler" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::lookupNamespace(int, java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getUnparsedEntityURI(java.lang.String):java.lang.String" />
			<role name="Request()" element="org.apache.xalan.xsltc.dom.MultiDOM::getElementsWithIDs():org.apache.xalan.xsltc.runtime.Hashtable" />
		</instance>
	</pattern>
	<pattern name="Proxy2" />
	<pattern name="Chain of Responsibility">
		<instance>
			<role name="Handler" element="org.apache.xalan.xsltc.compiler.SyntaxTreeNode" />
			<role name="successor" element="org.apache.xalan.xsltc.compiler.SyntaxTreeNode::_parent:org.apache.xalan.xsltc.compiler.SyntaxTreeNode" />
		</instance>
	</pattern>
</system>

